{"version":3,"sources":["Utils/API.js","Components/JeopardyBoard/JeopardyBoard.js","Components/JeopardyBoard/Contestants.js","Components/JeopardyBoard/Question.js","Components/JeopardyBoard/Answer.js","Components/JeopardyBoard/Result.js","Components/JeopardyBoard/FinalJeopardy.js","Components/JeopardyBoard/GameOver.js","Components/JeopardyBoard/TurnWarning.js","Components/MainMenu/index.js","Components/WelcomeScreen/index.js","Components/SpeechRecognition/SpeechRecognition.js","App.js","registerServiceWorker.js","index.js"],"names":["socket","axios","get","serverIP","io","gameid","params","name","post","gameID","emit","playerId","reactFuncs","on","questionID","player","scores","turn","guess","correct","answers","playerName","questionId","game","newRound","answer","round","question","wager","JeopardyBoard","props","categories","className","map","cat","index","key","activeCategory","questions","index2","answered","includes","_id","id","onClick","displayQuestion","value","text","Contestants","contestants","e","backToMenu","Question","React","forwardRef","ref","canbuzz","onFocus","console","log","buzz","Answer","buzzedIn","me","onSubmit","answerQuestion","onChange","handleAnswer","type","style","width","seconds","Result","questionOver","FinalJeopardy","myscore","ready","finalAnswer","wagerSubmitted","placeWager","min","max","handleWager","GameOver","Object","keys","finalGuesses","length","finalScores","Math","abs","TurnWarn","close","createNewGame","handleGameTitle","games","startGame","title","WelcomeScreen","createNewPlayer","handlePlayerName","SpeechRecognition","transcript","resetTranscript","browserSupportsSpeechRecognition","pickCategory","matcher","toLowerCase","match","join","i","category","replace","App","state","activeQuestion","activeAnswer","activeResult","timer","userScore","mainScreen","newGameTitle","timestamp","playerID","playerNum","resultTimer","triedToAnswer","totalQuestionsInRound","finalWager","finalWagerSubmitted","finalQuestion","finalQuestionAnswered","finalResults","gameOver","activeAnswerTimer","resetSpeechTimer","setInterval","resetSpeechRecog","turnWarning","getGames","API","then","res","setState","data","catch","err","getGame","jeopardyCategories","doubleCategories","preFinalScores","finalJeopardy","qsInRound","startNextRound","handleNewContestant","players","handleScoresInit","handleNewScores","undefined","setTimeout","closeQuestionFinal","closeQuestion","questionid","handleAnswerUpdate","index1","buzzIn","handleBuzzUpdate","answerSeconds","answerField","current","focus","answerFinalQuestion","preventDefault","correctAnswer","parseInt","possibleAnswers","clearInterval","answerVal","turnChange","push","splice","event","target","newPlayerName","cookies","Cookies","set","timesUp","finalGuess","backToMain","gameName","handleQuestion","initFinalQuestion","filter","x","some","element","mouseClickEvents","forEach","mouseEventType","dispatchEvent","MouseEvent","view","window","bubbles","cancelable","buttons","simulateMouseClick","document","querySelector","buzzButton","handleFinalWager","placeFinalWager","closeWarning","this","loadCookies","createRef","TurnWarning","MainMenu","endRound","doubleCat","Component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","CookiesProvider","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.27f71828.chunk.js","sourcesContent":["import axios from \"axios\";\nimport io from 'socket.io-client';\n// const socket = openSocket('http://10.0.0.209:8000');\nlet socket;\n\nexport default {\n  getSocketIP(){\n    return axios.get(\"/api/ip\");\n  },\n  initSocket(serverIP){\n    socket = io();\n    // socket = io();\n  },\n  getCategories: function(gameid) {\n    return axios.get(\"/api/categories\",\n      {params:{gameid:gameid}}\n      );\n  },\n  getGames: function() {\n    return axios.get(\"/api/games\");\n  },\n  updateGameAnswers: function(answered, game){\n    return axios.post(\"/api/updateAnswers\", {\n      game:game,\n      answered: answered\n    })\n  },\n  createNewGame: (name) =>{\n    // console.log(name)\n    return axios.post(\"/api/create-game\", {\n      name: name\n    })\n  },\n  createNewPlayer: (name) =>{\n    // console.log(name)\n    return axios.post(\"/api/create-player\", {\n      name: name\n    })\n  },\n  subscribeToTimer(cb) {\n    socket.on('timer', timestamp => cb(null, timestamp));\n    socket.emit('subscribeToTimer', 5000);\n  },\n  disconnectFromGame(gameID){\n    socket.emit('unsubscribeFromGame', gameID);\n\n  },\n  connectToGame(gameID, playerId, reactFuncs){\n    socket.emit('subscribeToGame', gameID);\n\n    socket.on('questionID', questionID =>  reactFuncs['handleQuestion']( questionID) );\n    socket.on('contestantUpdate', player =>  reactFuncs['handleNewContestant'](player) );\n    socket.on('scoresUpdate', (scores, turn, guess, correct) =>  reactFuncs['handleNewScores'](scores, turn, guess, correct) );\n    socket.on('scoresInit', (scores) =>  reactFuncs['handleScoresInit'](scores) );\n    socket.on('answerUpdate', answers =>  reactFuncs['handleAnswerUpdate'](answers) );\n    socket.on('gameCloseQuestion', () => {reactFuncs['closeQuestion']()} );\n    socket.on('buzzUpdate', (playerName) => {reactFuncs['handleBuzzUpdate'](playerName)} );\n    socket.on('timesUp', (playerName, questionId) => {reactFuncs['timesUp'](playerName, questionId)} );\n    socket.on('questionOver', (questionId) => {reactFuncs['questionOver'](questionId)} );\n    socket.on('initFinalQuestion', () => reactFuncs['initFinalQuestion']());\n    socket.on('gameOver', () => reactFuncs['gameOver']());\n    socket.on('finalGuess', (player,guess) => reactFuncs['finalGuess'](player,guess));\n\n    return axios.post(\"/api/add-to-game\", {\n      game:gameID,\n      player:playerId\n    })\n\n  },\n  updateRound(gameID, newRound){\n    socket.emit(\"updateRound\", gameID, newRound)\n  },\n  selectQuestion(questionID, gameid){\n    socket.emit('selectQuestion', questionID, gameid)\n  },\n  closeQuestion(gameID){\n    socket.emit('closeQuestionSignal', gameID);\n  },\n  submitScores(gameid, scores, turn, answer, correct, round){\n    socket.emit('newScores', gameid, scores, turn, answer, correct,round)\n  },\n  buzz(gameID, playerName, question){\n    socket.emit('buzz', gameID, playerName, question)\n  },\n  placeFinalWager(gameID, playerName, wager){\n    socket.emit('finalWager', gameID, playerName, wager)\n  },\n   submitFinal(gameID, playerName, guess){\n    socket.emit('submitFinal', gameID, playerName, guess)\n  }\n  \n};\n","import React, { Component } from \"react\";\nimport Speech from 'react-speech';\n\nvar JeopardyBoard = (props) => {\n    // console.log(props.activeCategor\n    let categories =props.categories \n    return (\n        <div className = \"jeopardy-table\">\n\n              {categories.map((cat, index) => (\n                <div className = \"category-column\" key = {index}>\n                    {index === props.activeCategory ? \n                    <div className =\"cat-name cat-name-active \">{cat.name}</div>\n                    :\n                    <div className =\"cat-name \">{cat.name}</div>\n                    }\n                    {cat.questions.map((question, index2) =>(\n                        props.answered.includes(question._id) ? \n                            <div id = {question._id} key = {index2} className =\"question-name\" >\n                            </div> \n                            :\n                            <div key = {index2}>\n                    <div id = {question._id} className =\"question-name\" \n                    onClick = {() =>{props.displayQuestion(question._id)}}>\n                     {question.value}\n                     </div>\n                    <Speech className = {question._id} text={question.question} ></Speech>\n                    </div>\n                        )\n                    )\n                }\n                    </div>\n\n                ))}\n       \n            </div>\n    )\n\n}\n\nexport default JeopardyBoard;","import React, { Component } from \"react\";\n\nvar Contestants = (props) => {\n    return (\n        <div className = \"contestants-table\">\n            {props.contestants.map((player, index) => (\n    \n            \n            <div className = {props.turn == (index+1) ? \"contestant-item contestant-active\" : \"contestant\"} key = {index}>\n            \n                   <div className = \"player-name\">\n                      {player.name}\n                   </div>\n                   <div className = \"player-score\">\n                      {props.scores[player._id]}\n                   </div>\n            </div>\n            ))}\n            <a onClick = {(e) =>{props.backToMenu(e)}} className = \"backToMenu\">Back to Menu</a>\n        </div>\n    )\n\n}\n\nexport default Contestants;","import React, { Component } from \"react\";\n\nvar Question = React.forwardRef((props, ref) => {\n    return (\n        <div className = \"active-question\">\n           \t<div className = \"question-text\">\n           \t\t{props.question.question}\n           \t</div>\n            {props.canbuzz ?\n            <button ref={ref} onFocus={() => console.log('focus')} onClick = {() => props.buzz()} id = \"buzzer\">BUZZ IN!</button>\n            :\"\"}\n        </div>\n    )\n\n})\n\nexport default Question;","import React, { Component } from \"react\";\n\nvar Answer = React.forwardRef((props, ref) => {\n    return (\n        <div className = \"active-answer-panel\">\n            {props.buzzedIn == props.me ?\n\n            <form id = \"answer-field\" onSubmit = {(e) => {props.answerQuestion(e)}} >\n                <input ref={ref} onFocus={() => console.log('focus')} onChange = {(e) => props.handleAnswer(e)} className = \"answer\" type = \"text\" name = \"answer\"></input>\n                <input type = \"submit\"></input>\n                \n            </form>\n            :\n            <div className = \"waiting\">\n            {props.buzzedIn} is currently answering\n            </div>\n          }\n          <div style ={{width:(80 - 80/6* (6-props.seconds) ) + \"%\"}} className = \"answerTimer\">\n\n          </div>\n        </div>\n    )\n\n})\n\nexport default Answer;","import React, { Component } from \"react\";\n\nvar Result = (props) => {\n    return (\n        <div className = \"answer-result-panel\">\n           <div className = \"result-panel-inner\">\n                {\n                    props.questionOver ?\n                    <div className =\"question-over\">\n                    The answer was {props.question.answer}. \n                    </div>\n                    : \n                    props.correct ?\n                    <div className =\"correct-answer\">\n                    The answer was {props.question.answer}.\n                     {props.buzz} gains {props.question.value}.\n                    The board is {props.buzz}'s\n                    </div>\n                :\n                props.guess == \"\" ?\n                <div className =\"times-up\">\n                Times Up! Board is still open.\n\n                </div>\n                :\n                <div className =\"incorrect-answer\">\n                    {/*The answer was {props.question.answer}.*/}\n                    {props.buzz} guessed {props.guess} and loses {props.question.value}.\n                {/*    {props.me == props.buzz ? \n                    <button id = \"challenge\"> Challenge</button>\n                    :\"\"}*/}\n\n                </div>\n                }\n           </div>\n        </div>\n    )\n\n}\n\nexport default Result;","import React, { Component } from \"react\";\nimport Speech from 'react-speech';\n\nvar FinalJeopardy = (props) => {\n    // console.log(props.activeCategor\n    // let categories =props.categories \n    return (\n        <div className = \"final-jeopardy\">\n            {props.myscore > 0 ?\n            <div className = \"made-it\">\n            <h2>Welcome to Final Jeopardy</h2>\n            {props.ready ? \n            <div className = \"question-stage\">\n            <h4>Wager: ${props.wager}</h4>\n            <h3>{props.question.questions[0].question}</h3>\n            {props.answered ?\n                <div className = \"final-guess\">\n                {props.guess}\n                </div>:\n            <form id = \"final-answer\" onSubmit = {(e) => {props.finalAnswer(e)}} >\n                <input  onChange = {(e) => props.handleAnswer(e)} className = \"final-answer\" type = \"text\" name = \"final-answer\"></input>\n                <input type = \"submit\"></input>\n                \n            </form>\n        }\n            </div>\n            :\n            <div className = \"wager-stage\">\n            <h2>Welcome to Final Jeopardy</h2>\n\n            <h3>The category is <span className =\"final-cat\">{props.question.name}</span></h3>\n            <h3>Place your wager</h3>\n            {!props.wagerSubmitted ?\n            <form id = \"wager\" onSubmit = {(e) => {props.placeWager(e)}} >\n                <input min = \"0\" max = {props.myscore} onChange = {(e) => props.handleWager(e)} className = \"wager\" type = \"number\" name = \"wager\"></input>\n                <input type = \"submit\"></input>\n            </form>\n            :\"\"}\n            </div>\n        }\n\n\n            </div>\n            :\n            <div className =\"didnt-make-it\">\n            <h2>Sorry, you need money to participate in Final Jeopardy</h2>\n            </div>\n            }\n       \n        </div>\n    )\n\n}\n\nexport default FinalJeopardy;","import React, { Component } from \"react\";\nimport Speech from 'react-speech';\n\nvar GameOver = (props) => {\n    // let categories =props.categories \n    return (\n        <div className = \"game-over\">\n           \n            {props.contestants.map((player, index) => (\n    \n            \n            <div className = \"final-results\" key = {index}>\n                <div className = \"final-answer\">Final Answer: {props.finalAnswer}</div>\n                {Object.keys(props.finalGuesses).length === 0 ? \n                <div className = \"past-game-readout\">\n                <span className = \"player-name\"> {player.name}</span> finished with {props.finalScores[player._id]}\n              \n                </div> \n                : \n                \n                <div className = \"readout\">\n                   <span className = \"player-name\"> {player.name}</span> guessed {props.finalGuesses[player.name]} and wagered $ \n                    {Math.abs(props.scores[player._id] - props.finalScores[player._id])}. For a final score of ${props.finalScores[player._id]}\n                   </div>\n                }\n            </div>\n            ))}\n        </div>\n        \n    )\n}\n\nexport default GameOver;","import React, { Component } from \"react\";\n\nvar TurnWarn = React.forwardRef((props, ref) => {\n    return (\n        <div className = \"turn-warning\">\n           {props.turn} has control of the board.\n           <div className = \"close-warning\" onClick = {()=>props.close()}></div>\n        </div>\n    )\n\n})\n\nexport default TurnWarn;","import React, { Component } from \"react\";\n\nvar JeopardyBoard = (props) => {\n\t// console.log(props.activeCategory)\n    return (\n                <div className = \"menu-frame\">\n                <h3>Start a New Game</h3>\n                <form onSubmit = {(e) => {props.createNewGame(e)}} >\n                    <input onChange = {(e) => props.handleGameTitle(e)} className = \"gameTitle\" type = \"text\" name = \"gameTitle\"></input>\n                    <input type = \"submit\"></input>\n                </form>\n                <h3>Active Games</h3>\n                <ul>\n                    {props.games.map((game, index) => (\n                        <li className = \"active-game\" key = {index}>\n                        <a onClick = {(e) =>{props.startGame(game._id, game.title)}}>\n                        {game.title}\n                        </a>\n                        </li>\n                ))}\n                \n                </ul>\n               </div>\n                \n    )\n\n}\n\nexport default JeopardyBoard;","import React, { Component } from \"react\";\n\nvar WelcomeScreen = (props) => {\n    return (\n            <div className = \"welcome-frame\">\n                <h1>Welcome to Jeopardy!</h1>\n                <h2>Enter your player name</h2>\n                <form onSubmit = {(e) => {props.createNewPlayer(e)}} >\n                    <input onChange = {(e) => props.handlePlayerName(e)} className = \"playernName\" type = \"text\" name = \"playernName\"></input>\n                    <input type = \"submit\"></input>\n                </form>\n            </div>\n                \n    )\n\n}\n\nexport default WelcomeScreen;","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\n\nconst propTypes = {\n    // Props injected by SpeechRecognition\n    transcript: PropTypes.string,\n    resetTranscript: PropTypes.func,\n    browserSupportsSpeechRecognition: PropTypes.bool\n};\n\nconst Dictaphone = ({\n    transcript,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n    categories,\n    pickCategory,\n    activeCategory,\n    displayQuestion\n}) => {\n    if (!browserSupportsSpeechRecognition) {\n        return null;\n    }\n    if (transcript != \"\") {\n\n        var matcher = /[a-z]+/gi;\n        console.log(transcript);\n        let guess = transcript.toLowerCase().match(matcher)\n        if (guess != null) {\n            guess = guess.join('')\n        }\n        console.log(guess)\n        console.log(activeCategory)\n        for (var i = 0; i < categories.length; i++) {\n            // var matcher = /[a-z]+/gi;\n            let category = categories[i].name.toLowerCase().match(matcher);\n            category = category.join('');\n\n\n            // console.log(category)\n            // console.log(guess)\n            if (guess == category) {\n                // console.log(\"categoryMatch\")\n                pickCategory(i);\n                resetTranscript();\n\n            }\n        }\n        if (activeCategory >-1 ) {\n            for (var i = 0; i < categories[activeCategory].questions.length; i++) {\n                // console.log(categories[activeCategory].questions[i].value.replace(\"$\", \"\"))\n                if (transcript == categories[activeCategory].questions[i].value.replace(\"$\", \"\")) {\n                    // console.log(\"valueMatch\")\n                    // pic/kCategory(i);\n                    // resetTranscript();\n                    resetTranscript();\n\n                    displayQuestion(categories[activeCategory].questions[i]._id)\n                }\n            }\n        }\n    }\n    return (\n        <div>\n      <button id =\"resetSpeech\" onClick={resetTranscript}>Reset</button>\n      <span>{transcript}</span>\n    </div>\n    );\n};\n\nDictaphone.propTypes = propTypes;\n\nexport default SpeechRecognition(Dictaphone);","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport API from \"./Utils/API\";\nimport GAME from \"./Utils/game\";\n\nimport Speech from 'react-speech';\nimport JeopardyBoard from './Components/JeopardyBoard/JeopardyBoard'\nimport Contestants from './Components/JeopardyBoard/Contestants'\nimport Question from './Components/JeopardyBoard/Question'\nimport Answer from './Components/JeopardyBoard/Answer'\nimport Result from './Components/JeopardyBoard/Result'\nimport FinalJeopardy from './Components/JeopardyBoard/FinalJeopardy'\nimport GameOver from './Components/JeopardyBoard/GameOver'\nimport TurnWarning from './Components/JeopardyBoard/TurnWarning'\nimport MainMenu from './Components/MainMenu'\nimport Welcome from './Components/WelcomeScreen'\nimport { withCookies, Cookies } from 'react-cookie';\nimport { instanceOf } from 'prop-types';\n\nimport SpeechRecognition from './Components/SpeechRecognition/SpeechRecognition';\n\n\n\nclass App extends Component {\n\n\n    state = {\n\n        categories: [],\n        activeQuestion: \"\",\n        activeAnswer: false,\n        activeResult: false,\n        timer: \"\",\n        userScore: 0,\n        mainScreen: true,\n        activeCategory: -1,\n        newGameTitle: \"\",\n        game :\"\",\n        games: [],\n        answered: [],\n        gameID: \"\",\n        round: 0,\n        timestamp: \"No Timestamp yet\",\n        playerID: \"\",\n        playerName: '',\n        playerNum: 0,\n        contestants: [],\n        scores: [],\n        turn: 1,\n        buzzedIn: \"\",\n        canbuzz: true,\n        correct: false,\n        resultTimer: \"\",\n        questionOver: false,\n        triedToAnswer: 0,\n        totalQuestionsInRound: 0,\n        finalWager: 0,\n        finalWagerSubmitted: false,\n        finalQuestion: false,\n        finalQuestionAnswered: false,\n        finalResults: false,\n        finalGuesses: {},\n        gameOver: false,\n        activeAnswerTimer: \"\",\n        guess: \"\",\n        resetSpeechTimer: setInterval(() => { this.resetSpeechRecog() }, 5000),\n        turnWarning:false\n    }\n\n    loadCookies() {\n        const cookies = new Cookies();\n        this.setState({\n            playerName: cookies.get(\"playerName\") || \"\",\n            playerID: cookies.get(\"playerID\") || \"\",\n\n        })\n    }\n\n    componentDidMount() {\n\n        API.getSocketIP().then(\n            (res) => {\n                console.log(res);\n                API.initSocket(res.data)\n            })\n        this.loadCookies()\n        this.getGames();\n        this.buzzButton = React.createRef();\n        this.answerField = React.createRef();\n\n\n    }\n    getGames = () => {\n        API.getGames()\n            .then(res => this.setState({\n                games: res.data\n            }))\n            .catch(err => console.log(err))\n    }\n\n    getGame = (gameID) => {\n        API.getCategories(gameID)\n            .then((res) => {\n                let categories = res.data.jeopardyCategories\n                // console.log(res.data)\n                let gameOver = false\n                if (res.data.round == 2) {\n                    categories = res.data.doubleCategories\n                }\n                if (res.data.round == 4) {\n                    gameOver = true\n                }\n                // console.log(\"round \")\n                // console.log(this.state.round)\n                if (res.data.round == 3) {\n                    let preFinalScores = { ...this.state.scores }\n                    this.setState({ preFinalScores: preFinalScores })\n                }\n                this.setState({\n                    categories: categories,\n                    doubleCategories: res.data.doubleCategories,\n                    finalJeopardy: res.data.finalJeopardy,\n                    games: [],\n                    answered: res.data.answered,\n                    round: res.data.round,\n                    gameOver: gameOver\n                })\n                // console.log(res.)\n\n\n                let qsInRound = 0;\n                for (var i = 0; i < categories.length; i++) {\n                    qsInRound += categories[i].questions.length\n                }\n                this.setState({ totalQuestionsInRound: qsInRound })\n                if (res.data.answered.length == qsInRound) {\n                    this.startNextRound()\n                }\n            })\n            .catch(err => console.log(err));\n\n    }\n    handleNewContestant = (players) => {\n        this.setState({ contestants: players })\n        for (var i = 0; i < players.length; i++) {\n            if (this.state.playerID == players[i]._id) {\n                this.state.playerNum = i + 1;\n            }\n        }\n    }\n    handleScoresInit = (scores) => {\n\n        this.setState({ scores: scores, preFinalScores: scores })\n\n    }\n    handleNewScores = (scores, turn, guess, correct) => {\n        // console.log(turn)\n        if (this.state.round != 3) {\n            if (turn != 0 && turn != undefined) {\n                this.setState({ turn: turn });\n            }\n            if (correct) {\n                this.setState({\n                    scores: scores,\n                    guess: guess,\n                    correct: correct,\n                    activeResult: true,\n                    resultTimer: setTimeout(() => {\n                        this.closeQuestionFinal()\n                    }, 1500)\n                })\n            } else {\n\n                this.setState({\n                    scores: scores,\n                    guess: guess,\n                    correct: correct,\n                    activeResult: true,\n                    triedToAnswer: this.state.triedToAnswer + 1,\n                    resultTimer: setTimeout(() => {\n                        this.closeQuestion()\n                    }, 1500)\n                })\n\n            }\n        } else {\n            this.setState({\n                scores: scores\n            })\n        }\n\n    }\n    questionOver = (questionid) => {\n        if (this.state.activeQuestion._id == questionid) {\n            this.setState({\n                activeResult: true,\n                triedToAnswer: 0,\n                questionOver: true,\n                resultTimer: setTimeout(() => {\n                    this.closeQuestionFinal()\n                }, 1500)\n            })\n        }\n    }\n    closeQuestionFinal = () => {\n        this.setState({\n            timer: \"\",\n            activeQuestion: \"\",\n            guess: \"\",\n\n            activeAnswer: false,\n            activeResult: false,\n            questionOver: false\n        })\n        if (this.state.totalQuestionsInRound == this.state.answered.length) {\n            this.startNextRound()\n\n        }\n    }\n    startNextRound = () => {\n        if (this.state.round == 2) {\n            this.setState({ preFinalScores: this.state.scores, round: 3, answered: [], categories: this.state.doubleCategories })\n            API.updateRound(this.state.gameID, 3)\n\n        }\n        if (this.state.round == 1) {\n            this.setState({ round: 2, answered: [], categories: this.state.doubleCategories })\n            API.updateRound(this.state.gameID, 2)\n            let qsInRound = 0;\n            for (var i = 0; i < this.state.categories.length; i++) {\n                qsInRound += this.state.categories[i].questions.length\n            }\n            this.setState({ totalQuestionsInRound: qsInRound })\n        }\n\n    }\n    handleAnswerUpdate = (answers) => {\n        this.setState({ answered: answers })\n    }\n    closeQuestion = () => {\n        // clearTimeout(this.state.timer)\n        this.setState({\n            timer: \"\",\n            // activeQuestion: \"\",\n            guess: \"\",\n            activeAnswer: false,\n            activeResult: false\n        })\n        if (this.state.triedToAnswer == this.state.contestants.length) {\n\n            this.questionOver(this.state.activeQuestion._id)\n\n        }\n    }\n    displayQuestion = (questionid) => {\n        if (this.state.turn == this.state.playerNum) {\n            API.selectQuestion(questionid, this.state.gameID)\n        }else{\n            this.setState({turnWarning:true})\n        }\n    }\n    pickCategory = (index1) => {\n        console.log(index1)\n        this.setState({\n            activeCategory: index1\n        })\n\n    }\n    buzzIn = () => {\n        API.buzz(this.state.gameID, this.state.playerName, this.state.activeQuestion._id)\n    }\n    handleBuzzUpdate = (playerName) => {\n        this.setState({\n            activeAnswer: true,\n            buzzedIn: playerName,\n            answerSeconds: 6,\n            activeAnswerTimer: setInterval(() => {\n                this.setState({ answerSeconds: this.state.answerSeconds - 1 })\n            }, 1000)\n        })\n        this.answerField.current.focus()\n\n    }\n    answerFinalQuestion = (e) => {\n        e.preventDefault();\n\n        let correctAnswer = this.state.finalJeopardy.questions[0].answer\n        let correct = false\n        this.setState({ finalQuestionAnswered: true })\n        if (this.state.guess != \"\") {\n            if (this.state.guess.toLowerCase() == correctAnswer.toLowerCase()) {\n                console.log(\"Correct\")\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(this.state.finalWager)\n            } else {\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(this.state.finalWager)\n            }\n        }\n        API.submitFinal(this.state.gameID, this.state.playerName, this.state.guess)\n        API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct, this.state.round)\n    }\n    answerQuestion = (e) => {\n        e.preventDefault();\n        if (this.state.guess != \"\") {\n            let possibleAnswers = []\n\n            clearInterval(this.state.activeAnswerTimer)\n            let answerVal = this.state.activeQuestion.value.replace('$', '');\n            let turnChange = false;\n            let correct\n\n            let guess = this.state.guess\n            let correctAnswer = this.state.activeQuestion.answer.toLowerCase()\n\n            var matcher = /[a-z]+/gi;\n            correctAnswer = correctAnswer.match(matcher);\n            if (correctAnswer[0].toLowerCase() == \"the\" || correctAnswer[0].toLowerCase() == \"a\") {\n                possibleAnswers.push(correctAnswer.join('').toLowerCase())\n                correctAnswer.splice(0, 1)\n            }\n            correctAnswer = correctAnswer.join('').toLowerCase();\n            possibleAnswers.push(correctAnswer)\n\n\n            if (guess != \"\") {\n                guess = guess.match(matcher);\n                guess = guess.join('').toLowerCase();\n            }\n            if (possibleAnswers.includes(guess)) {\n                console.log(\"Correct\")\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(answerVal)\n                turnChange = true;\n                correct = true;\n            } else {\n                this.setState({ canbuzz: false })\n                console.log(correctAnswer)\n                correct = false;\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal)\n            }\n\n            if (turnChange) {\n                API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct, this.state.round)\n            } else {\n                API.submitScores(this.state.gameID, this.state.scores, 0, this.state.guess, correct, this.state.round)\n            }\n        }\n    }\n\n    handleAnswer = (event) => {\n        this.setState({\n            guess: event.target.value\n        })\n    }\n    handleGameTitle = (event) => {\n        this.setState({\n            newGameTitle: event.target.value\n        })\n    }\n    handlePlayerName = (event) => {\n        this.setState({\n            newPlayerName: event.target.value\n        })\n    }\n    createNewGame = (e) => {\n        e.preventDefault();\n        API.createNewGame(this.state.newGameTitle)\n            .then((data) => {\n                // console.log(data)\n                // console.log(\"getting games\")\n                // this.getGames();\n                this.startGame(data.data._id, data.data.title)\n            })\n            .catch(err => console.log(err));\n    }\n    createNewPlayer = (e) => {\n        e.preventDefault();\n        API.createNewPlayer(this.state.newPlayerName)\n            .then((player) => {\n                const cookies = new Cookies();\n                cookies.set(\"playerID\", player.data._id);\n                cookies.set(\"playerName\", player.data.name);\n                this.setState({ playerID: player.data._id })\n                this.setState({ playerName: player.data.name })\n\n            })\n            .catch(err => console.log(err));\n    }\n    timesUp = (playerName, questionId) => {\n        clearInterval(this.state.activeAnswerTimer)\n\n        if (!this.state.activeResult && playerName == this.state.playerName && this.state.playerName == this.state.buzzedIn && this.state.activeAnswer && this.state.activeQuestion._id == questionId) {\n            this.setState({ canbuzz: false })\n            let correct = false;\n            let answerVal = this.state.activeQuestion.value.replace('$', '');\n            this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal)\n            API.submitScores(this.state.gameID, this.state.scores, 0, \"\", correct, this.state.round)\n\n        }\n    }\n    finalGuess = (player, answer) => {\n        this.state.finalGuesses[player] = answer\n\n        console.log(this.state.finalGuesses)\n    }\n    gameOver = () => {\n        console.log(\"game Over\")\n        this.setState({ gameOver: true })\n    }\n    backToMain = (e) =>{\n        e.preventDefault()\n        this.setState({ mainScreen: true });\n        API.disconnectFromGame(this.state.gameID);\n        this.setState({ gameID: \"\", game:\"\", turnWarning:false });\n        this.getGames()\n \n\n\n    }\n    startGame = (gameID, gameName) => {\n\n\n        this.setState({ gameID: gameID, game:gameName });\n        this.setState({ mainScreen: false });\n        let reactFuncs = {\n            handleQuestion: this.handleQuestion,\n            handleNewContestant: this.handleNewContestant,\n            handleNewScores: this.handleNewScores,\n            handleBuzzUpdate: this.handleBuzzUpdate,\n            handleScoresInit: this.handleScoresInit,\n            handleAnswerUpdate: this.handleAnswerUpdate,\n            closeQuestion: this.closeQuestion,\n            timesUp: this.timesUp,\n            questionOver: this.questionOver,\n            initFinalQuestion: this.initFinalQuestion,\n            finalGuess: this.finalGuess,\n            gameOver: this.gameOver\n        }\n\n        API.connectToGame(gameID, this.state.playerID, reactFuncs).then(() => {\n            this.getGame(this.state.gameID);\n            console.log(this.state.contestants)\n        })\n    }\n    initFinalQuestion = () => {\n        console.log(\"final question ready\")\n        this.setState({ finalQuestion: true })\n    }\n    handleQuestion = (questionID) => {\n\n        let activeCategory = this.state.categories.filter((x, index) => {\n            return x.questions.some((element) => element._id == questionID);\n        })\n        let activeQuestion = activeCategory[0].questions.filter((x) => x._id == questionID);\n        this.setState({\n            activeQuestion: activeQuestion[0],\n            canbuzz: true\n\n        })\n        const mouseClickEvents = ['click'];\n\n        function simulateMouseClick(element) {\n            mouseClickEvents.forEach(mouseEventType =>\n                element.dispatchEvent(\n                    new MouseEvent(mouseEventType, {\n                        view: window,\n                        bubbles: true,\n                        cancelable: true,\n                        buttons: 1\n                    })\n                )\n            );\n        }\n\n        var element = document.querySelector('.question-name[id=\"' + questionID + '\"] + .rs-container button');\n        simulateMouseClick(element);\n        this.buzzButton.current.focus()\n\n\n    }\n    resetSpeechRecog = () => {\n        if (this.state.gameID != \"\" && this.state.round<3) {\n            const mouseClickEvents = ['click'];\n\n\n            function simulateMouseClick(element) {\n                mouseClickEvents.forEach(mouseEventType =>\n                    element.dispatchEvent(\n                        new MouseEvent(mouseEventType, {\n                            view: window,\n                            bubbles: true,\n                            cancelable: true,\n                            buttons: 1\n                        })\n                    )\n                );\n            }\n\n            var element = document.querySelector('#resetSpeech');\n            simulateMouseClick(element);\n        }\n    }\n    handleFinalWager = (wager) => {\n        // console.log(wager.target.value)\n        this.setState({ finalWager: wager.target.value })\n    }\n    placeFinalWager = (wager) => {\n        wager.preventDefault();\n        this.setState({ finalWagerSubmitted: true })\n        API.placeFinalWager(this.state.gameID, this.state.playerName, this.state.finalWager)\n    }\n\n    closeWarning = () =>{\n        this.setState({turnWarning:false})\n    }\n    render() {\n        return (\n            <div className = \"jeopardy-game\">\n                {this.state.turnWarning ? \n                    <TurnWarning close = {this.closeWarning} turn = {this.state.contestants[this.state.turn -1].name}></TurnWarning> :\"\"}\n                \n                <div className = \"utility-menu\">\n                {this.state.playerID != \"\" ? \n                <div className =\"game-info\">\n                <h3 className = \"my-name\">{this.state.playerName}\n                {this.state.game !=\"\" ? \"  |  \" + this.state.game : \"\"}\n                </h3> \n                </div>\n                : \"\"}\n                </div>\n\n\n                 {this.state.activeResult ? \n                <Result \n                questionOver = {this.state.questionOver}\n                    buzz = {this.state.buzzedIn}\n                    correct = {this.state.correct}\n                    question = {this.state.activeQuestion}\n                    guess = {this.state.guess}\n                    me = {this.state.playerName}\n\n                />\n                \n                : \n                this.state.activeAnswer ?\n                <Answer \n                    handleAnswer = {this.handleAnswer}\n                    answerQuestion = {this.answerQuestion}\n                    buzzedIn = {this.state.buzzedIn}\n                    me = {this.state.playerName}\n                    ref = {this.answerField}\n                    seconds = {this.state.answerSeconds}\n                />\n                : \"\"}\n\n\n            {this.state.activeQuestion ? \n                <Question \n                    question = {this.state.activeQuestion}\n                    buzz = {this.buzzIn}\n                    canbuzz = {this.state.canbuzz}\n                    ref = {this.buzzButton}\n                    // handleAnswer = {this.handleAnswer}\n                    // answerQuestion = {this.answerQuestion}\n                />\n                \n            : \"\"}\n\n\n            {this.state.mainScreen ? \n                this.state.playerID == \"\" ?\n                <div className = \"player-reg\">\n                    <Welcome handlePlayerName = {this.handlePlayerName}\n                            createNewPlayer = {this.createNewPlayer}/>\n                </div>\n                :\n                <div className = \"main-menu\">\n\n                <MainMenu   \n                    startGame ={this.startGame}\n                    createNewGame = {this.createNewGame} \n                    handleGameTitle = {this.handleGameTitle} \n                    games = {this.state.games}>\n                </MainMenu>\n                </div>\n                :\n                this.state.round >= 3 ?\n\n                this.state.gameOver ?\n                <div>\n                <GameOver\n                finalGuesses = {this.state.finalGuesses}\n                scores = {this.state.preFinalScores}\n                finalScores = {this.state.scores}\n                contestants = {this.state.contestants} \n                finalAnswer = {this.state.finalJeopardy.questions[0].answer}\n\n                />\n                <Contestants\n                scores = {this.state.scores}\n                contestants = {this.state.contestants} \n                turn = '9'\n                backToMenu = {this.backToMain}\n            />\n            </div>\n                :\n                <div className = \"jeopardy-board\">\n                <Contestants\n                scores = {this.state.scores}\n                contestants = {this.state.contestants} \n                turn = '9'\n                backToMenu = {this.backToMain}\n            />\n                <FinalJeopardy\n        \n                wagerSubmitted = {this.state.finalWagerSubmitted}\n                wager = {this.state.finalWager}\n                handleWager = {this.handleFinalWager}\n                placeWager = {this.placeFinalWager}\n                ready = {this.state.finalQuestion}\n                myscore = {this.state.preFinalScores[this.state.playerID]}\n                question = {this.state.finalJeopardy}\n                handleAnswer = {this.handleAnswer}\n                finalAnswer = {this.answerFinalQuestion}\n                scores = {this.state.preFinalScores}\n                finalScores = {this.state.scores}\n                contestants = {this.state.contestants} \n                turn = {this.state.turn}\n                answered={this.state.finalQuestionAnswered}\n                guess = {this.state.guess}\n\n                />\n                </div>\n                :\n            <div className = \"jeopardy-board\">\n            <div className = \"just-the-board\">\n\n           <JeopardyBoard  \n                    endRound= {this.state.totalQuestionsInRound}\n                    answered = {this.state.answered}\n                    activeCategory = {this.state.activeCategory} \n                    displayQuestion = {this.displayQuestion} \n                    categories = {this.state.categories}\n                    doubleCat = {this.state.doubleCategories}\n                    round = {this.state.round}/>\n            </div>\n            <Contestants\n                scores = {this.state.scores}\n                contestants = {this.state.contestants} \n                turn = {this.state.turn}\n                backToMenu = {this.backToMain}\n            />\n            <SpeechRecognition \n            displayQuestion = {this.displayQuestion} \n            activeCategory = {this.state.activeCategory} \n            categories = {this.state.categories} \n            pickCategory = {this.pickCategory}\n        ></SpeechRecognition>\n        </div>\n    }\n         \n       </div>\n\n\n        )\n\n\n    }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport { CookiesProvider } from 'react-cookie';\n\nReactDOM.render(\n\t    <CookiesProvider>\n\t\t<App />\n</CookiesProvider>\n, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}