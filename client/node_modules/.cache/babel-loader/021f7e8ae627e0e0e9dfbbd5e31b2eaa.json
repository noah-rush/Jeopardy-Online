{"ast":null,"code":"var _jsxFileName = \"/home/noah/jeopardy-app/client/src/Components/SpeechRecognition/SpeechRecognition.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\nconst propTypes = {\n  // Props injected by SpeechRecognition\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool\n};\n\nconst Dictaphone = ({\n  transcript,\n  resetTranscript,\n  browserSupportsSpeechRecognition,\n  categories,\n  pickCategory,\n  activeCategory,\n  displayQuestion,\n  reset\n}) => {\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  } // setInterval( () => {resetTranscript()}, 5000)\n  // console.log(transcript);\n\n\n  for (var i = 0; i < categories.length; i++) {\n    if (transcript != \"\") {\n      if (transcript.toLowerCase() == categories[i].name.toLowerCase()) {\n        // console.log(\"categoryMatch\")\n        pickCategory(i);\n        resetTranscript();\n      }\n    }\n  }\n\n  if (activeCategory != \"\") {\n    for (var i = 0; i < categories[activeCategory].questions.length; i++) {\n      // console.log(categories[activeCategory].questions[i].value.replace(\"$\", \"\"))\n      if (transcript == categories[activeCategory].questions[i].value.replace(\"$\", \"\")) {\n        // console.log(\"valueMatch\")\n        // pic/kCategory(i);\n        // resetTranscript();\n        resetTranscript();\n        displayQuestion(categories[activeCategory].questions[i]._id);\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: resetTranscript,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, transcript));\n};\n\n_c = Dictaphone;\nDictaphone.propTypes = propTypes;\nexport default _c2 = SpeechRecognition(Dictaphone);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Dictaphone\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/Components/SpeechRecognition/SpeechRecognition.js"],"names":["React","Component","PropTypes","SpeechRecognition","propTypes","transcript","string","resetTranscript","func","browserSupportsSpeechRecognition","bool","Dictaphone","categories","pickCategory","activeCategory","displayQuestion","reset","i","length","toLowerCase","name","questions","value","replace","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AAEA,MAAMC,SAAS,GAAG;AACd;AACAC,EAAAA,UAAU,EAAEH,SAAS,CAACI,MAFR;AAGdC,EAAAA,eAAe,EAAEL,SAAS,CAACM,IAHb;AAIdC,EAAAA,gCAAgC,EAAEP,SAAS,CAACQ;AAJ9B,CAAlB;;AAOA,MAAMC,UAAU,GAAG,CAAC;AAChBN,EAAAA,UADgB;AAEhBE,EAAAA,eAFgB;AAGhBE,EAAAA,gCAHgB;AAIhBG,EAAAA,UAJgB;AAKhBC,EAAAA,YALgB;AAMhBC,EAAAA,cANgB;AAOhBC,EAAAA,eAPgB;AAQhBC,EAAAA;AARgB,CAAD,KASb;AACF,MAAI,CAACP,gCAAL,EAAuC;AACnC,WAAO,IAAP;AACH,GAHC,CAIF;AACA;;;AACA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAAU,CAACM,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QAAIZ,UAAU,IAAI,EAAlB,EAAsB;AAClB,UAAIA,UAAU,CAACc,WAAX,MAA4BP,UAAU,CAACK,CAAD,CAAV,CAAcG,IAAd,CAAmBD,WAAnB,EAAhC,EAAkE;AAC9D;AACAN,QAAAA,YAAY,CAACI,CAAD,CAAZ;AACAV,QAAAA,eAAe;AAClB;AACJ;AACJ;;AACD,MAAIO,cAAc,IAAI,EAAtB,EAA0B;AACtB,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAAU,CAACE,cAAD,CAAV,CAA2BO,SAA3B,CAAqCH,MAAzD,EAAiED,CAAC,EAAlE,EAAsE;AAClE;AACA,UAAIZ,UAAU,IAAIO,UAAU,CAACE,cAAD,CAAV,CAA2BO,SAA3B,CAAqCJ,CAArC,EAAwCK,KAAxC,CAA8CC,OAA9C,CAAsD,GAAtD,EAA2D,EAA3D,CAAlB,EAAkF;AAC9E;AACA;AACA;AACAhB,QAAAA,eAAe;AAEfQ,QAAAA,eAAe,CAACH,UAAU,CAACE,cAAD,CAAV,CAA2BO,SAA3B,CAAqCJ,CAArC,EAAwCO,GAAzC,CAAf;AACH;AACJ;AACJ;;AACD,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACF;AAAQ,IAAA,OAAO,EAAEjB,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADE,eAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOF,UAAP,CAFE,CADJ;AAMH,CA3CD;;KAAMM,U;AA6CNA,UAAU,CAACP,SAAX,GAAuBA,SAAvB;AAEA,qBAAeD,iBAAiB,CAACQ,UAAD,CAAhC","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\n\nconst propTypes = {\n    // Props injected by SpeechRecognition\n    transcript: PropTypes.string,\n    resetTranscript: PropTypes.func,\n    browserSupportsSpeechRecognition: PropTypes.bool\n};\n\nconst Dictaphone = ({\n    transcript,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n    categories,\n    pickCategory,\n    activeCategory,\n    displayQuestion, \n    reset\n}) => {\n    if (!browserSupportsSpeechRecognition) {\n        return null;\n    }\n    // setInterval( () => {resetTranscript()}, 5000)\n    // console.log(transcript);\n    for (var i = 0; i < categories.length; i++) {\n        if (transcript != \"\") {\n            if (transcript.toLowerCase() == categories[i].name.toLowerCase()) {\n                // console.log(\"categoryMatch\")\n                pickCategory(i);\n                resetTranscript();\n            }\n        }\n    }\n    if (activeCategory != \"\") {\n        for (var i = 0; i < categories[activeCategory].questions.length; i++) {\n            // console.log(categories[activeCategory].questions[i].value.replace(\"$\", \"\"))\n            if (transcript == categories[activeCategory].questions[i].value.replace(\"$\", \"\")) {\n                // console.log(\"valueMatch\")\n                // pic/kCategory(i);\n                // resetTranscript();\n                resetTranscript();\n\n                displayQuestion(categories[activeCategory].questions[i]._id)\n            }\n        }\n    }\n    return (\n        <div>\n      <button onClick={resetTranscript}>Reset</button>\n      <span>{transcript}</span>\n    </div>\n    );\n};\n\nDictaphone.propTypes = propTypes;\n\nexport default SpeechRecognition(Dictaphone);"]},"metadata":{},"sourceType":"module"}