{"ast":null,"code":"import React,{Component}from\"react\";import Speech from'react-speech';var JeopardyBoard=function JeopardyBoard(props){// console.log(props.activeCategor\nvar categories=props.categories;return/*#__PURE__*/React.createElement(\"div\",{className:\"jeopardy-table\"},categories.map(function(cat,index){return/*#__PURE__*/React.createElement(\"div\",{className:\"category-column\",key:index},index===props.activeCategory?/*#__PURE__*/React.createElement(\"div\",{className:\"cat-name cat-name-active \"},cat.name):/*#__PURE__*/React.createElement(\"div\",{className:\"cat-name \"},cat.name),cat.questions.map(function(question,index2){return props.answered.includes(question._id)?/*#__PURE__*/React.createElement(\"div\",{id:question._id,key:index2,className:\"question-name\"}):/*#__PURE__*/React.createElement(\"div\",{key:index2},/*#__PURE__*/React.createElement(\"div\",{id:question._id,className:\"question-name\",onClick:function onClick(){props.displayQuestion(question._id);}},question.value),/*#__PURE__*/React.createElement(Speech,{className:question._id,text:question.question}));}));}));};export default JeopardyBoard;","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/Components/JeopardyBoard/JeopardyBoard.js"],"names":["React","Component","Speech","JeopardyBoard","props","categories","map","cat","index","activeCategory","name","questions","question","index2","answered","includes","_id","displayQuestion","value"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CAEA,GAAIC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAW,CAC3B;AACA,GAAIC,CAAAA,UAAU,CAAED,KAAK,CAACC,UAAtB,CACA,mBACI,2BAAK,SAAS,CAAG,gBAAjB,EAEOA,UAAU,CAACC,GAAX,CAAe,SAACC,GAAD,CAAMC,KAAN,qBACd,2BAAK,SAAS,CAAG,iBAAjB,CAAmC,GAAG,CAAIA,KAA1C,EACKA,KAAK,GAAKJ,KAAK,CAACK,cAAhB,cACD,2BAAK,SAAS,CAAE,2BAAhB,EAA6CF,GAAG,CAACG,IAAjD,CADC,cAGD,2BAAK,SAAS,CAAE,WAAhB,EAA6BH,GAAG,CAACG,IAAjC,CAJJ,CAMKH,GAAG,CAACI,SAAJ,CAAcL,GAAd,CAAkB,SAACM,QAAD,CAAWC,MAAX,QACfT,CAAAA,KAAK,CAACU,QAAN,CAAeC,QAAf,CAAwBH,QAAQ,CAACI,GAAjC,eACI,2BAAK,EAAE,CAAIJ,QAAQ,CAACI,GAApB,CAAyB,GAAG,CAAIH,MAAhC,CAAwC,SAAS,CAAE,eAAnD,EADJ,cAII,2BAAK,GAAG,CAAIA,MAAZ,eACR,2BAAK,EAAE,CAAID,QAAQ,CAACI,GAApB,CAAyB,SAAS,CAAE,eAApC,CACA,OAAO,CAAI,kBAAK,CAACZ,KAAK,CAACa,eAAN,CAAsBL,QAAQ,CAACI,GAA/B,EAAoC,CADrD,EAEEJ,QAAQ,CAACM,KAFX,CADQ,cAKR,oBAAC,MAAD,EAAQ,SAAS,CAAIN,QAAQ,CAACI,GAA9B,CAAmC,IAAI,CAAEJ,QAAQ,CAACA,QAAlD,EALQ,CALW,EAAlB,CANL,CADc,EAAf,CAFP,CADJ,CAgCH,CAnCD,CAqCA,cAAeT,CAAAA,aAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Speech from 'react-speech';\n\nvar JeopardyBoard = (props) => {\n    // console.log(props.activeCategor\n    let categories =props.categories \n    return (\n        <div className = \"jeopardy-table\">\n\n              {categories.map((cat, index) => (\n                <div className = \"category-column\" key = {index}>\n                    {index === props.activeCategory ? \n                    <div className =\"cat-name cat-name-active \">{cat.name}</div>\n                    :\n                    <div className =\"cat-name \">{cat.name}</div>\n                    }\n                    {cat.questions.map((question, index2) =>(\n                        props.answered.includes(question._id) ? \n                            <div id = {question._id} key = {index2} className =\"question-name\" >\n                            </div> \n                            :\n                            <div key = {index2}>\n                    <div id = {question._id} className =\"question-name\" \n                    onClick = {() =>{props.displayQuestion(question._id)}}>\n                     {question.value}\n                     </div>\n                    <Speech className = {question._id} text={question.question} ></Speech>\n                    </div>\n                        )\n                    )\n                }\n                    </div>\n\n                ))}\n       \n            </div>\n    )\n\n}\n\nexport default JeopardyBoard;"]},"metadata":{},"sourceType":"module"}