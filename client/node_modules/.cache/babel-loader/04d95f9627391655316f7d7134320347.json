{"ast":null,"code":"var _jsxFileName = \"/home/noah/jeopardy-app/client/src/Components/JeopardyBoard/JeopardyBoard.js\";\nimport React, { Component } from \"react\";\nimport Speech from 'react-speech';\n\nvar JeopardyBoard = props => {\n  // console.log(props.activeCategory)\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"jeopardy-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }, props.categories.map((cat, index) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"category-column\",\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 17\n    }\n  }, index === props.activeCategory ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cat-name cat-name-active \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 21\n    }\n  }, cat.name) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cat-name \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }\n  }, cat.name), cat.questions.map((question, index2) => props.answered.includes(question._id) ? /*#__PURE__*/React.createElement(\"div\", {\n    id: question._id,\n    key: index2,\n    className: \"question-name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 29\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    key: index2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: question._id,\n    className: \"question-name\",\n    onClick: () => {\n      props.displayQuestion(question._id, index, index2);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 21\n    }\n  }, question.value), /*#__PURE__*/React.createElement(Speech, {\n    className: question._id,\n    text: question.question,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 21\n    }\n  }))))));\n};\n\n_c = JeopardyBoard;\nexport default JeopardyBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"JeopardyBoard\");","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/Components/JeopardyBoard/JeopardyBoard.js"],"names":["React","Component","Speech","JeopardyBoard","props","categories","map","cat","index","activeCategory","name","questions","question","index2","answered","includes","_id","displayQuestion","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,IAAIC,aAAa,GAAIC,KAAD,IAAW;AAC3B;AACA,sBACI;AAAK,IAAA,SAAS,EAAG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEOA,KAAK,CAACC,UAAN,CAAiBC,GAAjB,CAAqB,CAACC,GAAD,EAAMC,KAAN,kBACpB;AAAK,IAAA,SAAS,EAAG,iBAAjB;AAAmC,IAAA,GAAG,EAAIA,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KAAK,KAAKJ,KAAK,CAACK,cAAhB,gBACD;AAAK,IAAA,SAAS,EAAE,2BAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6CF,GAAG,CAACG,IAAjD,CADC,gBAGD;AAAK,IAAA,SAAS,EAAE,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BH,GAAG,CAACG,IAAjC,CAJJ,EAMKH,GAAG,CAACI,SAAJ,CAAcL,GAAd,CAAkB,CAACM,QAAD,EAAWC,MAAX,KACfT,KAAK,CAACU,QAAN,CAAeC,QAAf,CAAwBH,QAAQ,CAACI,GAAjC,iBACI;AAAK,IAAA,EAAE,EAAIJ,QAAQ,CAACI,GAApB;AAAyB,IAAA,GAAG,EAAIH,MAAhC;AAAwC,IAAA,SAAS,EAAE,eAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,gBAII;AAAK,IAAA,GAAG,EAAIA,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACR;AAAK,IAAA,EAAE,EAAID,QAAQ,CAACI,GAApB;AAAyB,IAAA,SAAS,EAAE,eAApC;AACA,IAAA,OAAO,EAAI,MAAK;AAACZ,MAAAA,KAAK,CAACa,eAAN,CAAsBL,QAAQ,CAACI,GAA/B,EAAoCR,KAApC,EAA2CK,MAA3C;AAAmD,KADpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEED,QAAQ,CAACM,KAFX,CADQ,eAKR,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAIN,QAAQ,CAACI,GAA9B;AAAmC,IAAA,IAAI,EAAEJ,QAAQ,CAACA,QAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALQ,CALP,CANL,CADD,CAFP,CADJ;AAgCH,CAlCD;;KAAIT,a;AAoCJ,eAAeA,aAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Speech from 'react-speech';\n\nvar JeopardyBoard = (props) => {\n    // console.log(props.activeCategory)\n    return (\n        <div className = \"jeopardy-table\">\n        \n              {props.categories.map((cat, index) => (\n                <div className = \"category-column\" key = {index}>\n                    {index === props.activeCategory ? \n                    <div className =\"cat-name cat-name-active \">{cat.name}</div>\n                    :\n                    <div className =\"cat-name \">{cat.name}</div>\n                    }\n                    {cat.questions.map((question, index2) =>(\n                        props.answered.includes(question._id) ? \n                            <div id = {question._id} key = {index2} className =\"question-name\" >\n                            </div> \n                            :\n                            <div key = {index2}>\n                    <div id = {question._id} className =\"question-name\" \n                    onClick = {() =>{props.displayQuestion(question._id, index, index2)}}>\n                     {question.value}\n                     </div>\n                    <Speech className = {question._id} text={question.question} ></Speech>\n                    </div>\n                        )\n                    )\n                }\n                    </div>\n\n                ))}\n       \n            </div>\n    )\n\n}\n\nexport default JeopardyBoard;"]},"metadata":{},"sourceType":"module"}