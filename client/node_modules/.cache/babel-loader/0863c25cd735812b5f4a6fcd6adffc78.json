{"ast":null,"code":"import React,{Component}from\"react\";import SpeechRecognition from\"react-speech-recognition\";var Dictaphone=function Dictaphone(_ref){var transcript=_ref.transcript,resetTranscript=_ref.resetTranscript,browserSupportsSpeechRecognition=_ref.browserSupportsSpeechRecognition,categories=_ref.categories,pickCategory=_ref.pickCategory,activeCategory=_ref.activeCategory,displayQuestion=_ref.displayQuestion;if(!browserSupportsSpeechRecognition){return null;}if(transcript!=\"\"){var matcher=/[a-z]+/gi;console.log(transcript);var guess=transcript.toLowerCase().match(matcher);if(guess!=null){guess=guess.join('');}console.log(guess);console.log(activeCategory);for(var i=0;i<categories.length;i++){// var matcher = /[a-z]+/gi;\nvar category=categories[i].name.toLowerCase().match(matcher);category=category.join('');// console.log(category)\n// console.log(guess)\nif(guess==category){// console.log(\"categoryMatch\")\npickCategory(i);resetTranscript();}}if(activeCategory>-1){for(var i=0;i<categories[activeCategory].questions.length;i++){// console.log(categories[activeCategory].questions[i].value.replace(\"$\", \"\"))\nif(transcript==categories[activeCategory].questions[i].value.replace(\"$\",\"\")){// console.log(\"valueMatch\")\n// pic/kCategory(i);\n// resetTranscript();\nresetTranscript();displayQuestion(categories[activeCategory].questions[i]._id);}}}}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{id:\"resetSpeech\",onClick:resetTranscript},\"Reset\"),/*#__PURE__*/React.createElement(\"span\",null,transcript));};export default SpeechRecognition(Dictaphone);","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/Components/SpeechRecognition/SpeechRecognition.js"],"names":["React","Component","SpeechRecognition","Dictaphone","transcript","resetTranscript","browserSupportsSpeechRecognition","categories","pickCategory","activeCategory","displayQuestion","matcher","console","log","guess","toLowerCase","match","join","i","length","category","name","questions","value","replace","_id"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAEA,MAAOC,CAAAA,iBAAP,KAA8B,0BAA9B,CASA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,MAQb,IAPFC,CAAAA,UAOE,MAPFA,UAOE,CANFC,eAME,MANFA,eAME,CALFC,gCAKE,MALFA,gCAKE,CAJFC,UAIE,MAJFA,UAIE,CAHFC,YAGE,MAHFA,YAGE,CAFFC,cAEE,MAFFA,cAEE,CADFC,eACE,MADFA,eACE,CACF,GAAI,CAACJ,gCAAL,CAAuC,CACnC,MAAO,KAAP,CACH,CACD,GAAIF,UAAU,EAAI,EAAlB,CAAsB,CAElB,GAAIO,CAAAA,OAAO,CAAG,UAAd,CACAC,OAAO,CAACC,GAAR,CAAYT,UAAZ,EACA,GAAIU,CAAAA,KAAK,CAAGV,UAAU,CAACW,WAAX,GAAyBC,KAAzB,CAA+BL,OAA/B,CAAZ,CACA,GAAIG,KAAK,EAAI,IAAb,CAAmB,CACfA,KAAK,CAAGA,KAAK,CAACG,IAAN,CAAW,EAAX,CAAR,CACH,CACDL,OAAO,CAACC,GAAR,CAAYC,KAAZ,EACAF,OAAO,CAACC,GAAR,CAAYJ,cAAZ,EACA,IAAK,GAAIS,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGX,UAAU,CAACY,MAA/B,CAAuCD,CAAC,EAAxC,CAA4C,CACxC;AACA,GAAIE,CAAAA,QAAQ,CAAGb,UAAU,CAACW,CAAD,CAAV,CAAcG,IAAd,CAAmBN,WAAnB,GAAiCC,KAAjC,CAAuCL,OAAvC,CAAf,CACAS,QAAQ,CAAGA,QAAQ,CAACH,IAAT,CAAc,EAAd,CAAX,CAGA;AACA;AACA,GAAIH,KAAK,EAAIM,QAAb,CAAuB,CACnB;AACAZ,YAAY,CAACU,CAAD,CAAZ,CACAb,eAAe,GAElB,CACJ,CACD,GAAII,cAAc,CAAE,CAAC,CAArB,CAAyB,CACrB,IAAK,GAAIS,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGX,UAAU,CAACE,cAAD,CAAV,CAA2Ba,SAA3B,CAAqCH,MAAzD,CAAiED,CAAC,EAAlE,CAAsE,CAClE;AACA,GAAId,UAAU,EAAIG,UAAU,CAACE,cAAD,CAAV,CAA2Ba,SAA3B,CAAqCJ,CAArC,EAAwCK,KAAxC,CAA8CC,OAA9C,CAAsD,GAAtD,CAA2D,EAA3D,CAAlB,CAAkF,CAC9E;AACA;AACA;AACAnB,eAAe,GAEfK,eAAe,CAACH,UAAU,CAACE,cAAD,CAAV,CAA2Ba,SAA3B,CAAqCJ,CAArC,EAAwCO,GAAzC,CAAf,CACH,CACJ,CACJ,CACJ,CACD,mBACI,4CACF,8BAAQ,EAAE,CAAE,aAAZ,CAA0B,OAAO,CAAEpB,eAAnC,UADE,cAEF,gCAAOD,UAAP,CAFE,CADJ,CAMH,CAzDD,CA6DA,cAAeF,CAAAA,iBAAiB,CAACC,UAAD,CAAhC","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\n\nconst propTypes = {\n    // Props injected by SpeechRecognition\n    transcript: PropTypes.string,\n    resetTranscript: PropTypes.func,\n    browserSupportsSpeechRecognition: PropTypes.bool\n};\n\nconst Dictaphone = ({\n    transcript,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n    categories,\n    pickCategory,\n    activeCategory,\n    displayQuestion\n}) => {\n    if (!browserSupportsSpeechRecognition) {\n        return null;\n    }\n    if (transcript != \"\") {\n\n        var matcher = /[a-z]+/gi;\n        console.log(transcript);\n        let guess = transcript.toLowerCase().match(matcher)\n        if (guess != null) {\n            guess = guess.join('')\n        }\n        console.log(guess)\n        console.log(activeCategory)\n        for (var i = 0; i < categories.length; i++) {\n            // var matcher = /[a-z]+/gi;\n            let category = categories[i].name.toLowerCase().match(matcher);\n            category = category.join('');\n\n\n            // console.log(category)\n            // console.log(guess)\n            if (guess == category) {\n                // console.log(\"categoryMatch\")\n                pickCategory(i);\n                resetTranscript();\n\n            }\n        }\n        if (activeCategory >-1 ) {\n            for (var i = 0; i < categories[activeCategory].questions.length; i++) {\n                // console.log(categories[activeCategory].questions[i].value.replace(\"$\", \"\"))\n                if (transcript == categories[activeCategory].questions[i].value.replace(\"$\", \"\")) {\n                    // console.log(\"valueMatch\")\n                    // pic/kCategory(i);\n                    // resetTranscript();\n                    resetTranscript();\n\n                    displayQuestion(categories[activeCategory].questions[i]._id)\n                }\n            }\n        }\n    }\n    return (\n        <div>\n      <button id =\"resetSpeech\" onClick={resetTranscript}>Reset</button>\n      <span>{transcript}</span>\n    </div>\n    );\n};\n\nDictaphone.propTypes = propTypes;\n\nexport default SpeechRecognition(Dictaphone);"]},"metadata":{},"sourceType":"module"}