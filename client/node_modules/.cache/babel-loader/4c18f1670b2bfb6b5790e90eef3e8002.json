{"ast":null,"code":"var _jsxFileName = \"/home/noah/jeopardy-app/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport API from \"./Utils/API\";\nimport Speech from 'react-speech';\nimport JeopardyBoard from './Components/JeopardyBoard/JeopardyBoard';\nimport Contestants from './Components/JeopardyBoard/Contestants';\nimport Question from './Components/JeopardyBoard/Question';\nimport Answer from './Components/JeopardyBoard/Answer';\nimport Result from './Components/JeopardyBoard/Result';\nimport MainMenu from './Components/MainMenu';\nimport Welcome from './Components/WelcomeScreen';\nimport { withCookies, Cookies } from 'react-cookie';\nimport { instanceOf } from 'prop-types';\nimport SpeechRecognition from './Components/SpeechRecognition/SpeechRecognition';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      activeQuestion: \"\",\n      activeAnswer: false,\n      activeResult: false,\n      timer: \"\",\n      userScore: 0,\n      mainScreen: true,\n      activeCategory: \"\",\n      newGameTitle: \"\",\n      games: [],\n      answered: [],\n      gameID: \"\",\n      round: 0,\n      timestamp: \"No Timestamp yet\",\n      playerID: \"\",\n      playerName: '',\n      playerNum: 0,\n      contestants: [],\n      scores: [],\n      turn: 1,\n      buzzedIn: \"\",\n      canbuzz: true,\n      correct: false,\n      resultTimer: \"\"\n    };\n\n    this.getGames = () => {\n      API.getGames().then(res => this.setState({\n        games: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.getGame = gameID => {\n      API.getCategories(gameID).then(res => this.setState({\n        categories: res.data.jeopardyCategories,\n        doubleCategories: res.data.doubleCategories,\n        games: [],\n        answered: res.data.answered,\n        round: res.data.round\n      })).catch(err => console.log(err));\n    };\n\n    this.handleNewContestant = players => {\n      this.setState({\n        contestants: players\n      });\n\n      for (var i = 0; i < players.length; i++) {\n        if (this.state.playerID == players[i]._id) {\n          this.state.playerNum = i + 1;\n        }\n      }\n    };\n\n    this.handleScoresInit = scores => {\n      this.setState({\n        scores: scores\n      });\n    };\n\n    this.handleNewScores = (scores, turn, guess, correct) => {\n      // console.log(turn)\n      if (turn != 0 && turn != undefined) {\n        this.setState({\n          turn: turn\n        });\n      }\n\n      this.setState({\n        scores: scores,\n        guess: guess,\n        correct: correct,\n        activeResult: true,\n        resultTimer: setTimeout(() => {\n          API.closeQuestion(this.state.gameID);\n        }, 3000)\n      });\n    };\n\n    this.handleAnswerUpdate = answers => {\n      this.setState({\n        answered: answers\n      });\n    };\n\n    this.closeQuestion = () => {\n      clearTimeout(this.state.timer);\n      this.setState({\n        timer: \"\",\n        activeQuestion: \"\",\n        activeAnswer: false,\n        activeResult: false\n      });\n    };\n\n    this.displayQuestion = (questionid, index1, index2) => {\n      if (this.state.turn == this.state.playerNum) {\n        API.selectQuestion(questionid, this.state.gameID);\n      }\n    };\n\n    this.pickCategory = index1 => {\n      console.log(index1);\n      this.setState({\n        activeCategory: index1\n      });\n    };\n\n    this.buzzIn = () => {\n      API.buzz(this.state.gameID, this.state.playerName);\n    };\n\n    this.handleBuzzUpdate = playerName => {\n      this.setState({\n        activeAnswer: true,\n        buzzedIn: playerName\n      });\n    };\n\n    this.answerQuestion = e => {\n      e.preventDefault();\n      let correctAnswer = this.state.activeQuestion.answer;\n      let answerVal = this.state.activeQuestion.value.replace('$', '');\n      let turnChange = false;\n      let correct; // let userScore = this.state.scores[this.state.playerID];\n\n      if (this.state.guess != \"\") {\n        if (this.state.guess.toLowerCase() == correctAnswer.toLowerCase()) {\n          console.log(\"Correct\");\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(answerVal);\n          turnChange = true;\n          correct = true;\n        } else {\n          console.log(correctAnswer);\n          correct = false;\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal);\n        }\n      } // API.closeQuestion(this.state.gameID);\n\n\n      if (turnChange) {\n        API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct);\n      } else {\n        API.submitScores(this.state.gameID, this.state.scores, 0, this.state.guess, correct);\n      }\n    };\n\n    this.handleAnswer = event => {\n      this.setState({\n        guess: event.target.value\n      });\n    };\n\n    this.handleGameTitle = event => {\n      this.setState({\n        newGameTitle: event.target.value\n      });\n    };\n\n    this.handlePlayerName = event => {\n      this.setState({\n        newPlayerName: event.target.value\n      });\n    };\n\n    this.createNewGame = e => {\n      e.preventDefault();\n      API.createNewGame(this.state.newGameTitle).then(() => {\n        console.log(\"getting games\");\n        this.getGames();\n      }).catch(err => console.log(err));\n    };\n\n    this.createNewPlayer = e => {\n      e.preventDefault();\n      API.createNewPlayer(this.state.newPlayerName).then(player => {\n        const cookies = new Cookies();\n        cookies.set(\"playerID\", player.data._id);\n        cookies.set(\"playerName\", player.data.name);\n        this.setState({\n          playerID: player.data._id\n        });\n        this.setState({\n          playerName: player.data.name\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.timesUp = () => {\n      console.log(\"timesUp\");\n\n      if (this.state.buzzedIn == this.state.playerName) {\n        correct = false;\n        let answerVal = this.state.activeQuestion.value.replace('$', '');\n        this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal);\n        API.submitScores(this.state.gameID, this.state.scores, 0, this.state.guess, correct);\n      }\n    };\n\n    this.startGame = gameID => {\n      this.setState({\n        gameID: gameID\n      });\n      this.setState({\n        mainScreen: false\n      });\n      let reactFuncs = {\n        handleQuestion: this.handleQuestion,\n        handleNewContestant: this.handleNewContestant,\n        handleNewScores: this.handleNewScores,\n        handleBuzzUpdate: this.handleBuzzUpdate,\n        handleScoresInit: this.handleScoresInit,\n        handleAnswerUpdate: this.handleAnswerUpdate,\n        closeQuestion: this.closeQuestion,\n        timesUp: this.timesUp\n      };\n      API.connectToGame(gameID, this.state.playerID, reactFuncs).then(() => {\n        this.getGame(this.state.gameID);\n      });\n    };\n\n    this.handleQuestion = questionID => {\n      let activeCategory = this.state.categories.filter((x, index) => {\n        return x.questions.some(element => element._id == questionID);\n      });\n      let activeQuestion = activeCategory[0].questions.filter(x => x._id == questionID);\n      this.setState({\n        activeQuestion: activeQuestion[0] // timer: setTimeout(() => {\n        //     API.closeQuestion(this.state.gameID);   \n        // }, 10000)\n\n      });\n      const mouseClickEvents = ['click'];\n\n      function simulateMouseClick(element) {\n        mouseClickEvents.forEach(mouseEventType => element.dispatchEvent(new MouseEvent(mouseEventType, {\n          view: window,\n          bubbles: true,\n          cancelable: true,\n          buttons: 1\n        })));\n      }\n\n      var element = document.querySelector('.question-name[id=\"' + questionID + '\"] + .rs-container button');\n      simulateMouseClick(element);\n    };\n  }\n\n  loadCookies() {\n    // cookies = instanceOf(Cookies).isRequired;\n    const cookies = new Cookies(); // console.log(Cookies)\n    // console.log(cookies.get(\"playerName\"));\n    // cookies.set(\"playerName\", \"juancho\")\n\n    this.setState({\n      playerName: cookies.get(\"playerName\") || \"\",\n      playerID: cookies.get(\"playerID\") || \"\"\n    });\n  }\n\n  componentDidMount() {\n    API.getSocketIP().then(res => {\n      console.log(res);\n      API.initSocket(res.data);\n    });\n    this.loadCookies();\n    this.getGames();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jeopardy-game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"utility-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }\n    }, this.state.mainScreen ? /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"my-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 42\n      }\n    }, this.state.playerName) : \"\"), this.state.activeResult ? /*#__PURE__*/React.createElement(Result, {\n      buzz: this.state.buzzedIn,\n      correct: this.state.correct,\n      question: this.state.activeQuestion,\n      guess: this.state.guess,\n      me: this.state.playerName // handleAnswer = {this.handleAnswer}\n      // answerQuestion = {this.answerQuestion}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 17\n      }\n    }) : \"\", this.state.activeAnswer ? /*#__PURE__*/React.createElement(Answer, {\n      handleAnswer: this.handleAnswer,\n      answerQuestion: this.answerQuestion,\n      buzzedIn: this.state.buzzedIn,\n      me: this.state.playerName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 17\n      }\n    }) : \"\", this.state.activeQuestion ? /*#__PURE__*/React.createElement(Question, {\n      question: this.state.activeQuestion,\n      buzz: this.buzzIn,\n      canbuzz: this.state.canbuzz // handleAnswer = {this.handleAnswer}\n      // answerQuestion = {this.answerQuestion}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }\n    }) : \"\", this.state.mainScreen ? this.state.playerID == \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-reg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Welcome, {\n      handlePlayerName: this.handlePlayerName,\n      createNewPlayer: this.createNewPlayer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MainMenu, {\n      startGame: this.startGame,\n      createNewGame: this.createNewGame,\n      handleGameTitle: this.handleGameTitle,\n      games: this.state.games,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 17\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jeopardy-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(JeopardyBoard, {\n      answered: this.state.answered,\n      activeCategory: this.state.activeCategory,\n      displayQuestion: this.displayQuestion,\n      categories: this.state.categories,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 12\n      }\n    }), /*#__PURE__*/React.createElement(Contestants, {\n      scores: this.state.scores,\n      contestants: this.state.contestants,\n      turn: this.state.turn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SpeechRecognition, {\n      displayQuestion: this.displayQuestion,\n      activeCategory: this.state.activeCategory,\n      categories: this.state.categories,\n      pickCategory: this.pickCategory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/App.js"],"names":["React","Component","API","Speech","JeopardyBoard","Contestants","Question","Answer","Result","MainMenu","Welcome","withCookies","Cookies","instanceOf","SpeechRecognition","App","state","categories","activeQuestion","activeAnswer","activeResult","timer","userScore","mainScreen","activeCategory","newGameTitle","games","answered","gameID","round","timestamp","playerID","playerName","playerNum","contestants","scores","turn","buzzedIn","canbuzz","correct","resultTimer","getGames","then","res","setState","data","catch","err","console","log","getGame","getCategories","jeopardyCategories","doubleCategories","handleNewContestant","players","i","length","_id","handleScoresInit","handleNewScores","guess","undefined","setTimeout","closeQuestion","handleAnswerUpdate","answers","clearTimeout","displayQuestion","questionid","index1","index2","selectQuestion","pickCategory","buzzIn","buzz","handleBuzzUpdate","answerQuestion","e","preventDefault","correctAnswer","answer","answerVal","value","replace","turnChange","toLowerCase","parseInt","submitScores","handleAnswer","event","target","handleGameTitle","handlePlayerName","newPlayerName","createNewGame","createNewPlayer","player","cookies","set","name","timesUp","startGame","reactFuncs","handleQuestion","connectToGame","questionID","filter","x","index","questions","some","element","mouseClickEvents","simulateMouseClick","forEach","mouseEventType","dispatchEvent","MouseEvent","view","window","bubbles","cancelable","buttons","document","querySelector","loadCookies","get","componentDidMount","getSocketIP","initSocket","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport API from \"./Utils/API\";\n\nimport Speech from 'react-speech';\nimport JeopardyBoard from './Components/JeopardyBoard/JeopardyBoard'\nimport Contestants from './Components/JeopardyBoard/Contestants'\nimport Question from './Components/JeopardyBoard/Question'\nimport Answer from './Components/JeopardyBoard/Answer'\nimport Result from './Components/JeopardyBoard/Result'\n\nimport MainMenu from './Components/MainMenu'\nimport Welcome from './Components/WelcomeScreen'\nimport { withCookies, Cookies } from 'react-cookie';\nimport { instanceOf } from 'prop-types';\n\nimport SpeechRecognition from './Components/SpeechRecognition/SpeechRecognition';\n\n\n\n\n\n\n\nclass App extends Component {\n    \n \n        state = {\n\n            categories: [],\n            activeQuestion: \"\",\n            activeAnswer: false,\n            activeResult: false,\n\n            timer: \"\",\n            userScore: 0,\n            mainScreen: true,\n            activeCategory: \"\",\n            newGameTitle: \"\",\n            games: [],\n            answered:[],\n            gameID:\"\",\n            round:0, \n            timestamp: \"No Timestamp yet\",\n            playerID: \"\",\n            playerName:'',\n            playerNum:0,\n            contestants: [],\n            scores:[],\n            turn:1,\n            buzzedIn:\"\",\n            canbuzz:true,\n            correct:false, \n            resultTimer:\"\"\n        }\n    \n    loadCookies(){\n        // cookies = instanceOf(Cookies).isRequired;\n        const cookies = new Cookies();\n        // console.log(Cookies)\n        // console.log(cookies.get(\"playerName\"));\n        // cookies.set(\"playerName\", \"juancho\")\n        this.setState({\n            playerName:cookies.get(\"playerName\") || \"\",\n            playerID:cookies.get(\"playerID\") || \"\",\n\n        })\n    }\n\n    componentDidMount() {\n       \n        API.getSocketIP().then(\n            (res) =>{\n                console.log(res);\n                API.initSocket(res.data)\n            })\n        this.loadCookies()\n        this.getGames();\n\n    }\n    getGames = () => {\n        API.getGames()\n            .then(res => this.setState({\n                games: res.data\n            }))\n            .catch(err => console.log(err))\n    }\n\n    getGame = (gameID) => {\n        API.getCategories(gameID)\n            .then(res => this.setState({\n                categories: res.data.jeopardyCategories,\n                doubleCategories : res.data.doubleCategories,\n                games:[],\n                answered:res.data.answered,\n                round: res.data.round\n            }))\n            .catch(err => console.log(err));\n\n    }\n    handleNewContestant = (players) => {\n        this.setState({contestants: players})\n        for(var i = 0; i< players.length; i++){\n            if(this.state.playerID == players[i]._id){\n                this.state.playerNum = i+1;\n            }\n        }\n    }\n      handleScoresInit = (scores) => {\n     \n        this.setState({scores: scores})\n    }\n    handleNewScores = (scores, turn, guess, correct) => {\n        // console.log(turn)\n        if(turn != 0 && turn != undefined){\n            this.setState({turn:turn});\n        }\n\n        this.setState({scores: scores,\n                     guess:guess, \n                     correct:correct, \n                     activeResult:true,\n                     resultTimer: setTimeout(() => {\n                        API.closeQuestion(this.state.gameID);   \n                     }, 3000)\n                 })\n    }\n    handleAnswerUpdate = (answers) => {\n        this.setState({answered : answers})\n    }\n    closeQuestion = () => {\n        clearTimeout(this.state.timer)\n         this.setState({\n            timer: \"\",\n            activeQuestion: \"\",\n            activeAnswer: false,\n            activeResult:false\n        })\n    }\n    displayQuestion = (questionid, index1, index2) => {\n        if(this.state.turn == this.state.playerNum){\n            API.selectQuestion(questionid, this.state.gameID)\n        }\n    }\n    pickCategory = (index1) => {\n        console.log(index1)\n        this.setState({\n            activeCategory: index1\n        })\n\n    }\n    buzzIn = () => {\n        API.buzz(this.state.gameID, this.state.playerName)\n    }\n    handleBuzzUpdate = (playerName) => {\n        this.setState({\n            activeAnswer:true,\n            buzzedIn: playerName\n        })\n    }\n    answerQuestion = (e) => {\n        e.preventDefault();\n\n\n        let correctAnswer = this.state.activeQuestion.answer\n        let answerVal = this.state.activeQuestion.value.replace('$', '');\n        let turnChange = false;\n        let correct\n        // let userScore = this.state.scores[this.state.playerID];\n        if(this.state.guess != \"\"){\n            if (this.state.guess.toLowerCase() == correctAnswer.toLowerCase()) {\n                console.log(\"Correct\")\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(answerVal)\n                turnChange = true;\n                correct = true;\n            } else {\n                console.log(correctAnswer)\n                correct = false;\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal)\n            }\n        }\n        // API.closeQuestion(this.state.gameID);\n        if(turnChange){\n            API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct)\n        }else{\n            API.submitScores(this.state.gameID, this.state.scores, 0, this.state.guess, correct)\n        }\n    }\n\n    handleAnswer = (event) => {\n        this.setState({\n            guess: event.target.value\n        })\n    }\n    handleGameTitle = (event) => {\n        this.setState({\n            newGameTitle: event.target.value\n        })\n    }\n    handlePlayerName = (event) => {\n        this.setState({\n            newPlayerName: event.target.value\n        })\n    }\n    createNewGame = (e) => {\n        e.preventDefault();\n        API.createNewGame(this.state.newGameTitle)\n            .then(() => {\n                console.log(\"getting games\")\n                this.getGames();\n            })\n            .catch(err => console.log(err));\n    }\n    createNewPlayer = (e) => {\n        e.preventDefault();\n        API.createNewPlayer(this.state.newPlayerName)\n            .then((player) => {\n                const cookies = new Cookies();\n                cookies.set(\"playerID\", player.data._id );\n                cookies.set(\"playerName\", player.data.name );\n                this.setState({playerID: player.data._id})\n                this.setState({playerName: player.data.name})\n\n            })\n            .catch(err => console.log(err));\n    }\n    timesUp = () =>{\n        console.log(\"timesUp\")\n        if(this.state.buzzedIn == this.state.playerName){\n            correct = false;\n            let answerVal = this.state.activeQuestion.value.replace('$', '');\n            this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal)\n            API.submitScores(this.state.gameID, this.state.scores, 0, this.state.guess, correct)\n        }\n    }\n    startGame = (gameID) =>{\n        this.setState({gameID: gameID});\n        this.setState({mainScreen:false});\n        let reactFuncs = {\n            handleQuestion:this.handleQuestion,\n            handleNewContestant:this.handleNewContestant,\n            handleNewScores:this.handleNewScores,\n            handleBuzzUpdate:this.handleBuzzUpdate,\n            handleScoresInit:this.handleScoresInit,\n            handleAnswerUpdate:this.handleAnswerUpdate,\n            closeQuestion:this.closeQuestion,\n            timesUp: this.timesUp\n        }\n\n        API.connectToGame(gameID, this.state.playerID,  reactFuncs).then(() =>{\n            this.getGame(this.state.gameID);\n        })\n    }\n    handleQuestion = (questionID) =>{\n\n        let activeCategory = this.state.categories.filter((x, index) => {\n            return x.questions.some((element) => element._id == questionID);\n        })\n        let activeQuestion = activeCategory[0].questions.filter((x) => x._id == questionID);\n        this.setState({\n            activeQuestion: activeQuestion[0],\n            // timer: setTimeout(() => {\n            //     API.closeQuestion(this.state.gameID);   \n            // }, 10000)\n        })\n        const mouseClickEvents = [ 'click'];\n            function simulateMouseClick(element){\n              mouseClickEvents.forEach(mouseEventType =>\n                element.dispatchEvent(\n                  new MouseEvent(mouseEventType, {\n                      view: window,\n                      bubbles: true,\n                      cancelable: true,\n                      buttons: 1\n                  })\n                )\n              );\n            }\n\n            var element = document.querySelector('.question-name[id=\"' + questionID + '\"] + .rs-container button');\n            simulateMouseClick(element);\n\n\n    }\n    render() {\n        return (\n            <div className = \"jeopardy-game\">\n                <div className = \"utility-menu\">\n                {this.state.mainScreen ? <h3 className = \"my-name\">{this.state.playerName}</h3> : \"\"}\n                </div>\n                 {this.state.activeResult ? \n                <Result \n                    buzz = {this.state.buzzedIn}\n                    correct = {this.state.correct}\n                    question = {this.state.activeQuestion}\n                    guess = {this.state.guess}\n                    me = {this.state.playerName}\n\n                    // handleAnswer = {this.handleAnswer}\n                    // answerQuestion = {this.answerQuestion}\n                />\n                \n                : \"\"}\n                {this.state.activeAnswer ?\n                <Answer \n                    handleAnswer = {this.handleAnswer}\n                    answerQuestion = {this.answerQuestion}\n                    buzzedIn = {this.state.buzzedIn}\n                    me = {this.state.playerName}\n                />\n                : \"\"}\n            {this.state.activeQuestion ? \n                <Question \n                    question = {this.state.activeQuestion}\n                    buzz = {this.buzzIn}\n                    canbuzz = {this.state.canbuzz}\n                    // handleAnswer = {this.handleAnswer}\n                    // answerQuestion = {this.answerQuestion}\n                />\n                \n            : \"\"}\n            {this.state.mainScreen ? \n                this.state.playerID == \"\" ?\n                <div className = \"player-reg\">\n                    <Welcome handlePlayerName = {this.handlePlayerName}\n                            createNewPlayer = {this.createNewPlayer}/>\n                </div>\n                :\n                <div className = \"main-menu\">\n\n                <MainMenu   \n                    startGame ={this.startGame}\n                    createNewGame = {this.createNewGame} \n                    handleGameTitle = {this.handleGameTitle} \n                    games = {this.state.games}>\n                </MainMenu>\n                </div>\n                :\n            <div className = \"jeopardy-board\">\n           <JeopardyBoard  \n                    answered = {this.state.answered}\n                    activeCategory = {this.state.activeCategory} \n                    displayQuestion = {this.displayQuestion} \n                    categories = {this.state.categories}>\n            </JeopardyBoard>\n            <Contestants\n                scores = {this.state.scores}\n                contestants = {this.state.contestants} \n                turn = {this.state.turn}\n            />\n            <SpeechRecognition displayQuestion = {this.displayQuestion} activeCategory = {this.state.activeCategory} categories = {this.state.categories} pickCategory = {this.pickCategory}></SpeechRecognition>\n        </div>\n    }\n         \n       </div>\n\n\n        )\n\n\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}