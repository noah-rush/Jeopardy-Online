{"ast":null,"code":"var _jsxFileName = \"/home/noah/jeopardy-app/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport API from \"./Utils/API\";\nimport Speech from 'react-speech';\nimport JeopardyBoard from './Components/JeopardyBoard/JeopardyBoard';\nimport Contestants from './Components/JeopardyBoard/Contestants';\nimport Question from './Components/JeopardyBoard/Question';\nimport Answer from './Components/JeopardyBoard/Answer';\nimport Result from './Components/JeopardyBoard/Result';\nimport FinalJeopardy from './Components/JeopardyBoard/FinalJeopardy';\nimport MainMenu from './Components/MainMenu';\nimport Welcome from './Components/WelcomeScreen';\nimport { withCookies, Cookies } from 'react-cookie';\nimport { instanceOf } from 'prop-types';\nimport SpeechRecognition from './Components/SpeechRecognition/SpeechRecognition';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      activeQuestion: \"\",\n      activeAnswer: false,\n      activeResult: false,\n      timer: \"\",\n      userScore: 0,\n      mainScreen: true,\n      activeCategory: \"\",\n      newGameTitle: \"\",\n      games: [],\n      answered: [],\n      gameID: \"\",\n      round: 0,\n      timestamp: \"No Timestamp yet\",\n      playerID: \"\",\n      playerName: '',\n      playerNum: 0,\n      contestants: [],\n      scores: [],\n      turn: 1,\n      buzzedIn: \"\",\n      canbuzz: true,\n      correct: false,\n      resultTimer: \"\",\n      questionOver: false,\n      triedToAnswer: 0,\n      totalQuestionsInRound: 0,\n      finalWager: 0,\n      finalQuestion: false\n    };\n\n    this.getGames = () => {\n      API.getGames().then(res => this.setState({\n        games: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.getGame = gameID => {\n      API.getCategories(gameID).then(res => {\n        let categories = res.data.jeopardyCategories;\n        console.log(res.data);\n\n        if (res.data.round == 2) {\n          categories = res.data.doubleCategories;\n        }\n\n        this.setState({\n          categories: categories,\n          doubleCategories: res.data.doubleCategories,\n          finalJeopardy: res.data.finalJeopardy,\n          games: [],\n          answered: res.data.answered,\n          round: res.data.round\n        }); // console.log(res.)\n\n        let qsInRound = 0;\n\n        for (var i = 0; i < categories.length; i++) {\n          qsInRound += categories[i].questions.length;\n        }\n\n        this.setState({\n          totalQuestionsInRound: qsInRound\n        });\n\n        if (res.data.answered.length == qsInRound) {\n          this.startNextRound();\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.handleNewContestant = players => {\n      this.setState({\n        contestants: players\n      });\n\n      for (var i = 0; i < players.length; i++) {\n        if (this.state.playerID == players[i]._id) {\n          this.state.playerNum = i + 1;\n        }\n      }\n    };\n\n    this.handleScoresInit = scores => {\n      this.setState({\n        scores: scores\n      });\n    };\n\n    this.handleNewScores = (scores, turn, guess, correct) => {\n      // console.log(turn)\n      if (turn != 0 && turn != undefined) {\n        this.setState({\n          turn: turn\n        });\n      }\n\n      if (correct) {\n        this.setState({\n          scores: scores,\n          guess: guess,\n          correct: correct,\n          activeResult: true,\n          resultTimer: setTimeout(() => {\n            this.closeQuestionFinal();\n          }, 1500)\n        });\n      } else {\n        this.setState({\n          scores: scores,\n          guess: guess,\n          correct: correct,\n          activeResult: true,\n          triedToAnswer: this.state.triedToAnswer + 1,\n          resultTimer: setTimeout(() => {\n            this.closeQuestion();\n          }, 1500)\n        });\n\n        if (this.state.triedToAnswer == this.state.contestants.length) {\n          this.questionOver(this.state.activeQuestion._id);\n        }\n      }\n    };\n\n    this.questionOver = questionid => {\n      if (this.state.activeQuestion._id == questionid) {\n        this.setState({\n          activeResult: true,\n          triedToAnswer: 0,\n          questionOver: true,\n          resultTimer: setTimeout(() => {\n            this.closeQuestionFinal();\n          }, 1500)\n        });\n      }\n    };\n\n    this.closeQuestionFinal = () => {\n      this.setState({\n        timer: \"\",\n        activeQuestion: \"\",\n        activeAnswer: false,\n        activeResult: false,\n        questionOver: false\n      });\n\n      if (this.state.totalQuestionsInRound == this.state.answered.length) {\n        this.startNextRound();\n      }\n    };\n\n    this.startNextRound = () => {\n      if (this.state.round == 1) {\n        this.setState({\n          round: 2,\n          answered: [],\n          categories: this.state.doubleCategories\n        });\n        API.updateRound(this.state.gameID, 2);\n      }\n\n      if (this.state.round == 2) {\n        this.setState({\n          round: 3,\n          answered: [],\n          categories: this.state.doubleCategories\n        });\n        API.updateRound(this.state.gameID, 3);\n      }\n    };\n\n    this.handleAnswerUpdate = answers => {\n      this.setState({\n        answered: answers\n      });\n    };\n\n    this.closeQuestion = () => {\n      // clearTimeout(this.state.timer)\n      this.setState({\n        timer: \"\",\n        // activeQuestion: \"\",\n        activeAnswer: false,\n        activeResult: false\n      });\n    };\n\n    this.displayQuestion = (questionid, index1, index2) => {\n      if (this.state.turn == this.state.playerNum) {\n        API.selectQuestion(questionid, this.state.gameID);\n      }\n    };\n\n    this.pickCategory = index1 => {\n      console.log(index1);\n      this.setState({\n        activeCategory: index1\n      });\n    };\n\n    this.buzzIn = () => {\n      API.buzz(this.state.gameID, this.state.playerName, this.state.activeQuestion._id);\n    };\n\n    this.handleBuzzUpdate = playerName => {\n      this.setState({\n        activeAnswer: true,\n        buzzedIn: playerName\n      });\n    };\n\n    this.answerQuestion = e => {\n      e.preventDefault();\n      let correctAnswer = this.state.activeQuestion.answer;\n      let answerVal = this.state.activeQuestion.value.replace('$', '');\n      let turnChange = false;\n      let correct; // let userScore = this.state.scores[this.state.playerID];\n\n      if (this.state.guess != \"\") {\n        if (this.state.guess.toLowerCase() == correctAnswer.toLowerCase()) {\n          console.log(\"Correct\");\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(answerVal);\n          turnChange = true;\n          correct = true;\n        } else {\n          this.setState({\n            canbuzz: false\n          });\n          console.log(correctAnswer);\n          correct = false;\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal);\n        }\n      } // API.closeQuestion(this.state.gameID);\n\n\n      if (turnChange) {\n        API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct);\n      } else {\n        API.submitScores(this.state.gameID, this.state.scores, 0, this.state.guess, correct);\n      }\n    };\n\n    this.handleAnswer = event => {\n      this.setState({\n        guess: event.target.value\n      });\n    };\n\n    this.handleGameTitle = event => {\n      this.setState({\n        newGameTitle: event.target.value\n      });\n    };\n\n    this.handlePlayerName = event => {\n      this.setState({\n        newPlayerName: event.target.value\n      });\n    };\n\n    this.createNewGame = e => {\n      e.preventDefault();\n      API.createNewGame(this.state.newGameTitle).then(() => {\n        console.log(\"getting games\");\n        this.getGames();\n      }).catch(err => console.log(err));\n    };\n\n    this.createNewPlayer = e => {\n      e.preventDefault();\n      API.createNewPlayer(this.state.newPlayerName).then(player => {\n        const cookies = new Cookies();\n        cookies.set(\"playerID\", player.data._id);\n        cookies.set(\"playerName\", player.data.name);\n        this.setState({\n          playerID: player.data._id\n        });\n        this.setState({\n          playerName: player.data.name\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.timesUp = (playerName, questionId) => {\n      if (playerName == this.state.playerName && this.state.playerName == this.state.buzzedIn && this.state.activeAnswer && this.state.activeQuestion._id == questionId) {\n        this.setState({\n          canbuzz: false\n        });\n        let correct = false;\n        let answerVal = this.state.activeQuestion.value.replace('$', '');\n        this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal);\n        API.submitScores(this.state.gameID, this.state.scores, 0, \"\", correct);\n      }\n    };\n\n    this.startGame = gameID => {\n      this.setState({\n        gameID: gameID\n      });\n      this.setState({\n        mainScreen: false\n      });\n      let reactFuncs = {\n        handleQuestion: this.handleQuestion,\n        handleNewContestant: this.handleNewContestant,\n        handleNewScores: this.handleNewScores,\n        handleBuzzUpdate: this.handleBuzzUpdate,\n        handleScoresInit: this.handleScoresInit,\n        handleAnswerUpdate: this.handleAnswerUpdate,\n        closeQuestion: this.closeQuestion,\n        timesUp: this.timesUp,\n        questionOver: this.questionOver,\n        initFinalQuestion: this.initFinalQuestion\n      };\n      API.connectToGame(gameID, this.state.playerID, reactFuncs).then(() => {\n        this.getGame(this.state.gameID);\n        console.log(this.state.contestants);\n      });\n    };\n\n    this.initFinalQuestion = () => {\n      this.setState({\n        finalQuestion: true\n      });\n    };\n\n    this.handleQuestion = questionID => {\n      let activeCategory = this.state.categories.filter((x, index) => {\n        return x.questions.some(element => element._id == questionID);\n      });\n      let activeQuestion = activeCategory[0].questions.filter(x => x._id == questionID);\n      this.setState({\n        activeQuestion: activeQuestion[0],\n        canbuzz: true\n      });\n      const mouseClickEvents = ['click'];\n\n      function simulateMouseClick(element) {\n        mouseClickEvents.forEach(mouseEventType => element.dispatchEvent(new MouseEvent(mouseEventType, {\n          view: window,\n          bubbles: true,\n          cancelable: true,\n          buttons: 1\n        })));\n      }\n\n      var element = document.querySelector('.question-name[id=\"' + questionID + '\"] + .rs-container button');\n      simulateMouseClick(element);\n    };\n\n    this.handleFinalWager = wager => {\n      // console.log(wager.target.value)\n      this.setState({\n        finalWager: wager.target.value\n      });\n    };\n\n    this.placeFinalWager = wager => {\n      wager.preventDefault();\n      API.placeFinalWager(this.state.gameID, this.state.playerName, this.state.finalWager);\n    };\n  }\n\n  loadCookies() {\n    // cookies = instanceOf(Cookies).isRequired;\n    const cookies = new Cookies(); // console.log(Cookies)\n    // console.log(cookies.get(\"playerName\"));\n    // cookies.set(\"playerName\", \"juancho\")\n\n    this.setState({\n      playerName: cookies.get(\"playerName\") || \"\",\n      playerID: cookies.get(\"playerID\") || \"\"\n    });\n  }\n\n  componentDidMount() {\n    API.getSocketIP().then(res => {\n      console.log(res);\n      API.initSocket(res.data);\n    });\n    this.loadCookies();\n    this.getGames();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jeopardy-game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"utility-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 17\n      }\n    }, this.state.mainScreen ? /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"my-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 42\n      }\n    }, this.state.playerName) : \"\"), this.state.activeResult ? /*#__PURE__*/React.createElement(Result, {\n      questionOver: this.state.questionOver,\n      buzz: this.state.buzzedIn,\n      correct: this.state.correct,\n      question: this.state.activeQuestion,\n      guess: this.state.guess,\n      me: this.state.playerName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 17\n      }\n    }) : \"\", this.state.activeAnswer ? /*#__PURE__*/React.createElement(Answer, {\n      handleAnswer: this.handleAnswer,\n      answerQuestion: this.answerQuestion,\n      buzzedIn: this.state.buzzedIn,\n      me: this.state.playerName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 17\n      }\n    }) : \"\", this.state.activeQuestion ? /*#__PURE__*/React.createElement(Question, {\n      question: this.state.activeQuestion,\n      buzz: this.buzzIn,\n      canbuzz: this.state.canbuzz // handleAnswer = {this.handleAnswer}\n      // answerQuestion = {this.answerQuestion}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }\n    }) : \"\", this.state.mainScreen ? this.state.playerID == \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-reg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Welcome, {\n      handlePlayerName: this.handlePlayerName,\n      createNewPlayer: this.createNewPlayer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MainMenu, {\n      startGame: this.startGame,\n      createNewGame: this.createNewGame,\n      handleGameTitle: this.handleGameTitle,\n      games: this.state.games,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 17\n      }\n    })) : this.state.round == 3 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jeopardy-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FinalJeopardy, {\n      handleWager: this.handleFinalWager,\n      placeWager: this.placeFinalWager,\n      myscore: this.state.scores[this.state.playerID],\n      question: this.state.finalJeopardy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Contestants, {\n      scores: this.state.scores,\n      contestants: this.state.contestants,\n      turn: this.state.turn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 17\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jeopardy-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"just-the-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(JeopardyBoard, {\n      endRound: this.state.totalQuestionsInRound,\n      answered: this.state.answered,\n      activeCategory: this.state.activeCategory,\n      displayQuestion: this.displayQuestion,\n      categories: this.state.categories,\n      doubleCat: this.state.doubleCategories,\n      round: this.state.round,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 12\n      }\n    })), /*#__PURE__*/React.createElement(Contestants, {\n      scores: this.state.scores,\n      contestants: this.state.contestants,\n      turn: this.state.turn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SpeechRecognition, {\n      displayQuestion: this.displayQuestion,\n      activeCategory: this.state.activeCategory,\n      categories: this.state.categories,\n      pickCategory: this.pickCategory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/App.js"],"names":["React","Component","API","Speech","JeopardyBoard","Contestants","Question","Answer","Result","FinalJeopardy","MainMenu","Welcome","withCookies","Cookies","instanceOf","SpeechRecognition","App","state","categories","activeQuestion","activeAnswer","activeResult","timer","userScore","mainScreen","activeCategory","newGameTitle","games","answered","gameID","round","timestamp","playerID","playerName","playerNum","contestants","scores","turn","buzzedIn","canbuzz","correct","resultTimer","questionOver","triedToAnswer","totalQuestionsInRound","finalWager","finalQuestion","getGames","then","res","setState","data","catch","err","console","log","getGame","getCategories","jeopardyCategories","doubleCategories","finalJeopardy","qsInRound","i","length","questions","startNextRound","handleNewContestant","players","_id","handleScoresInit","handleNewScores","guess","undefined","setTimeout","closeQuestionFinal","closeQuestion","questionid","updateRound","handleAnswerUpdate","answers","displayQuestion","index1","index2","selectQuestion","pickCategory","buzzIn","buzz","handleBuzzUpdate","answerQuestion","e","preventDefault","correctAnswer","answer","answerVal","value","replace","turnChange","toLowerCase","parseInt","submitScores","handleAnswer","event","target","handleGameTitle","handlePlayerName","newPlayerName","createNewGame","createNewPlayer","player","cookies","set","name","timesUp","questionId","startGame","reactFuncs","handleQuestion","initFinalQuestion","connectToGame","questionID","filter","x","index","some","element","mouseClickEvents","simulateMouseClick","forEach","mouseEventType","dispatchEvent","MouseEvent","view","window","bubbles","cancelable","buttons","document","querySelector","handleFinalWager","wager","placeFinalWager","loadCookies","get","componentDidMount","getSocketIP","initSocket","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AAEA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,cAArC;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,iBAAP,MAA8B,kDAA9B;;AAQA,MAAMC,GAAN,SAAkBf,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAGxBgB,KAHwB,GAGhB;AAEJC,MAAAA,UAAU,EAAE,EAFR;AAGJC,MAAAA,cAAc,EAAE,EAHZ;AAIJC,MAAAA,YAAY,EAAE,KAJV;AAKJC,MAAAA,YAAY,EAAE,KALV;AAOJC,MAAAA,KAAK,EAAE,EAPH;AAQJC,MAAAA,SAAS,EAAE,CARP;AASJC,MAAAA,UAAU,EAAE,IATR;AAUJC,MAAAA,cAAc,EAAE,EAVZ;AAWJC,MAAAA,YAAY,EAAE,EAXV;AAYJC,MAAAA,KAAK,EAAE,EAZH;AAaJC,MAAAA,QAAQ,EAAE,EAbN;AAcJC,MAAAA,MAAM,EAAE,EAdJ;AAeJC,MAAAA,KAAK,EAAE,CAfH;AAgBJC,MAAAA,SAAS,EAAE,kBAhBP;AAiBJC,MAAAA,QAAQ,EAAE,EAjBN;AAkBJC,MAAAA,UAAU,EAAE,EAlBR;AAmBJC,MAAAA,SAAS,EAAE,CAnBP;AAoBJC,MAAAA,WAAW,EAAE,EApBT;AAqBJC,MAAAA,MAAM,EAAE,EArBJ;AAsBJC,MAAAA,IAAI,EAAE,CAtBF;AAuBJC,MAAAA,QAAQ,EAAE,EAvBN;AAwBJC,MAAAA,OAAO,EAAE,IAxBL;AAyBJC,MAAAA,OAAO,EAAE,KAzBL;AA0BJC,MAAAA,WAAW,EAAE,EA1BT;AA2BJC,MAAAA,YAAY,EAAE,KA3BV;AA4BJC,MAAAA,aAAa,EAAE,CA5BX;AA6BJC,MAAAA,qBAAqB,EAAE,CA7BnB;AA8BJC,MAAAA,UAAU,EAAC,CA9BP;AA+BJC,MAAAA,aAAa,EAAE;AA/BX,KAHgB;;AAAA,SA8DxBC,QA9DwB,GA8Db,MAAM;AACb7C,MAAAA,GAAG,CAAC6C,QAAJ,GACKC,IADL,CACUC,GAAG,IAAI,KAAKC,QAAL,CAAc;AACvBvB,QAAAA,KAAK,EAAEsB,GAAG,CAACE;AADY,OAAd,CADjB,EAIKC,KAJL,CAIWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAJlB;AAKH,KApEuB;;AAAA,SAsExBG,OAtEwB,GAsEb3B,MAAD,IAAY;AAClB3B,MAAAA,GAAG,CAACuD,aAAJ,CAAkB5B,MAAlB,EACKmB,IADL,CACWC,GAAD,IAAS;AACX,YAAI/B,UAAU,GAAG+B,GAAG,CAACE,IAAJ,CAASO,kBAA1B;AACAJ,QAAAA,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACE,IAAhB;;AACA,YAAGF,GAAG,CAACE,IAAJ,CAASrB,KAAT,IAAkB,CAArB,EAAuB;AACnBZ,UAAAA,UAAU,GAAG+B,GAAG,CAACE,IAAJ,CAASQ,gBAAtB;AACH;;AAED,aAAKT,QAAL,CAAc;AACVhC,UAAAA,UAAU,EAAEA,UADF;AAEVyC,UAAAA,gBAAgB,EAAEV,GAAG,CAACE,IAAJ,CAASQ,gBAFjB;AAGVC,UAAAA,aAAa,EAACX,GAAG,CAACE,IAAJ,CAASS,aAHb;AAIVjC,UAAAA,KAAK,EAAE,EAJG;AAKVC,UAAAA,QAAQ,EAAEqB,GAAG,CAACE,IAAJ,CAASvB,QALT;AAMVE,UAAAA,KAAK,EAAEmB,GAAG,CAACE,IAAJ,CAASrB;AANN,SAAd,EAPW,CAeX;;AAEA,YAAI+B,SAAS,GAAG,CAAhB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5C,UAAU,CAAC6C,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCD,UAAAA,SAAS,IAAI3C,UAAU,CAAC4C,CAAD,CAAV,CAAcE,SAAd,CAAwBD,MAArC;AACH;;AACD,aAAKb,QAAL,CAAc;AAAEN,UAAAA,qBAAqB,EAAEiB;AAAzB,SAAd;;AACA,YAAGZ,GAAG,CAACE,IAAJ,CAASvB,QAAT,CAAkBmC,MAAlB,IAA4BF,SAA/B,EAAyC;AACrC,eAAKI,cAAL;AACH;AACJ,OA1BL,EA2BKb,KA3BL,CA2BWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CA3BlB;AA6BH,KApGuB;;AAAA,SAqGxBa,mBArGwB,GAqGDC,OAAD,IAAa;AAC/B,WAAKjB,QAAL,CAAc;AAAEf,QAAAA,WAAW,EAAEgC;AAAf,OAAd;;AACA,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,OAAO,CAACJ,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAI,KAAK7C,KAAL,CAAWe,QAAX,IAAuBmC,OAAO,CAACL,CAAD,CAAP,CAAWM,GAAtC,EAA2C;AACvC,eAAKnD,KAAL,CAAWiB,SAAX,GAAuB4B,CAAC,GAAG,CAA3B;AACH;AACJ;AACJ,KA5GuB;;AAAA,SA6GxBO,gBA7GwB,GA6GJjC,MAAD,IAAY;AAE3B,WAAKc,QAAL,CAAc;AAAEd,QAAAA,MAAM,EAAEA;AAAV,OAAd;AACH,KAhHuB;;AAAA,SAiHxBkC,eAjHwB,GAiHN,CAAClC,MAAD,EAASC,IAAT,EAAekC,KAAf,EAAsB/B,OAAtB,KAAkC;AAChD;AACA,UAAIH,IAAI,IAAI,CAAR,IAAaA,IAAI,IAAImC,SAAzB,EAAoC;AAChC,aAAKtB,QAAL,CAAc;AAAEb,UAAAA,IAAI,EAAEA;AAAR,SAAd;AACH;;AACD,UAAIG,OAAJ,EAAa;AACT,aAAKU,QAAL,CAAc;AACVd,UAAAA,MAAM,EAAEA,MADE;AAEVmC,UAAAA,KAAK,EAAEA,KAFG;AAGV/B,UAAAA,OAAO,EAAEA,OAHC;AAIVnB,UAAAA,YAAY,EAAE,IAJJ;AAKVoB,UAAAA,WAAW,EAAEgC,UAAU,CAAC,MAAM;AAC1B,iBAAKC,kBAAL;AACH,WAFsB,EAEpB,IAFoB;AALb,SAAd;AASH,OAVD,MAUO;AAEH,aAAKxB,QAAL,CAAc;AACVd,UAAAA,MAAM,EAAEA,MADE;AAEVmC,UAAAA,KAAK,EAAEA,KAFG;AAGV/B,UAAAA,OAAO,EAAEA,OAHC;AAIVnB,UAAAA,YAAY,EAAE,IAJJ;AAKVsB,UAAAA,aAAa,EAAE,KAAK1B,KAAL,CAAW0B,aAAX,GAA2B,CALhC;AAMVF,UAAAA,WAAW,EAAEgC,UAAU,CAAC,MAAM;AAC1B,iBAAKE,aAAL;AACH,WAFsB,EAEpB,IAFoB;AANb,SAAd;;AAUA,YAAI,KAAK1D,KAAL,CAAW0B,aAAX,IAA4B,KAAK1B,KAAL,CAAWkB,WAAX,CAAuB4B,MAAvD,EAA+D;AAC3D,eAAKrB,YAAL,CAAkB,KAAKzB,KAAL,CAAWE,cAAX,CAA0BiD,GAA5C;AACH;AACJ;AAEJ,KAjJuB;;AAAA,SAkJxB1B,YAlJwB,GAkJRkC,UAAD,IAAgB;AAC3B,UAAI,KAAK3D,KAAL,CAAWE,cAAX,CAA0BiD,GAA1B,IAAiCQ,UAArC,EAAiD;AAC7C,aAAK1B,QAAL,CAAc;AACV7B,UAAAA,YAAY,EAAE,IADJ;AAEVsB,UAAAA,aAAa,EAAE,CAFL;AAGVD,UAAAA,YAAY,EAAE,IAHJ;AAIVD,UAAAA,WAAW,EAAEgC,UAAU,CAAC,MAAM;AAC1B,iBAAKC,kBAAL;AACH,WAFsB,EAEpB,IAFoB;AAJb,SAAd;AAQH;AACJ,KA7JuB;;AAAA,SA8JxBA,kBA9JwB,GA8JH,MAAM;AACvB,WAAKxB,QAAL,CAAc;AACV5B,QAAAA,KAAK,EAAE,EADG;AAEVH,QAAAA,cAAc,EAAE,EAFN;AAGVC,QAAAA,YAAY,EAAE,KAHJ;AAIVC,QAAAA,YAAY,EAAE,KAJJ;AAKVqB,QAAAA,YAAY,EAAE;AALJ,OAAd;;AAOA,UAAG,KAAKzB,KAAL,CAAW2B,qBAAX,IAAoC,KAAK3B,KAAL,CAAWW,QAAX,CAAoBmC,MAA3D,EAAkE;AAC9D,aAAKE,cAAL;AAEH;AACJ,KA1KuB;;AAAA,SA2KxBA,cA3KwB,GA2KP,MAAK;AAClB,UAAG,KAAKhD,KAAL,CAAWa,KAAX,IAAoB,CAAvB,EAAyB;AACrB,aAAKoB,QAAL,CAAc;AAACpB,UAAAA,KAAK,EAAC,CAAP;AAAUF,UAAAA,QAAQ,EAAC,EAAnB;AAAuBV,UAAAA,UAAU,EAAE,KAAKD,KAAL,CAAW0C;AAA9C,SAAd;AACAzD,QAAAA,GAAG,CAAC2E,WAAJ,CAAgB,KAAK5D,KAAL,CAAWY,MAA3B,EAAmC,CAAnC;AACH;;AACD,UAAG,KAAKZ,KAAL,CAAWa,KAAX,IAAoB,CAAvB,EAAyB;AACrB,aAAKoB,QAAL,CAAc;AAACpB,UAAAA,KAAK,EAAC,CAAP;AAAUF,UAAAA,QAAQ,EAAC,EAAnB;AAAuBV,UAAAA,UAAU,EAAE,KAAKD,KAAL,CAAW0C;AAA9C,SAAd;AACAzD,QAAAA,GAAG,CAAC2E,WAAJ,CAAgB,KAAK5D,KAAL,CAAWY,MAA3B,EAAmC,CAAnC;AACH;AACJ,KApLuB;;AAAA,SAqLxBiD,kBArLwB,GAqLFC,OAAD,IAAa;AAC9B,WAAK7B,QAAL,CAAc;AAAEtB,QAAAA,QAAQ,EAAEmD;AAAZ,OAAd;AACH,KAvLuB;;AAAA,SAwLxBJ,aAxLwB,GAwLR,MAAM;AAClB;AACA,WAAKzB,QAAL,CAAc;AACV5B,QAAAA,KAAK,EAAE,EADG;AAEV;AACAF,QAAAA,YAAY,EAAE,KAHJ;AAIVC,QAAAA,YAAY,EAAE;AAJJ,OAAd;AAMH,KAhMuB;;AAAA,SAiMxB2D,eAjMwB,GAiMN,CAACJ,UAAD,EAAaK,MAAb,EAAqBC,MAArB,KAAgC;AAC9C,UAAI,KAAKjE,KAAL,CAAWoB,IAAX,IAAmB,KAAKpB,KAAL,CAAWiB,SAAlC,EAA6C;AACzChC,QAAAA,GAAG,CAACiF,cAAJ,CAAmBP,UAAnB,EAA+B,KAAK3D,KAAL,CAAWY,MAA1C;AACH;AACJ,KArMuB;;AAAA,SAsMxBuD,YAtMwB,GAsMRH,MAAD,IAAY;AACvB3B,MAAAA,OAAO,CAACC,GAAR,CAAY0B,MAAZ;AACA,WAAK/B,QAAL,CAAc;AACVzB,QAAAA,cAAc,EAAEwD;AADN,OAAd;AAIH,KA5MuB;;AAAA,SA6MxBI,MA7MwB,GA6Mf,MAAM;AACXnF,MAAAA,GAAG,CAACoF,IAAJ,CAAS,KAAKrE,KAAL,CAAWY,MAApB,EAA4B,KAAKZ,KAAL,CAAWgB,UAAvC,EAAmD,KAAKhB,KAAL,CAAWE,cAAX,CAA0BiD,GAA7E;AACH,KA/MuB;;AAAA,SAgNxBmB,gBAhNwB,GAgNJtD,UAAD,IAAgB;AAC/B,WAAKiB,QAAL,CAAc;AACV9B,QAAAA,YAAY,EAAE,IADJ;AAEVkB,QAAAA,QAAQ,EAAEL;AAFA,OAAd;AAIH,KArNuB;;AAAA,SAsNxBuD,cAtNwB,GAsNNC,CAAD,IAAO;AACpBA,MAAAA,CAAC,CAACC,cAAF;AAGA,UAAIC,aAAa,GAAG,KAAK1E,KAAL,CAAWE,cAAX,CAA0ByE,MAA9C;AACA,UAAIC,SAAS,GAAG,KAAK5E,KAAL,CAAWE,cAAX,CAA0B2E,KAA1B,CAAgCC,OAAhC,CAAwC,GAAxC,EAA6C,EAA7C,CAAhB;AACA,UAAIC,UAAU,GAAG,KAAjB;AACA,UAAIxD,OAAJ,CAPoB,CAQpB;;AACA,UAAI,KAAKvB,KAAL,CAAWsD,KAAX,IAAoB,EAAxB,EAA4B;AACxB,YAAI,KAAKtD,KAAL,CAAWsD,KAAX,CAAiB0B,WAAjB,MAAkCN,aAAa,CAACM,WAAd,EAAtC,EAAmE;AAC/D3C,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,eAAKtC,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC,KAAKf,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyCkE,QAAQ,CAACL,SAAD,CAA1F;AACAG,UAAAA,UAAU,GAAG,IAAb;AACAxD,UAAAA,OAAO,GAAG,IAAV;AACH,SALD,MAKO;AACH,eAAKU,QAAL,CAAc;AAAEX,YAAAA,OAAO,EAAE;AAAX,WAAd;AACAe,UAAAA,OAAO,CAACC,GAAR,CAAYoC,aAAZ;AACAnD,UAAAA,OAAO,GAAG,KAAV;AACA,eAAKvB,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC,KAAKf,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyCkE,QAAQ,CAACL,SAAD,CAA1F;AACH;AACJ,OArBmB,CAsBpB;;;AACA,UAAIG,UAAJ,EAAgB;AACZ9F,QAAAA,GAAG,CAACiG,YAAJ,CAAiB,KAAKlF,KAAL,CAAWY,MAA5B,EAAoC,KAAKZ,KAAL,CAAWmB,MAA/C,EAAuD,KAAKnB,KAAL,CAAWiB,SAAlE,EAA6E,KAAKjB,KAAL,CAAWsD,KAAxF,EAA+F/B,OAA/F;AACH,OAFD,MAEO;AACHtC,QAAAA,GAAG,CAACiG,YAAJ,CAAiB,KAAKlF,KAAL,CAAWY,MAA5B,EAAoC,KAAKZ,KAAL,CAAWmB,MAA/C,EAAuD,CAAvD,EAA0D,KAAKnB,KAAL,CAAWsD,KAArE,EAA4E/B,OAA5E;AACH;AACJ,KAlPuB;;AAAA,SAoPxB4D,YApPwB,GAoPRC,KAAD,IAAW;AACtB,WAAKnD,QAAL,CAAc;AACVqB,QAAAA,KAAK,EAAE8B,KAAK,CAACC,MAAN,CAAaR;AADV,OAAd;AAGH,KAxPuB;;AAAA,SAyPxBS,eAzPwB,GAyPLF,KAAD,IAAW;AACzB,WAAKnD,QAAL,CAAc;AACVxB,QAAAA,YAAY,EAAE2E,KAAK,CAACC,MAAN,CAAaR;AADjB,OAAd;AAGH,KA7PuB;;AAAA,SA8PxBU,gBA9PwB,GA8PJH,KAAD,IAAW;AAC1B,WAAKnD,QAAL,CAAc;AACVuD,QAAAA,aAAa,EAAEJ,KAAK,CAACC,MAAN,CAAaR;AADlB,OAAd;AAGH,KAlQuB;;AAAA,SAmQxBY,aAnQwB,GAmQPjB,CAAD,IAAO;AACnBA,MAAAA,CAAC,CAACC,cAAF;AACAxF,MAAAA,GAAG,CAACwG,aAAJ,CAAkB,KAAKzF,KAAL,CAAWS,YAA7B,EACKsB,IADL,CACU,MAAM;AACRM,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,aAAKR,QAAL;AACH,OAJL,EAKKK,KALL,CAKWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CALlB;AAMH,KA3QuB;;AAAA,SA4QxBsD,eA5QwB,GA4QLlB,CAAD,IAAO;AACrBA,MAAAA,CAAC,CAACC,cAAF;AACAxF,MAAAA,GAAG,CAACyG,eAAJ,CAAoB,KAAK1F,KAAL,CAAWwF,aAA/B,EACKzD,IADL,CACW4D,MAAD,IAAY;AACd,cAAMC,OAAO,GAAG,IAAIhG,OAAJ,EAAhB;AACAgG,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAM,CAACzD,IAAP,CAAYiB,GAApC;AACAyC,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,MAAM,CAACzD,IAAP,CAAY4D,IAAtC;AACA,aAAK7D,QAAL,CAAc;AAAElB,UAAAA,QAAQ,EAAE4E,MAAM,CAACzD,IAAP,CAAYiB;AAAxB,SAAd;AACA,aAAKlB,QAAL,CAAc;AAAEjB,UAAAA,UAAU,EAAE2E,MAAM,CAACzD,IAAP,CAAY4D;AAA1B,SAAd;AAEH,OARL,EASK3D,KATL,CASWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CATlB;AAUH,KAxRuB;;AAAA,SAyRxB2D,OAzRwB,GAyRd,CAAC/E,UAAD,EAAagF,UAAb,KAA4B;AAElC,UAAIhF,UAAU,IAAI,KAAKhB,KAAL,CAAWgB,UAAzB,IAAuC,KAAKhB,KAAL,CAAWgB,UAAX,IAAyB,KAAKhB,KAAL,CAAWqB,QAA3E,IAAuF,KAAKrB,KAAL,CAAWG,YAAlG,IAAkH,KAAKH,KAAL,CAAWE,cAAX,CAA0BiD,GAA1B,IAAiC6C,UAAvJ,EAAmK;AAC/J,aAAK/D,QAAL,CAAc;AAAEX,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,YAAIC,OAAO,GAAG,KAAd;AACA,YAAIqD,SAAS,GAAG,KAAK5E,KAAL,CAAWE,cAAX,CAA0B2E,KAA1B,CAAgCC,OAAhC,CAAwC,GAAxC,EAA6C,EAA7C,CAAhB;AACA,aAAK9E,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC,KAAKf,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyCkE,QAAQ,CAACL,SAAD,CAA1F;AACA3F,QAAAA,GAAG,CAACiG,YAAJ,CAAiB,KAAKlF,KAAL,CAAWY,MAA5B,EAAoC,KAAKZ,KAAL,CAAWmB,MAA/C,EAAuD,CAAvD,EAA0D,EAA1D,EAA8DI,OAA9D;AACH;AACJ,KAlSuB;;AAAA,SAmSxB0E,SAnSwB,GAmSXrF,MAAD,IAAY;AAGpB,WAAKqB,QAAL,CAAc;AAAErB,QAAAA,MAAM,EAAEA;AAAV,OAAd;AACA,WAAKqB,QAAL,CAAc;AAAE1B,QAAAA,UAAU,EAAE;AAAd,OAAd;AACA,UAAI2F,UAAU,GAAG;AACbC,QAAAA,cAAc,EAAE,KAAKA,cADR;AAEblD,QAAAA,mBAAmB,EAAE,KAAKA,mBAFb;AAGbI,QAAAA,eAAe,EAAE,KAAKA,eAHT;AAIbiB,QAAAA,gBAAgB,EAAE,KAAKA,gBAJV;AAKblB,QAAAA,gBAAgB,EAAE,KAAKA,gBALV;AAMbS,QAAAA,kBAAkB,EAAE,KAAKA,kBANZ;AAObH,QAAAA,aAAa,EAAE,KAAKA,aAPP;AAQbqC,QAAAA,OAAO,EAAE,KAAKA,OARD;AASbtE,QAAAA,YAAY,EAAE,KAAKA,YATN;AAUb2E,QAAAA,iBAAiB,EAAC,KAAKA;AAVV,OAAjB;AAaAnH,MAAAA,GAAG,CAACoH,aAAJ,CAAkBzF,MAAlB,EAA0B,KAAKZ,KAAL,CAAWe,QAArC,EAA+CmF,UAA/C,EAA2DnE,IAA3D,CAAgE,MAAM;AAClE,aAAKQ,OAAL,CAAa,KAAKvC,KAAL,CAAWY,MAAxB;AACAyB,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKtC,KAAL,CAAWkB,WAAvB;AACH,OAHD;AAIH,KAzTuB;;AAAA,SA0TxBkF,iBA1TwB,GA0TJ,MAAM;AACtB,WAAKnE,QAAL,CAAc;AAACJ,QAAAA,aAAa,EAAC;AAAf,OAAd;AACH,KA5TuB;;AAAA,SA6TxBsE,cA7TwB,GA6TNG,UAAD,IAAgB;AAE7B,UAAI9F,cAAc,GAAG,KAAKR,KAAL,CAAWC,UAAX,CAAsBsG,MAAtB,CAA6B,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAC5D,eAAOD,CAAC,CAACzD,SAAF,CAAY2D,IAAZ,CAAkBC,OAAD,IAAaA,OAAO,CAACxD,GAAR,IAAemD,UAA7C,CAAP;AACH,OAFoB,CAArB;AAGA,UAAIpG,cAAc,GAAGM,cAAc,CAAC,CAAD,CAAd,CAAkBuC,SAAlB,CAA4BwD,MAA5B,CAAoCC,CAAD,IAAOA,CAAC,CAACrD,GAAF,IAASmD,UAAnD,CAArB;AACA,WAAKrE,QAAL,CAAc;AACV/B,QAAAA,cAAc,EAAEA,cAAc,CAAC,CAAD,CADpB;AAEVoB,QAAAA,OAAO,EAAE;AAFC,OAAd;AAKA,YAAMsF,gBAAgB,GAAG,CAAC,OAAD,CAAzB;;AAEA,eAASC,kBAAT,CAA4BF,OAA5B,EAAqC;AACjCC,QAAAA,gBAAgB,CAACE,OAAjB,CAAyBC,cAAc,IACnCJ,OAAO,CAACK,aAAR,CACI,IAAIC,UAAJ,CAAeF,cAAf,EAA+B;AAC3BG,UAAAA,IAAI,EAAEC,MADqB;AAE3BC,UAAAA,OAAO,EAAE,IAFkB;AAG3BC,UAAAA,UAAU,EAAE,IAHe;AAI3BC,UAAAA,OAAO,EAAE;AAJkB,SAA/B,CADJ,CADJ;AAUH;;AAED,UAAIX,OAAO,GAAGY,QAAQ,CAACC,aAAT,CAAuB,wBAAwBlB,UAAxB,GAAqC,2BAA5D,CAAd;AACAO,MAAAA,kBAAkB,CAACF,OAAD,CAAlB;AAGH,KA3VuB;;AAAA,SA4VxBc,gBA5VwB,GA4VJC,KAAD,IAAW;AAC1B;AACA,WAAKzF,QAAL,CAAc;AAACL,QAAAA,UAAU,EAAC8F,KAAK,CAACrC,MAAN,CAAaR;AAAzB,OAAd;AACH,KA/VuB;;AAAA,SAgWxB8C,eAhWwB,GAgWLD,KAAD,IAAW;AACzBA,MAAAA,KAAK,CAACjD,cAAN;AACAxF,MAAAA,GAAG,CAAC0I,eAAJ,CAAoB,KAAK3H,KAAL,CAAWY,MAA/B,EAAuC,KAAKZ,KAAL,CAAWgB,UAAlD,EAA8D,KAAKhB,KAAL,CAAW4B,UAAzE;AACH,KAnWuB;AAAA;;AAsCxBgG,EAAAA,WAAW,GAAG;AACV;AACA,UAAMhC,OAAO,GAAG,IAAIhG,OAAJ,EAAhB,CAFU,CAGV;AACA;AACA;;AACA,SAAKqC,QAAL,CAAc;AACVjB,MAAAA,UAAU,EAAE4E,OAAO,CAACiC,GAAR,CAAY,YAAZ,KAA6B,EAD/B;AAEV9G,MAAAA,QAAQ,EAAE6E,OAAO,CAACiC,GAAR,CAAY,UAAZ,KAA2B;AAF3B,KAAd;AAKH;;AAEDC,EAAAA,iBAAiB,GAAG;AAEhB7I,IAAAA,GAAG,CAAC8I,WAAJ,GAAkBhG,IAAlB,CACKC,GAAD,IAAS;AACLK,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACA/C,MAAAA,GAAG,CAAC+I,UAAJ,CAAehG,GAAG,CAACE,IAAnB;AACH,KAJL;AAKA,SAAK0F,WAAL;AACA,SAAK9F,QAAL;AAEH;;AAuSDmG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAG,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAG,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAKjI,KAAL,CAAWO,UAAX,gBAAwB;AAAI,MAAA,SAAS,EAAG,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B,KAAKP,KAAL,CAAWgB,UAAtC,CAAxB,GAAiF,EADlF,CADJ,EAIM,KAAKhB,KAAL,CAAWI,YAAX,gBACF,oBAAC,MAAD;AACA,MAAA,YAAY,EAAI,KAAKJ,KAAL,CAAWyB,YAD3B;AAEI,MAAA,IAAI,EAAI,KAAKzB,KAAL,CAAWqB,QAFvB;AAGI,MAAA,OAAO,EAAI,KAAKrB,KAAL,CAAWuB,OAH1B;AAII,MAAA,QAAQ,EAAI,KAAKvB,KAAL,CAAWE,cAJ3B;AAKI,MAAA,KAAK,EAAI,KAAKF,KAAL,CAAWsD,KALxB;AAMI,MAAA,EAAE,EAAI,KAAKtD,KAAL,CAAWgB,UANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADE,GAWA,EAfN,EAgBK,KAAKhB,KAAL,CAAWG,YAAX,gBACD,oBAAC,MAAD;AACI,MAAA,YAAY,EAAI,KAAKgF,YADzB;AAEI,MAAA,cAAc,EAAI,KAAKZ,cAF3B;AAGI,MAAA,QAAQ,EAAI,KAAKvE,KAAL,CAAWqB,QAH3B;AAII,MAAA,EAAE,EAAI,KAAKrB,KAAL,CAAWgB,UAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADC,GAOC,EAvBN,EAwBC,KAAKhB,KAAL,CAAWE,cAAX,gBACG,oBAAC,QAAD;AACI,MAAA,QAAQ,EAAI,KAAKF,KAAL,CAAWE,cAD3B;AAEI,MAAA,IAAI,EAAI,KAAKkE,MAFjB;AAGI,MAAA,OAAO,EAAI,KAAKpE,KAAL,CAAWsB,OAH1B,CAII;AACA;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GASC,EAjCF,EAkCC,KAAKtB,KAAL,CAAWO,UAAX,GACG,KAAKP,KAAL,CAAWe,QAAX,IAAuB,EAAvB,gBACA;AAAK,MAAA,SAAS,EAAG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,OAAD;AAAS,MAAA,gBAAgB,EAAI,KAAKwE,gBAAlC;AACQ,MAAA,eAAe,EAAI,KAAKG,eADhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADA,gBAMA;AAAK,MAAA,SAAS,EAAG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA,oBAAC,QAAD;AACI,MAAA,SAAS,EAAG,KAAKO,SADrB;AAEI,MAAA,aAAa,EAAI,KAAKR,aAF1B;AAGI,MAAA,eAAe,EAAI,KAAKH,eAH5B;AAII,MAAA,KAAK,EAAI,KAAKtF,KAAL,CAAWU,KAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,CAPH,GAiBG,KAAKV,KAAL,CAAWa,KAAX,IAAoB,CAApB,gBACA;AAAK,MAAA,SAAS,EAAG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,aAAD;AACA,MAAA,WAAW,EAAI,KAAK4G,gBADpB;AAEA,MAAA,UAAU,EAAI,KAAKE,eAFnB;AAIA,MAAA,OAAO,EAAI,KAAK3H,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,CAJX;AAKA,MAAA,QAAQ,EAAI,KAAKf,KAAL,CAAW2C,aALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,eASA,oBAAC,WAAD;AACA,MAAA,MAAM,EAAI,KAAK3C,KAAL,CAAWmB,MADrB;AAEA,MAAA,WAAW,EAAI,KAAKnB,KAAL,CAAWkB,WAF1B;AAGA,MAAA,IAAI,EAAI,KAAKlB,KAAL,CAAWoB,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATA,CADA,gBAiBJ;AAAK,MAAA,SAAS,EAAG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAED,oBAAC,aAAD;AACS,MAAA,QAAQ,EAAG,KAAKpB,KAAL,CAAW2B,qBAD/B;AAES,MAAA,QAAQ,EAAI,KAAK3B,KAAL,CAAWW,QAFhC;AAGS,MAAA,cAAc,EAAI,KAAKX,KAAL,CAAWQ,cAHtC;AAIS,MAAA,eAAe,EAAI,KAAKuD,eAJjC;AAKS,MAAA,UAAU,EAAI,KAAK/D,KAAL,CAAWC,UALlC;AAMS,MAAA,SAAS,EAAI,KAAKD,KAAL,CAAW0C,gBANjC;AAOS,MAAA,KAAK,EAAI,KAAK1C,KAAL,CAAWa,KAP7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFC,CADA,eAYA,oBAAC,WAAD;AACI,MAAA,MAAM,EAAI,KAAKb,KAAL,CAAWmB,MADzB;AAEI,MAAA,WAAW,EAAI,KAAKnB,KAAL,CAAWkB,WAF9B;AAGI,MAAA,IAAI,EAAI,KAAKlB,KAAL,CAAWoB,IAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,eAiBA,oBAAC,iBAAD;AAAmB,MAAA,eAAe,EAAI,KAAK2C,eAA3C;AAA4D,MAAA,cAAc,EAAI,KAAK/D,KAAL,CAAWQ,cAAzF;AAAyG,MAAA,UAAU,EAAI,KAAKR,KAAL,CAAWC,UAAlI;AAA8I,MAAA,YAAY,EAAI,KAAKkE,YAAnK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBA,CApEA,CADJ;AAgGH;;AArcuB;;AAwc5B,eAAepE,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport API from \"./Utils/API\";\n\nimport Speech from 'react-speech';\nimport JeopardyBoard from './Components/JeopardyBoard/JeopardyBoard'\nimport Contestants from './Components/JeopardyBoard/Contestants'\nimport Question from './Components/JeopardyBoard/Question'\nimport Answer from './Components/JeopardyBoard/Answer'\nimport Result from './Components/JeopardyBoard/Result'\nimport FinalJeopardy from './Components/JeopardyBoard/FinalJeopardy'\n\nimport MainMenu from './Components/MainMenu'\nimport Welcome from './Components/WelcomeScreen'\nimport { withCookies, Cookies } from 'react-cookie';\nimport { instanceOf } from 'prop-types';\n\nimport SpeechRecognition from './Components/SpeechRecognition/SpeechRecognition';\n\n\n\n\n\n\n\nclass App extends Component {\n\n\n    state = {\n\n        categories: [],\n        activeQuestion: \"\",\n        activeAnswer: false,\n        activeResult: false,\n\n        timer: \"\",\n        userScore: 0,\n        mainScreen: true,\n        activeCategory: \"\",\n        newGameTitle: \"\",\n        games: [],\n        answered: [],\n        gameID: \"\",\n        round: 0,\n        timestamp: \"No Timestamp yet\",\n        playerID: \"\",\n        playerName: '',\n        playerNum: 0,\n        contestants: [],\n        scores: [],\n        turn: 1,\n        buzzedIn: \"\",\n        canbuzz: true,\n        correct: false,\n        resultTimer: \"\",\n        questionOver: false,\n        triedToAnswer: 0,\n        totalQuestionsInRound: 0,\n        finalWager:0,\n        finalQuestion: false\n\n    }\n\n    loadCookies() {\n        // cookies = instanceOf(Cookies).isRequired;\n        const cookies = new Cookies();\n        // console.log(Cookies)\n        // console.log(cookies.get(\"playerName\"));\n        // cookies.set(\"playerName\", \"juancho\")\n        this.setState({\n            playerName: cookies.get(\"playerName\") || \"\",\n            playerID: cookies.get(\"playerID\") || \"\",\n\n        })\n    }\n\n    componentDidMount() {\n\n        API.getSocketIP().then(\n            (res) => {\n                console.log(res);\n                API.initSocket(res.data)\n            })\n        this.loadCookies()\n        this.getGames();\n\n    }\n    getGames = () => {\n        API.getGames()\n            .then(res => this.setState({\n                games: res.data\n            }))\n            .catch(err => console.log(err))\n    }\n\n    getGame = (gameID) => {\n        API.getCategories(gameID)\n            .then((res) => {\n                let categories = res.data.jeopardyCategories\n                console.log(res.data)\n                if(res.data.round == 2){\n                    categories = res.data.doubleCategories\n                }\n\n                this.setState({\n                    categories: categories,\n                    doubleCategories: res.data.doubleCategories,\n                    finalJeopardy:res.data.finalJeopardy,\n                    games: [],\n                    answered: res.data.answered,\n                    round: res.data.round\n                })\n                // console.log(res.)\n\n                let qsInRound = 0;\n                for (var i = 0; i < categories.length; i++) {\n                    qsInRound += categories[i].questions.length\n                }\n                this.setState({ totalQuestionsInRound: qsInRound })\n                if(res.data.answered.length == qsInRound){\n                    this.startNextRound()\n                }\n            })\n            .catch(err => console.log(err));\n\n    }\n    handleNewContestant = (players) => {\n        this.setState({ contestants: players })\n        for (var i = 0; i < players.length; i++) {\n            if (this.state.playerID == players[i]._id) {\n                this.state.playerNum = i + 1;\n            }\n        }\n    }\n    handleScoresInit = (scores) => {\n\n        this.setState({ scores: scores })\n    }\n    handleNewScores = (scores, turn, guess, correct) => {\n        // console.log(turn)\n        if (turn != 0 && turn != undefined) {\n            this.setState({ turn: turn });\n        }\n        if (correct) {\n            this.setState({\n                scores: scores,\n                guess: guess,\n                correct: correct,\n                activeResult: true,\n                resultTimer: setTimeout(() => {\n                    this.closeQuestionFinal()\n                }, 1500)\n            })\n        } else {\n\n            this.setState({\n                scores: scores,\n                guess: guess,\n                correct: correct,\n                activeResult: true,\n                triedToAnswer: this.state.triedToAnswer + 1,\n                resultTimer: setTimeout(() => {\n                    this.closeQuestion()\n                }, 1500)\n            })\n            if (this.state.triedToAnswer == this.state.contestants.length) {\n                this.questionOver(this.state.activeQuestion._id)\n            }\n        }\n\n    }\n    questionOver = (questionid) => {\n        if (this.state.activeQuestion._id == questionid) {\n            this.setState({\n                activeResult: true,\n                triedToAnswer: 0,\n                questionOver: true,\n                resultTimer: setTimeout(() => {\n                    this.closeQuestionFinal()\n                }, 1500)\n            })\n        }\n    }\n    closeQuestionFinal = () => {\n        this.setState({\n            timer: \"\",\n            activeQuestion: \"\",\n            activeAnswer: false,\n            activeResult: false,\n            questionOver: false\n        })\n        if(this.state.totalQuestionsInRound == this.state.answered.length){\n            this.startNextRound()\n\n        }\n    }\n    startNextRound = () =>{\n        if(this.state.round == 1){\n            this.setState({round:2, answered:[], categories: this.state.doubleCategories})\n            API.updateRound(this.state.gameID, 2)\n        }\n        if(this.state.round == 2){\n            this.setState({round:3, answered:[], categories: this.state.doubleCategories})\n            API.updateRound(this.state.gameID, 3)\n        }\n    }\n    handleAnswerUpdate = (answers) => {\n        this.setState({ answered: answers })\n    }\n    closeQuestion = () => {\n        // clearTimeout(this.state.timer)\n        this.setState({\n            timer: \"\",\n            // activeQuestion: \"\",\n            activeAnswer: false,\n            activeResult: false\n        })\n    }\n    displayQuestion = (questionid, index1, index2) => {\n        if (this.state.turn == this.state.playerNum) {\n            API.selectQuestion(questionid, this.state.gameID)\n        }\n    }\n    pickCategory = (index1) => {\n        console.log(index1)\n        this.setState({\n            activeCategory: index1\n        })\n\n    }\n    buzzIn = () => {\n        API.buzz(this.state.gameID, this.state.playerName, this.state.activeQuestion._id)\n    }\n    handleBuzzUpdate = (playerName) => {\n        this.setState({\n            activeAnswer: true,\n            buzzedIn: playerName\n        })\n    }\n    answerQuestion = (e) => {\n        e.preventDefault();\n\n\n        let correctAnswer = this.state.activeQuestion.answer\n        let answerVal = this.state.activeQuestion.value.replace('$', '');\n        let turnChange = false;\n        let correct\n        // let userScore = this.state.scores[this.state.playerID];\n        if (this.state.guess != \"\") {\n            if (this.state.guess.toLowerCase() == correctAnswer.toLowerCase()) {\n                console.log(\"Correct\")\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(answerVal)\n                turnChange = true;\n                correct = true;\n            } else {\n                this.setState({ canbuzz: false })\n                console.log(correctAnswer)\n                correct = false;\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal)\n            }\n        }\n        // API.closeQuestion(this.state.gameID);\n        if (turnChange) {\n            API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct)\n        } else {\n            API.submitScores(this.state.gameID, this.state.scores, 0, this.state.guess, correct)\n        }\n    }\n\n    handleAnswer = (event) => {\n        this.setState({\n            guess: event.target.value\n        })\n    }\n    handleGameTitle = (event) => {\n        this.setState({\n            newGameTitle: event.target.value\n        })\n    }\n    handlePlayerName = (event) => {\n        this.setState({\n            newPlayerName: event.target.value\n        })\n    }\n    createNewGame = (e) => {\n        e.preventDefault();\n        API.createNewGame(this.state.newGameTitle)\n            .then(() => {\n                console.log(\"getting games\")\n                this.getGames();\n            })\n            .catch(err => console.log(err));\n    }\n    createNewPlayer = (e) => {\n        e.preventDefault();\n        API.createNewPlayer(this.state.newPlayerName)\n            .then((player) => {\n                const cookies = new Cookies();\n                cookies.set(\"playerID\", player.data._id);\n                cookies.set(\"playerName\", player.data.name);\n                this.setState({ playerID: player.data._id })\n                this.setState({ playerName: player.data.name })\n\n            })\n            .catch(err => console.log(err));\n    }\n    timesUp = (playerName, questionId) => {\n\n        if (playerName == this.state.playerName && this.state.playerName == this.state.buzzedIn && this.state.activeAnswer && this.state.activeQuestion._id == questionId) {\n            this.setState({ canbuzz: false })\n            let correct = false;\n            let answerVal = this.state.activeQuestion.value.replace('$', '');\n            this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal)\n            API.submitScores(this.state.gameID, this.state.scores, 0, \"\", correct)\n        }\n    }\n    startGame = (gameID) => {\n\n        \n        this.setState({ gameID: gameID });\n        this.setState({ mainScreen: false });\n        let reactFuncs = {\n            handleQuestion: this.handleQuestion,\n            handleNewContestant: this.handleNewContestant,\n            handleNewScores: this.handleNewScores,\n            handleBuzzUpdate: this.handleBuzzUpdate,\n            handleScoresInit: this.handleScoresInit,\n            handleAnswerUpdate: this.handleAnswerUpdate,\n            closeQuestion: this.closeQuestion,\n            timesUp: this.timesUp,\n            questionOver: this.questionOver,\n            initFinalQuestion:this.initFinalQuestion\n        }\n\n        API.connectToGame(gameID, this.state.playerID, reactFuncs).then(() => {\n            this.getGame(this.state.gameID);\n            console.log(this.state.contestants)\n        })\n    }\n    initFinalQuestion = () => {\n        this.setState({finalQuestion:true})\n    }\n    handleQuestion = (questionID) => {\n\n        let activeCategory = this.state.categories.filter((x, index) => {\n            return x.questions.some((element) => element._id == questionID);\n        })\n        let activeQuestion = activeCategory[0].questions.filter((x) => x._id == questionID);\n        this.setState({\n            activeQuestion: activeQuestion[0],\n            canbuzz: true\n\n        })\n        const mouseClickEvents = ['click'];\n\n        function simulateMouseClick(element) {\n            mouseClickEvents.forEach(mouseEventType =>\n                element.dispatchEvent(\n                    new MouseEvent(mouseEventType, {\n                        view: window,\n                        bubbles: true,\n                        cancelable: true,\n                        buttons: 1\n                    })\n                )\n            );\n        }\n\n        var element = document.querySelector('.question-name[id=\"' + questionID + '\"] + .rs-container button');\n        simulateMouseClick(element);\n\n\n    }\n    handleFinalWager = (wager) => {\n        // console.log(wager.target.value)\n        this.setState({finalWager:wager.target.value})\n    }\n    placeFinalWager = (wager) => {\n        wager.preventDefault();\n        API.placeFinalWager(this.state.gameID, this.state.playerName, this.state.finalWager)\n    }\n    render() {\n        return (\n            <div className = \"jeopardy-game\">\n                <div className = \"utility-menu\">\n                {this.state.mainScreen ? <h3 className = \"my-name\">{this.state.playerName}</h3> : \"\"}\n                </div>\n                 {this.state.activeResult ? \n                <Result \n                questionOver = {this.state.questionOver}\n                    buzz = {this.state.buzzedIn}\n                    correct = {this.state.correct}\n                    question = {this.state.activeQuestion}\n                    guess = {this.state.guess}\n                    me = {this.state.playerName}\n\n                />\n                \n                : \"\"}\n                {this.state.activeAnswer ?\n                <Answer \n                    handleAnswer = {this.handleAnswer}\n                    answerQuestion = {this.answerQuestion}\n                    buzzedIn = {this.state.buzzedIn}\n                    me = {this.state.playerName}\n                />\n                : \"\"}\n            {this.state.activeQuestion ? \n                <Question \n                    question = {this.state.activeQuestion}\n                    buzz = {this.buzzIn}\n                    canbuzz = {this.state.canbuzz}\n                    // handleAnswer = {this.handleAnswer}\n                    // answerQuestion = {this.answerQuestion}\n                />\n                \n            : \"\"}\n            {this.state.mainScreen ? \n                this.state.playerID == \"\" ?\n                <div className = \"player-reg\">\n                    <Welcome handlePlayerName = {this.handlePlayerName}\n                            createNewPlayer = {this.createNewPlayer}/>\n                </div>\n                :\n                <div className = \"main-menu\">\n\n                <MainMenu   \n                    startGame ={this.startGame}\n                    createNewGame = {this.createNewGame} \n                    handleGameTitle = {this.handleGameTitle} \n                    games = {this.state.games}>\n                </MainMenu>\n                </div>\n                :\n                this.state.round == 3?\n                <div className = \"jeopardy-board\">\n                <FinalJeopardy\n                handleWager = {this.handleFinalWager}\n                placeWager = {this.placeFinalWager}\n\n                myscore = {this.state.scores[this.state.playerID]}\n                question = {this.state.finalJeopardy}\n                />\n\n                <Contestants\n                scores = {this.state.scores}\n                contestants = {this.state.contestants} \n                turn = {this.state.turn}\n                />\n                </div>\n                :\n            <div className = \"jeopardy-board\">\n            <div className = \"just-the-board\">\n\n           <JeopardyBoard  \n                    endRound= {this.state.totalQuestionsInRound}\n                    answered = {this.state.answered}\n                    activeCategory = {this.state.activeCategory} \n                    displayQuestion = {this.displayQuestion} \n                    categories = {this.state.categories}\n                    doubleCat = {this.state.doubleCategories}\n                    round = {this.state.round}/>\n            </div>\n            <Contestants\n                scores = {this.state.scores}\n                contestants = {this.state.contestants} \n                turn = {this.state.turn}\n            />\n            <SpeechRecognition displayQuestion = {this.displayQuestion} activeCategory = {this.state.activeCategory} categories = {this.state.categories} pickCategory = {this.pickCategory}></SpeechRecognition>\n        </div>\n    }\n         \n       </div>\n\n\n        )\n\n\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}