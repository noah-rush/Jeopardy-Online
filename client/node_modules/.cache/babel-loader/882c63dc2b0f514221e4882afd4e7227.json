{"ast":null,"code":"var _jsxFileName = \"/home/noah/jeopardy-app/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport API from \"./Utils/API\";\nimport Speech from 'react-speech';\nimport JeopardyBoard from './Components/JeopardyBoard/JeopardyBoard';\nimport Contestants from './Components/JeopardyBoard/Contestants';\nimport Question from './Components/JeopardyBoard/Question';\nimport Answer from './Components/JeopardyBoard/Answer';\nimport Result from './Components/JeopardyBoard/Result';\nimport FinalJeopardy from './Components/JeopardyBoard/FinalJeopardy';\nimport GameOver from './Components/JeopardyBoard/GameOver';\nimport MainMenu from './Components/MainMenu';\nimport Welcome from './Components/WelcomeScreen';\nimport { withCookies, Cookies } from 'react-cookie';\nimport { instanceOf } from 'prop-types';\nimport SpeechRecognition from './Components/SpeechRecognition/SpeechRecognition';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      activeQuestion: \"\",\n      activeAnswer: false,\n      activeResult: false,\n      timer: \"\",\n      userScore: 0,\n      mainScreen: true,\n      activeCategory: -1,\n      newGameTitle: \"\",\n      games: [],\n      answered: [],\n      gameID: \"\",\n      round: 0,\n      timestamp: \"No Timestamp yet\",\n      playerID: \"\",\n      playerName: '',\n      playerNum: 0,\n      contestants: [],\n      scores: [],\n      turn: 1,\n      buzzedIn: \"\",\n      canbuzz: true,\n      correct: false,\n      resultTimer: \"\",\n      questionOver: false,\n      triedToAnswer: 0,\n      totalQuestionsInRound: 0,\n      finalWager: 0,\n      finalWagerSubmitted: false,\n      finalQuestion: false,\n      finalQuestionAnswered: false,\n      finalResults: false,\n      finalGuesses: {},\n      gameOver: false,\n      activeAnswerTimer: \"\",\n      guess: \"\",\n      resetSpeechTimer: setInterval(() => {\n        this.resetSpeechRecog();\n      }, 5000)\n    };\n\n    this.getGames = () => {\n      API.getGames().then(res => this.setState({\n        games: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.getGame = gameID => {\n      API.getCategories(gameID).then(res => {\n        let categories = res.data.jeopardyCategories; // console.log(res.data)\n\n        let gameOver = false;\n\n        if (res.data.round == 2) {\n          categories = res.data.doubleCategories;\n        }\n\n        if (res.data.round == 4) {\n          gameOver = true;\n        } // console.log(\"round \")\n        // console.log(this.state.round)\n\n\n        if (res.data.round == 3) {\n          let preFinalScores = { ...this.state.scores\n          };\n          this.setState({\n            preFinalScores: preFinalScores\n          });\n        }\n\n        this.setState({\n          categories: categories,\n          doubleCategories: res.data.doubleCategories,\n          finalJeopardy: res.data.finalJeopardy,\n          games: [],\n          answered: res.data.answered,\n          round: res.data.round,\n          gameOver: gameOver\n        }); // console.log(res.)\n\n        let qsInRound = 0;\n\n        for (var i = 0; i < categories.length; i++) {\n          qsInRound += categories[i].questions.length;\n        }\n\n        this.setState({\n          totalQuestionsInRound: qsInRound\n        });\n\n        if (res.data.answered.length == qsInRound) {\n          this.startNextRound();\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.handleNewContestant = players => {\n      this.setState({\n        contestants: players\n      });\n\n      for (var i = 0; i < players.length; i++) {\n        if (this.state.playerID == players[i]._id) {\n          this.state.playerNum = i + 1;\n        }\n      }\n    };\n\n    this.handleScoresInit = scores => {\n      this.setState({\n        scores: scores,\n        preFinalScores: scores\n      });\n    };\n\n    this.handleNewScores = (scores, turn, guess, correct) => {\n      // console.log(turn)\n      if (this.state.round != 3) {\n        if (turn != 0 && turn != undefined) {\n          this.setState({\n            turn: turn\n          });\n        }\n\n        if (correct) {\n          this.setState({\n            scores: scores,\n            guess: guess,\n            correct: correct,\n            activeResult: true,\n            resultTimer: setTimeout(() => {\n              this.closeQuestionFinal();\n            }, 1500)\n          });\n        } else {\n          this.setState({\n            scores: scores,\n            guess: guess,\n            correct: correct,\n            activeResult: true,\n            triedToAnswer: this.state.triedToAnswer + 1,\n            resultTimer: setTimeout(() => {\n              this.closeQuestion();\n            }, 1500)\n          });\n        }\n      } else {\n        this.setState({\n          scores: scores\n        });\n      }\n    };\n\n    this.questionOver = questionid => {\n      if (this.state.activeQuestion._id == questionid) {\n        this.setState({\n          activeResult: true,\n          triedToAnswer: 0,\n          questionOver: true,\n          resultTimer: setTimeout(() => {\n            this.closeQuestionFinal();\n          }, 1500)\n        });\n      }\n    };\n\n    this.closeQuestionFinal = () => {\n      this.setState({\n        timer: \"\",\n        activeQuestion: \"\",\n        guess: \"\",\n        activeAnswer: false,\n        activeResult: false,\n        questionOver: false\n      });\n\n      if (this.state.totalQuestionsInRound == this.state.answered.length) {\n        this.startNextRound();\n      }\n    };\n\n    this.startNextRound = () => {\n      if (this.state.round == 2) {\n        this.setState({\n          preFinalScores: this.state.scores,\n          round: 3,\n          answered: [],\n          categories: this.state.doubleCategories\n        });\n        API.updateRound(this.state.gameID, 3);\n      }\n\n      if (this.state.round == 1) {\n        this.setState({\n          round: 2,\n          answered: [],\n          categories: this.state.doubleCategories\n        });\n        API.updateRound(this.state.gameID, 2);\n        let qsInRound = 0;\n\n        for (var i = 0; i < this.state.categories.length; i++) {\n          qsInRound += this.state.categories[i].questions.length;\n        }\n\n        this.setState({\n          totalQuestionsInRound: qsInRound\n        });\n      }\n    };\n\n    this.handleAnswerUpdate = answers => {\n      this.setState({\n        answered: answers\n      });\n    };\n\n    this.closeQuestion = () => {\n      // clearTimeout(this.state.timer)\n      this.setState({\n        timer: \"\",\n        // activeQuestion: \"\",\n        guess: \"\",\n        activeAnswer: false,\n        activeResult: false\n      });\n\n      if (this.state.triedToAnswer == this.state.contestants.length) {\n        this.questionOver(this.state.activeQuestion._id);\n      }\n    };\n\n    this.displayQuestion = questionid => {\n      if (this.state.turn == this.state.playerNum) {\n        API.selectQuestion(questionid, this.state.gameID);\n      }\n    };\n\n    this.pickCategory = index1 => {\n      console.log(index1);\n      this.setState({\n        activeCategory: index1\n      });\n    };\n\n    this.buzzIn = () => {\n      API.buzz(this.state.gameID, this.state.playerName, this.state.activeQuestion._id);\n    };\n\n    this.handleBuzzUpdate = playerName => {\n      this.setState({\n        activeAnswer: true,\n        buzzedIn: playerName,\n        answerSeconds: 6,\n        activeAnswerTimer: setInterval(() => {\n          this.setState({\n            answerSeconds: this.state.answerSeconds - 1\n          });\n        }, 1000)\n      });\n      this.answerField.current.focus();\n    };\n\n    this.answerFinalQuestion = e => {\n      e.preventDefault();\n      let correctAnswer = this.state.finalJeopardy.questions[0].answer;\n      let correct = false;\n      this.setState({\n        finalQuestionAnswered: true\n      });\n\n      if (this.state.guess != \"\") {\n        if (this.state.guess.toLowerCase() == correctAnswer.toLowerCase()) {\n          console.log(\"Correct\");\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(this.state.finalWager);\n        } else {\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(this.state.finalWager);\n        }\n      }\n\n      API.submitFinal(this.state.gameID, this.state.playerName, this.state.guess);\n      API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct, this.state.round);\n    };\n\n    this.answerQuestion = e => {\n      e.preventDefault();\n\n      if (this.state.guess != \"\") {\n        let possibleAnswers = [];\n        clearInterval(this.state.activeAnswerTimer);\n        let answerVal = this.state.activeQuestion.value.replace('$', '');\n        let turnChange = false;\n        let correct;\n        let guess = this.state.guess;\n        let correctAnswer = this.state.activeQuestion.answer.toLowerCase();\n        var matcher = /[a-z]+/gi;\n        correctAnswer = correctAnswer.match(matcher);\n\n        if (correctAnswer[0].toLowerCase() == \"the\" || correctAnswer[0].toLowerCase() == \"a\") {\n          possibleAnswers.push(correctAnswer.join('').toLowerCase());\n          correctAnswer.splice(0, 1);\n        }\n\n        correctAnswer = correctAnswer.join('').toLowerCase();\n        possibleAnswers.push(correctAnswer);\n\n        if (guess != \"\") {\n          guess = guess.match(matcher);\n          guess = guess.join('').toLowerCase();\n        }\n\n        console.log(possibleAnswers);\n        console.log(guess); // let userScore = this.state.scores[this.state.playerID];\n\n        if (possibleAnswers.includes(guess)) {\n          console.log(\"Correct\");\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(answerVal);\n          turnChange = true;\n          correct = true;\n        } else {\n          this.setState({\n            canbuzz: false\n          });\n          console.log(correctAnswer);\n          correct = false;\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal);\n        } // API.closeQuestion(this.state.gameID);\n\n\n        if (turnChange) {\n          API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct, this.state.round);\n        } else {\n          API.submitScores(this.state.gameID, this.state.scores, 0, this.state.guess, correct, this.state.round);\n        }\n      }\n    };\n\n    this.handleAnswer = event => {\n      this.setState({\n        guess: event.target.value\n      });\n    };\n\n    this.handleGameTitle = event => {\n      this.setState({\n        newGameTitle: event.target.value\n      });\n    };\n\n    this.handlePlayerName = event => {\n      this.setState({\n        newPlayerName: event.target.value\n      });\n    };\n\n    this.createNewGame = e => {\n      e.preventDefault();\n      API.createNewGame(this.state.newGameTitle).then(() => {\n        console.log(\"getting games\");\n        this.getGames();\n      }).catch(err => console.log(err));\n    };\n\n    this.createNewPlayer = e => {\n      e.preventDefault();\n      API.createNewPlayer(this.state.newPlayerName).then(player => {\n        const cookies = new Cookies();\n        cookies.set(\"playerID\", player.data._id);\n        cookies.set(\"playerName\", player.data.name);\n        this.setState({\n          playerID: player.data._id\n        });\n        this.setState({\n          playerName: player.data.name\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.timesUp = (playerName, questionId) => {\n      clearInterval(this.state.activeAnswerTimer);\n\n      if (!this.state.activeResult && playerName == this.state.playerName && this.state.playerName == this.state.buzzedIn && this.state.activeAnswer && this.state.activeQuestion._id == questionId) {\n        this.setState({\n          canbuzz: false\n        });\n        let correct = false;\n        let answerVal = this.state.activeQuestion.value.replace('$', '');\n        this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal);\n        API.submitScores(this.state.gameID, this.state.scores, 0, \"\", correct, this.state.round);\n      }\n    };\n\n    this.finalGuess = (player, answer) => {\n      this.state.finalGuesses[player] = answer;\n      console.log(this.state.finalGuesses);\n    };\n\n    this.gameOver = () => {\n      console.log(\"game Over\");\n      this.setState({\n        gameOver: true\n      });\n    };\n\n    this.backToMain = e => {\n      e.preventDefault();\n      this.setState({\n        mainScreen: true\n      });\n    };\n\n    this.startGame = gameID => {\n      this.setState({\n        gameID: gameID\n      });\n      this.setState({\n        mainScreen: false\n      });\n      let reactFuncs = {\n        handleQuestion: this.handleQuestion,\n        handleNewContestant: this.handleNewContestant,\n        handleNewScores: this.handleNewScores,\n        handleBuzzUpdate: this.handleBuzzUpdate,\n        handleScoresInit: this.handleScoresInit,\n        handleAnswerUpdate: this.handleAnswerUpdate,\n        closeQuestion: this.closeQuestion,\n        timesUp: this.timesUp,\n        questionOver: this.questionOver,\n        initFinalQuestion: this.initFinalQuestion,\n        finalGuess: this.finalGuess,\n        gameOver: this.gameOver\n      };\n      API.connectToGame(gameID, this.state.playerID, reactFuncs).then(() => {\n        this.getGame(this.state.gameID);\n        console.log(this.state.contestants);\n      });\n    };\n\n    this.initFinalQuestion = () => {\n      console.log(\"final question ready\");\n      this.setState({\n        finalQuestion: true\n      });\n    };\n\n    this.handleQuestion = questionID => {\n      let activeCategory = this.state.categories.filter((x, index) => {\n        return x.questions.some(element => element._id == questionID);\n      });\n      let activeQuestion = activeCategory[0].questions.filter(x => x._id == questionID);\n      this.setState({\n        activeQuestion: activeQuestion[0],\n        canbuzz: true\n      });\n      const mouseClickEvents = ['click'];\n\n      function simulateMouseClick(element) {\n        mouseClickEvents.forEach(mouseEventType => element.dispatchEvent(new MouseEvent(mouseEventType, {\n          view: window,\n          bubbles: true,\n          cancelable: true,\n          buttons: 1\n        })));\n      }\n\n      var element = document.querySelector('.question-name[id=\"' + questionID + '\"] + .rs-container button');\n      simulateMouseClick(element);\n      this.buzzButton.current.focus();\n    };\n\n    this.resetSpeechRecog = () => {\n      if (this.state.gameID != \"\") {\n        const mouseClickEvents = ['click'];\n\n        function simulateMouseClick(element) {\n          mouseClickEvents.forEach(mouseEventType => element.dispatchEvent(new MouseEvent(mouseEventType, {\n            view: window,\n            bubbles: true,\n            cancelable: true,\n            buttons: 1\n          })));\n        }\n\n        var element = document.querySelector('#resetSpeech');\n        simulateMouseClick(element);\n      }\n    };\n\n    this.handleFinalWager = wager => {\n      // console.log(wager.target.value)\n      this.setState({\n        finalWager: wager.target.value\n      });\n    };\n\n    this.placeFinalWager = wager => {\n      wager.preventDefault();\n      this.setState({\n        finalWagerSubmitted: true\n      });\n      API.placeFinalWager(this.state.gameID, this.state.playerName, this.state.finalWager);\n    };\n  }\n\n  loadCookies() {\n    // cookies = instanceOf(Cookies).isRequired;\n    const cookies = new Cookies(); // console.log(Cookies)\n    // console.log(cookies.get(\"playerName\"));\n    // cookies.set(\"playerName\", \"juancho\")\n\n    this.setState({\n      playerName: cookies.get(\"playerName\") || \"\",\n      playerID: cookies.get(\"playerID\") || \"\"\n    });\n  }\n\n  componentDidMount() {\n    API.getSocketIP().then(res => {\n      console.log(res);\n      API.initSocket(res.data);\n    });\n    this.loadCookies();\n    this.getGames();\n    this.buzzButton = /*#__PURE__*/React.createRef();\n    this.answerField = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jeopardy-game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"utility-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 17\n      }\n    }, this.state.mainScreen ? /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"my-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 42\n      }\n    }, this.state.playerName) : \"\"), this.state.activeResult ? /*#__PURE__*/React.createElement(Result, {\n      questionOver: this.state.questionOver,\n      buzz: this.state.buzzedIn,\n      correct: this.state.correct,\n      question: this.state.activeQuestion,\n      guess: this.state.guess,\n      me: this.state.playerName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 17\n      }\n    }) : this.state.activeAnswer ? /*#__PURE__*/React.createElement(Answer, {\n      handleAnswer: this.handleAnswer,\n      answerQuestion: this.answerQuestion,\n      buzzedIn: this.state.buzzedIn,\n      me: this.state.playerName,\n      ref: this.answerField,\n      seconds: this.state.answerSeconds,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 17\n      }\n    }) : \"\", this.state.activeQuestion ? /*#__PURE__*/React.createElement(Question, {\n      question: this.state.activeQuestion,\n      buzz: this.buzzIn,\n      canbuzz: this.state.canbuzz,\n      ref: this.buzzButton // handleAnswer = {this.handleAnswer}\n      // answerQuestion = {this.answerQuestion}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 17\n      }\n    }) : \"\", this.state.mainScreen ? this.state.playerID == \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-reg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Welcome, {\n      handlePlayerName: this.handlePlayerName,\n      createNewPlayer: this.createNewPlayer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MainMenu, {\n      startGame: this.startGame,\n      createNewGame: this.createNewGame,\n      handleGameTitle: this.handleGameTitle,\n      games: this.state.games,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 17\n      }\n    })) : this.state.round >= 3 ? this.state.gameOver ? /*#__PURE__*/React.createElement(GameOver, {\n      finalGuesses: this.state.finalGuesses,\n      scores: this.state.preFinalScores,\n      finalScores: this.state.scores,\n      contestants: this.state.contestants,\n      finalAnswer: this.state.finalJeopardy.questions[0].answer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 17\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jeopardy-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FinalJeopardy, {\n      wagerSubmitted: this.state.finalWagerSubmitted,\n      handleWager: this.handleFinalWager,\n      placeWager: this.placeFinalWager,\n      ready: this.state.finalQuestion,\n      myscore: this.state.preFinalScores[this.state.playerID],\n      question: this.state.finalJeopardy,\n      handleAnswer: this.handleAnswer,\n      finalAnswer: this.answerFinalQuestion,\n      scores: this.state.preFinalScores,\n      finalScores: this.state.scores,\n      contestants: this.state.contestants,\n      turn: this.state.turn,\n      answered: this.state.finalQuestionAnswered,\n      guess: this.state.guess,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 17\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jeopardy-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"just-the-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(JeopardyBoard, {\n      endRound: this.state.totalQuestionsInRound,\n      answered: this.state.answered,\n      activeCategory: this.state.activeCategory,\n      displayQuestion: this.displayQuestion,\n      categories: this.state.categories,\n      doubleCat: this.state.doubleCategories,\n      round: this.state.round,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 12\n      }\n    })), /*#__PURE__*/React.createElement(Contestants, {\n      scores: this.state.scores,\n      contestants: this.state.contestants,\n      turn: this.state.turn,\n      backToMenu: this.backToMain,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SpeechRecognition, {\n      displayQuestion: this.displayQuestion,\n      activeCategory: this.state.activeCategory,\n      categories: this.state.categories,\n      pickCategory: this.pickCategory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/App.js"],"names":["React","Component","API","Speech","JeopardyBoard","Contestants","Question","Answer","Result","FinalJeopardy","GameOver","MainMenu","Welcome","withCookies","Cookies","instanceOf","SpeechRecognition","App","state","categories","activeQuestion","activeAnswer","activeResult","timer","userScore","mainScreen","activeCategory","newGameTitle","games","answered","gameID","round","timestamp","playerID","playerName","playerNum","contestants","scores","turn","buzzedIn","canbuzz","correct","resultTimer","questionOver","triedToAnswer","totalQuestionsInRound","finalWager","finalWagerSubmitted","finalQuestion","finalQuestionAnswered","finalResults","finalGuesses","gameOver","activeAnswerTimer","guess","resetSpeechTimer","setInterval","resetSpeechRecog","getGames","then","res","setState","data","catch","err","console","log","getGame","getCategories","jeopardyCategories","doubleCategories","preFinalScores","finalJeopardy","qsInRound","i","length","questions","startNextRound","handleNewContestant","players","_id","handleScoresInit","handleNewScores","undefined","setTimeout","closeQuestionFinal","closeQuestion","questionid","updateRound","handleAnswerUpdate","answers","displayQuestion","selectQuestion","pickCategory","index1","buzzIn","buzz","handleBuzzUpdate","answerSeconds","answerField","current","focus","answerFinalQuestion","e","preventDefault","correctAnswer","answer","toLowerCase","parseInt","submitFinal","submitScores","answerQuestion","possibleAnswers","clearInterval","answerVal","value","replace","turnChange","matcher","match","push","join","splice","includes","handleAnswer","event","target","handleGameTitle","handlePlayerName","newPlayerName","createNewGame","createNewPlayer","player","cookies","set","name","timesUp","questionId","finalGuess","backToMain","startGame","reactFuncs","handleQuestion","initFinalQuestion","connectToGame","questionID","filter","x","index","some","element","mouseClickEvents","simulateMouseClick","forEach","mouseEventType","dispatchEvent","MouseEvent","view","window","bubbles","cancelable","buttons","document","querySelector","buzzButton","handleFinalWager","wager","placeFinalWager","loadCookies","get","componentDidMount","getSocketIP","initSocket","createRef","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,WAAP,MAAwB,wCAAxB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,QAAP,MAAqB,qCAArB;AAEA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,cAArC;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAOC,iBAAP,MAA8B,kDAA9B;;AAQA,MAAMC,GAAN,SAAkBhB,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAGxBiB,KAHwB,GAGhB;AAEJC,MAAAA,UAAU,EAAE,EAFR;AAGJC,MAAAA,cAAc,EAAE,EAHZ;AAIJC,MAAAA,YAAY,EAAE,KAJV;AAKJC,MAAAA,YAAY,EAAE,KALV;AAMJC,MAAAA,KAAK,EAAE,EANH;AAOJC,MAAAA,SAAS,EAAE,CAPP;AAQJC,MAAAA,UAAU,EAAE,IARR;AASJC,MAAAA,cAAc,EAAE,CAAC,CATb;AAUJC,MAAAA,YAAY,EAAE,EAVV;AAWJC,MAAAA,KAAK,EAAE,EAXH;AAYJC,MAAAA,QAAQ,EAAE,EAZN;AAaJC,MAAAA,MAAM,EAAE,EAbJ;AAcJC,MAAAA,KAAK,EAAE,CAdH;AAeJC,MAAAA,SAAS,EAAE,kBAfP;AAgBJC,MAAAA,QAAQ,EAAE,EAhBN;AAiBJC,MAAAA,UAAU,EAAE,EAjBR;AAkBJC,MAAAA,SAAS,EAAE,CAlBP;AAmBJC,MAAAA,WAAW,EAAE,EAnBT;AAoBJC,MAAAA,MAAM,EAAE,EApBJ;AAqBJC,MAAAA,IAAI,EAAE,CArBF;AAsBJC,MAAAA,QAAQ,EAAE,EAtBN;AAuBJC,MAAAA,OAAO,EAAE,IAvBL;AAwBJC,MAAAA,OAAO,EAAE,KAxBL;AAyBJC,MAAAA,WAAW,EAAE,EAzBT;AA0BJC,MAAAA,YAAY,EAAE,KA1BV;AA2BJC,MAAAA,aAAa,EAAE,CA3BX;AA4BJC,MAAAA,qBAAqB,EAAE,CA5BnB;AA6BJC,MAAAA,UAAU,EAAE,CA7BR;AA8BJC,MAAAA,mBAAmB,EAAE,KA9BjB;AA+BJC,MAAAA,aAAa,EAAE,KA/BX;AAgCJC,MAAAA,qBAAqB,EAAE,KAhCnB;AAiCJC,MAAAA,YAAY,EAAE,KAjCV;AAkCJC,MAAAA,YAAY,EAAE,EAlCV;AAmCJC,MAAAA,QAAQ,EAAE,KAnCN;AAoCJC,MAAAA,iBAAiB,EAAE,EApCf;AAqCJC,MAAAA,KAAK,EAAE,EArCH;AAsCJC,MAAAA,gBAAgB,EAAEC,WAAW,CAAC,MAAM;AAAE,aAAKC,gBAAL;AAAyB,OAAlC,EAAoC,IAApC;AAtCzB,KAHgB;;AAAA,SAuExBC,QAvEwB,GAuEb,MAAM;AACbxD,MAAAA,GAAG,CAACwD,QAAJ,GACKC,IADL,CACUC,GAAG,IAAI,KAAKC,QAAL,CAAc;AACvBjC,QAAAA,KAAK,EAAEgC,GAAG,CAACE;AADY,OAAd,CADjB,EAIKC,KAJL,CAIWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAJlB;AAKH,KA7EuB;;AAAA,SA+ExBG,OA/EwB,GA+EbrC,MAAD,IAAY;AAClB5B,MAAAA,GAAG,CAACkE,aAAJ,CAAkBtC,MAAlB,EACK6B,IADL,CACWC,GAAD,IAAS;AACX,YAAIzC,UAAU,GAAGyC,GAAG,CAACE,IAAJ,CAASO,kBAA1B,CADW,CAEX;;AACA,YAAIjB,QAAQ,GAAG,KAAf;;AACA,YAAIQ,GAAG,CAACE,IAAJ,CAAS/B,KAAT,IAAkB,CAAtB,EAAyB;AACrBZ,UAAAA,UAAU,GAAGyC,GAAG,CAACE,IAAJ,CAASQ,gBAAtB;AACH;;AACD,YAAIV,GAAG,CAACE,IAAJ,CAAS/B,KAAT,IAAkB,CAAtB,EAAyB;AACrBqB,UAAAA,QAAQ,GAAG,IAAX;AACH,SATU,CAUX;AACA;;;AACA,YAAIQ,GAAG,CAACE,IAAJ,CAAS/B,KAAT,IAAkB,CAAtB,EAAyB;AACrB,cAAIwC,cAAc,GAAG,EAAE,GAAG,KAAKrD,KAAL,CAAWmB;AAAhB,WAArB;AACA,eAAKwB,QAAL,CAAc;AAAEU,YAAAA,cAAc,EAAEA;AAAlB,WAAd;AACH;;AACD,aAAKV,QAAL,CAAc;AACV1C,UAAAA,UAAU,EAAEA,UADF;AAEVmD,UAAAA,gBAAgB,EAAEV,GAAG,CAACE,IAAJ,CAASQ,gBAFjB;AAGVE,UAAAA,aAAa,EAAEZ,GAAG,CAACE,IAAJ,CAASU,aAHd;AAIV5C,UAAAA,KAAK,EAAE,EAJG;AAKVC,UAAAA,QAAQ,EAAE+B,GAAG,CAACE,IAAJ,CAASjC,QALT;AAMVE,UAAAA,KAAK,EAAE6B,GAAG,CAACE,IAAJ,CAAS/B,KANN;AAOVqB,UAAAA,QAAQ,EAAEA;AAPA,SAAd,EAhBW,CAyBX;;AAGA,YAAIqB,SAAS,GAAG,CAAhB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvD,UAAU,CAACwD,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCD,UAAAA,SAAS,IAAItD,UAAU,CAACuD,CAAD,CAAV,CAAcE,SAAd,CAAwBD,MAArC;AACH;;AACD,aAAKd,QAAL,CAAc;AAAEhB,UAAAA,qBAAqB,EAAE4B;AAAzB,SAAd;;AACA,YAAIb,GAAG,CAACE,IAAJ,CAASjC,QAAT,CAAkB8C,MAAlB,IAA4BF,SAAhC,EAA2C;AACvC,eAAKI,cAAL;AACH;AACJ,OArCL,EAsCKd,KAtCL,CAsCWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAtClB;AAwCH,KAxHuB;;AAAA,SAyHxBc,mBAzHwB,GAyHDC,OAAD,IAAa;AAC/B,WAAKlB,QAAL,CAAc;AAAEzB,QAAAA,WAAW,EAAE2C;AAAf,OAAd;;AACA,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,OAAO,CAACJ,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACrC,YAAI,KAAKxD,KAAL,CAAWe,QAAX,IAAuB8C,OAAO,CAACL,CAAD,CAAP,CAAWM,GAAtC,EAA2C;AACvC,eAAK9D,KAAL,CAAWiB,SAAX,GAAuBuC,CAAC,GAAG,CAA3B;AACH;AACJ;AACJ,KAhIuB;;AAAA,SAiIxBO,gBAjIwB,GAiIJ5C,MAAD,IAAY;AAE3B,WAAKwB,QAAL,CAAc;AAAExB,QAAAA,MAAM,EAAEA,MAAV;AAAkBkC,QAAAA,cAAc,EAAElC;AAAlC,OAAd;AAEH,KArIuB;;AAAA,SAsIxB6C,eAtIwB,GAsIN,CAAC7C,MAAD,EAASC,IAAT,EAAegB,KAAf,EAAsBb,OAAtB,KAAkC;AAChD;AACA,UAAI,KAAKvB,KAAL,CAAWa,KAAX,IAAoB,CAAxB,EAA2B;AACvB,YAAIO,IAAI,IAAI,CAAR,IAAaA,IAAI,IAAI6C,SAAzB,EAAoC;AAChC,eAAKtB,QAAL,CAAc;AAAEvB,YAAAA,IAAI,EAAEA;AAAR,WAAd;AACH;;AACD,YAAIG,OAAJ,EAAa;AACT,eAAKoB,QAAL,CAAc;AACVxB,YAAAA,MAAM,EAAEA,MADE;AAEViB,YAAAA,KAAK,EAAEA,KAFG;AAGVb,YAAAA,OAAO,EAAEA,OAHC;AAIVnB,YAAAA,YAAY,EAAE,IAJJ;AAKVoB,YAAAA,WAAW,EAAE0C,UAAU,CAAC,MAAM;AAC1B,mBAAKC,kBAAL;AACH,aAFsB,EAEpB,IAFoB;AALb,WAAd;AASH,SAVD,MAUO;AAEH,eAAKxB,QAAL,CAAc;AACVxB,YAAAA,MAAM,EAAEA,MADE;AAEViB,YAAAA,KAAK,EAAEA,KAFG;AAGVb,YAAAA,OAAO,EAAEA,OAHC;AAIVnB,YAAAA,YAAY,EAAE,IAJJ;AAKVsB,YAAAA,aAAa,EAAE,KAAK1B,KAAL,CAAW0B,aAAX,GAA2B,CALhC;AAMVF,YAAAA,WAAW,EAAE0C,UAAU,CAAC,MAAM;AAC1B,mBAAKE,aAAL;AACH,aAFsB,EAEpB,IAFoB;AANb,WAAd;AAWH;AACJ,OA5BD,MA4BO;AACH,aAAKzB,QAAL,CAAc;AACVxB,UAAAA,MAAM,EAAEA;AADE,SAAd;AAGH;AAEJ,KA1KuB;;AAAA,SA2KxBM,YA3KwB,GA2KR4C,UAAD,IAAgB;AAC3B,UAAI,KAAKrE,KAAL,CAAWE,cAAX,CAA0B4D,GAA1B,IAAiCO,UAArC,EAAiD;AAC7C,aAAK1B,QAAL,CAAc;AACVvC,UAAAA,YAAY,EAAE,IADJ;AAEVsB,UAAAA,aAAa,EAAE,CAFL;AAGVD,UAAAA,YAAY,EAAE,IAHJ;AAIVD,UAAAA,WAAW,EAAE0C,UAAU,CAAC,MAAM;AAC1B,iBAAKC,kBAAL;AACH,WAFsB,EAEpB,IAFoB;AAJb,SAAd;AAQH;AACJ,KAtLuB;;AAAA,SAuLxBA,kBAvLwB,GAuLH,MAAM;AACvB,WAAKxB,QAAL,CAAc;AACVtC,QAAAA,KAAK,EAAE,EADG;AAEVH,QAAAA,cAAc,EAAE,EAFN;AAGVkC,QAAAA,KAAK,EAAE,EAHG;AAKVjC,QAAAA,YAAY,EAAE,KALJ;AAMVC,QAAAA,YAAY,EAAE,KANJ;AAOVqB,QAAAA,YAAY,EAAE;AAPJ,OAAd;;AASA,UAAI,KAAKzB,KAAL,CAAW2B,qBAAX,IAAoC,KAAK3B,KAAL,CAAWW,QAAX,CAAoB8C,MAA5D,EAAoE;AAChE,aAAKE,cAAL;AAEH;AACJ,KArMuB;;AAAA,SAsMxBA,cAtMwB,GAsMP,MAAM;AACnB,UAAI,KAAK3D,KAAL,CAAWa,KAAX,IAAoB,CAAxB,EAA2B;AACvB,aAAK8B,QAAL,CAAc;AAAEU,UAAAA,cAAc,EAAE,KAAKrD,KAAL,CAAWmB,MAA7B;AAAqCN,UAAAA,KAAK,EAAE,CAA5C;AAA+CF,UAAAA,QAAQ,EAAE,EAAzD;AAA6DV,UAAAA,UAAU,EAAE,KAAKD,KAAL,CAAWoD;AAApF,SAAd;AACApE,QAAAA,GAAG,CAACsF,WAAJ,CAAgB,KAAKtE,KAAL,CAAWY,MAA3B,EAAmC,CAAnC;AAEH;;AACD,UAAI,KAAKZ,KAAL,CAAWa,KAAX,IAAoB,CAAxB,EAA2B;AACvB,aAAK8B,QAAL,CAAc;AAAE9B,UAAAA,KAAK,EAAE,CAAT;AAAYF,UAAAA,QAAQ,EAAE,EAAtB;AAA0BV,UAAAA,UAAU,EAAE,KAAKD,KAAL,CAAWoD;AAAjD,SAAd;AACApE,QAAAA,GAAG,CAACsF,WAAJ,CAAgB,KAAKtE,KAAL,CAAWY,MAA3B,EAAmC,CAAnC;AACA,YAAI2C,SAAS,GAAG,CAAhB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKxD,KAAL,CAAWC,UAAX,CAAsBwD,MAA1C,EAAkDD,CAAC,EAAnD,EAAuD;AACnDD,UAAAA,SAAS,IAAI,KAAKvD,KAAL,CAAWC,UAAX,CAAsBuD,CAAtB,EAAyBE,SAAzB,CAAmCD,MAAhD;AACH;;AACD,aAAKd,QAAL,CAAc;AAAEhB,UAAAA,qBAAqB,EAAE4B;AAAzB,SAAd;AACH;AAEJ,KAtNuB;;AAAA,SAuNxBgB,kBAvNwB,GAuNFC,OAAD,IAAa;AAC9B,WAAK7B,QAAL,CAAc;AAAEhC,QAAAA,QAAQ,EAAE6D;AAAZ,OAAd;AACH,KAzNuB;;AAAA,SA0NxBJ,aA1NwB,GA0NR,MAAM;AAClB;AACA,WAAKzB,QAAL,CAAc;AACVtC,QAAAA,KAAK,EAAE,EADG;AAEV;AACA+B,QAAAA,KAAK,EAAE,EAHG;AAIVjC,QAAAA,YAAY,EAAE,KAJJ;AAKVC,QAAAA,YAAY,EAAE;AALJ,OAAd;;AAOA,UAAI,KAAKJ,KAAL,CAAW0B,aAAX,IAA4B,KAAK1B,KAAL,CAAWkB,WAAX,CAAuBuC,MAAvD,EAA+D;AAE3D,aAAKhC,YAAL,CAAkB,KAAKzB,KAAL,CAAWE,cAAX,CAA0B4D,GAA5C;AAEH;AACJ,KAxOuB;;AAAA,SAyOxBW,eAzOwB,GAyOLJ,UAAD,IAAgB;AAC9B,UAAI,KAAKrE,KAAL,CAAWoB,IAAX,IAAmB,KAAKpB,KAAL,CAAWiB,SAAlC,EAA6C;AACzCjC,QAAAA,GAAG,CAAC0F,cAAJ,CAAmBL,UAAnB,EAA+B,KAAKrE,KAAL,CAAWY,MAA1C;AACH;AACJ,KA7OuB;;AAAA,SA8OxB+D,YA9OwB,GA8ORC,MAAD,IAAY;AACvB7B,MAAAA,OAAO,CAACC,GAAR,CAAY4B,MAAZ;AACA,WAAKjC,QAAL,CAAc;AACVnC,QAAAA,cAAc,EAAEoE;AADN,OAAd;AAIH,KApPuB;;AAAA,SAqPxBC,MArPwB,GAqPf,MAAM;AACX7F,MAAAA,GAAG,CAAC8F,IAAJ,CAAS,KAAK9E,KAAL,CAAWY,MAApB,EAA4B,KAAKZ,KAAL,CAAWgB,UAAvC,EAAmD,KAAKhB,KAAL,CAAWE,cAAX,CAA0B4D,GAA7E;AACH,KAvPuB;;AAAA,SAwPxBiB,gBAxPwB,GAwPJ/D,UAAD,IAAgB;AAC/B,WAAK2B,QAAL,CAAc;AACVxC,QAAAA,YAAY,EAAE,IADJ;AAEVkB,QAAAA,QAAQ,EAAEL,UAFA;AAGVgE,QAAAA,aAAa,EAAE,CAHL;AAIV7C,QAAAA,iBAAiB,EAAEG,WAAW,CAAC,MAAM;AACjC,eAAKK,QAAL,CAAc;AAAEqC,YAAAA,aAAa,EAAE,KAAKhF,KAAL,CAAWgF,aAAX,GAA2B;AAA5C,WAAd;AACH,SAF6B,EAE3B,IAF2B;AAJpB,OAAd;AAQA,WAAKC,WAAL,CAAiBC,OAAjB,CAAyBC,KAAzB;AAEH,KAnQuB;;AAAA,SAoQxBC,mBApQwB,GAoQDC,CAAD,IAAO;AACzBA,MAAAA,CAAC,CAACC,cAAF;AAEA,UAAIC,aAAa,GAAG,KAAKvF,KAAL,CAAWsD,aAAX,CAAyBI,SAAzB,CAAmC,CAAnC,EAAsC8B,MAA1D;AACA,UAAIjE,OAAO,GAAG,KAAd;AACA,WAAKoB,QAAL,CAAc;AAAEZ,QAAAA,qBAAqB,EAAE;AAAzB,OAAd;;AACA,UAAI,KAAK/B,KAAL,CAAWoC,KAAX,IAAoB,EAAxB,EAA4B;AACxB,YAAI,KAAKpC,KAAL,CAAWoC,KAAX,CAAiBqD,WAAjB,MAAkCF,aAAa,CAACE,WAAd,EAAtC,EAAmE;AAC/D1C,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,eAAKhD,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC,KAAKf,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC2E,QAAQ,CAAC,KAAK1F,KAAL,CAAW4B,UAAZ,CAA1F;AACH,SAHD,MAGO;AACH,eAAK5B,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC,KAAKf,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC2E,QAAQ,CAAC,KAAK1F,KAAL,CAAW4B,UAAZ,CAA1F;AACH;AACJ;;AACD5C,MAAAA,GAAG,CAAC2G,WAAJ,CAAgB,KAAK3F,KAAL,CAAWY,MAA3B,EAAmC,KAAKZ,KAAL,CAAWgB,UAA9C,EAA0D,KAAKhB,KAAL,CAAWoC,KAArE;AACApD,MAAAA,GAAG,CAAC4G,YAAJ,CAAiB,KAAK5F,KAAL,CAAWY,MAA5B,EAAoC,KAAKZ,KAAL,CAAWmB,MAA/C,EAAuD,KAAKnB,KAAL,CAAWiB,SAAlE,EAA6E,KAAKjB,KAAL,CAAWoC,KAAxF,EAA+Fb,OAA/F,EAAwG,KAAKvB,KAAL,CAAWa,KAAnH;AACH,KApRuB;;AAAA,SAqRxBgF,cArRwB,GAqRNR,CAAD,IAAO;AACpBA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAI,KAAKtF,KAAL,CAAWoC,KAAX,IAAoB,EAAxB,EAA4B;AACxB,YAAI0D,eAAe,GAAG,EAAtB;AAEAC,QAAAA,aAAa,CAAC,KAAK/F,KAAL,CAAWmC,iBAAZ,CAAb;AACA,YAAI6D,SAAS,GAAG,KAAKhG,KAAL,CAAWE,cAAX,CAA0B+F,KAA1B,CAAgCC,OAAhC,CAAwC,GAAxC,EAA6C,EAA7C,CAAhB;AACA,YAAIC,UAAU,GAAG,KAAjB;AACA,YAAI5E,OAAJ;AAEA,YAAIa,KAAK,GAAG,KAAKpC,KAAL,CAAWoC,KAAvB;AACA,YAAImD,aAAa,GAAG,KAAKvF,KAAL,CAAWE,cAAX,CAA0BsF,MAA1B,CAAiCC,WAAjC,EAApB;AAEA,YAAIW,OAAO,GAAG,UAAd;AACAb,QAAAA,aAAa,GAAGA,aAAa,CAACc,KAAd,CAAoBD,OAApB,CAAhB;;AACA,YAAIb,aAAa,CAAC,CAAD,CAAb,CAAiBE,WAAjB,MAAkC,KAAlC,IAA2CF,aAAa,CAAC,CAAD,CAAb,CAAiBE,WAAjB,MAAkC,GAAjF,EAAsF;AAClFK,UAAAA,eAAe,CAACQ,IAAhB,CAAqBf,aAAa,CAACgB,IAAd,CAAmB,EAAnB,EAAuBd,WAAvB,EAArB;AACAF,UAAAA,aAAa,CAACiB,MAAd,CAAqB,CAArB,EAAwB,CAAxB;AACH;;AACDjB,QAAAA,aAAa,GAAGA,aAAa,CAACgB,IAAd,CAAmB,EAAnB,EAAuBd,WAAvB,EAAhB;AACAK,QAAAA,eAAe,CAACQ,IAAhB,CAAqBf,aAArB;;AAGA,YAAInD,KAAK,IAAI,EAAb,EAAiB;AACbA,UAAAA,KAAK,GAAGA,KAAK,CAACiE,KAAN,CAAYD,OAAZ,CAAR;AACAhE,UAAAA,KAAK,GAAGA,KAAK,CAACmE,IAAN,CAAW,EAAX,EAAed,WAAf,EAAR;AACH;;AACD1C,QAAAA,OAAO,CAACC,GAAR,CAAY8C,eAAZ;AACA/C,QAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ,EA1BwB,CA8BxB;;AACA,YAAI0D,eAAe,CAACW,QAAhB,CAAyBrE,KAAzB,CAAJ,EAAqC;AACjCW,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,eAAKhD,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC,KAAKf,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC2E,QAAQ,CAACM,SAAD,CAA1F;AACAG,UAAAA,UAAU,GAAG,IAAb;AACA5E,UAAAA,OAAO,GAAG,IAAV;AACH,SALD,MAKO;AACH,eAAKoB,QAAL,CAAc;AAAErB,YAAAA,OAAO,EAAE;AAAX,WAAd;AACAyB,UAAAA,OAAO,CAACC,GAAR,CAAYuC,aAAZ;AACAhE,UAAAA,OAAO,GAAG,KAAV;AACA,eAAKvB,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC,KAAKf,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC2E,QAAQ,CAACM,SAAD,CAA1F;AACH,SAzCuB,CA2CxB;;;AACA,YAAIG,UAAJ,EAAgB;AACZnH,UAAAA,GAAG,CAAC4G,YAAJ,CAAiB,KAAK5F,KAAL,CAAWY,MAA5B,EAAoC,KAAKZ,KAAL,CAAWmB,MAA/C,EAAuD,KAAKnB,KAAL,CAAWiB,SAAlE,EAA6E,KAAKjB,KAAL,CAAWoC,KAAxF,EAA+Fb,OAA/F,EAAwG,KAAKvB,KAAL,CAAWa,KAAnH;AACH,SAFD,MAEO;AACH7B,UAAAA,GAAG,CAAC4G,YAAJ,CAAiB,KAAK5F,KAAL,CAAWY,MAA5B,EAAoC,KAAKZ,KAAL,CAAWmB,MAA/C,EAAuD,CAAvD,EAA0D,KAAKnB,KAAL,CAAWoC,KAArE,EAA4Eb,OAA5E,EAAqF,KAAKvB,KAAL,CAAWa,KAAhG;AACH;AACJ;AACJ,KAzUuB;;AAAA,SA2UxB6F,YA3UwB,GA2URC,KAAD,IAAW;AACtB,WAAKhE,QAAL,CAAc;AACVP,QAAAA,KAAK,EAAEuE,KAAK,CAACC,MAAN,CAAaX;AADV,OAAd;AAGH,KA/UuB;;AAAA,SAgVxBY,eAhVwB,GAgVLF,KAAD,IAAW;AACzB,WAAKhE,QAAL,CAAc;AACVlC,QAAAA,YAAY,EAAEkG,KAAK,CAACC,MAAN,CAAaX;AADjB,OAAd;AAGH,KApVuB;;AAAA,SAqVxBa,gBArVwB,GAqVJH,KAAD,IAAW;AAC1B,WAAKhE,QAAL,CAAc;AACVoE,QAAAA,aAAa,EAAEJ,KAAK,CAACC,MAAN,CAAaX;AADlB,OAAd;AAGH,KAzVuB;;AAAA,SA0VxBe,aA1VwB,GA0VP3B,CAAD,IAAO;AACnBA,MAAAA,CAAC,CAACC,cAAF;AACAtG,MAAAA,GAAG,CAACgI,aAAJ,CAAkB,KAAKhH,KAAL,CAAWS,YAA7B,EACKgC,IADL,CACU,MAAM;AACRM,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,aAAKR,QAAL;AACH,OAJL,EAKKK,KALL,CAKWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CALlB;AAMH,KAlWuB;;AAAA,SAmWxBmE,eAnWwB,GAmWL5B,CAAD,IAAO;AACrBA,MAAAA,CAAC,CAACC,cAAF;AACAtG,MAAAA,GAAG,CAACiI,eAAJ,CAAoB,KAAKjH,KAAL,CAAW+G,aAA/B,EACKtE,IADL,CACWyE,MAAD,IAAY;AACd,cAAMC,OAAO,GAAG,IAAIvH,OAAJ,EAAhB;AACAuH,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAM,CAACtE,IAAP,CAAYkB,GAApC;AACAqD,QAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,MAAM,CAACtE,IAAP,CAAYyE,IAAtC;AACA,aAAK1E,QAAL,CAAc;AAAE5B,UAAAA,QAAQ,EAAEmG,MAAM,CAACtE,IAAP,CAAYkB;AAAxB,SAAd;AACA,aAAKnB,QAAL,CAAc;AAAE3B,UAAAA,UAAU,EAAEkG,MAAM,CAACtE,IAAP,CAAYyE;AAA1B,SAAd;AAEH,OARL,EASKxE,KATL,CASWC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CATlB;AAUH,KA/WuB;;AAAA,SAgXxBwE,OAhXwB,GAgXd,CAACtG,UAAD,EAAauG,UAAb,KAA4B;AAClCxB,MAAAA,aAAa,CAAC,KAAK/F,KAAL,CAAWmC,iBAAZ,CAAb;;AAEA,UAAI,CAAC,KAAKnC,KAAL,CAAWI,YAAZ,IAA4BY,UAAU,IAAI,KAAKhB,KAAL,CAAWgB,UAArD,IAAmE,KAAKhB,KAAL,CAAWgB,UAAX,IAAyB,KAAKhB,KAAL,CAAWqB,QAAvG,IAAmH,KAAKrB,KAAL,CAAWG,YAA9H,IAA8I,KAAKH,KAAL,CAAWE,cAAX,CAA0B4D,GAA1B,IAAiCyD,UAAnL,EAA+L;AAC3L,aAAK5E,QAAL,CAAc;AAAErB,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA,YAAIC,OAAO,GAAG,KAAd;AACA,YAAIyE,SAAS,GAAG,KAAKhG,KAAL,CAAWE,cAAX,CAA0B+F,KAA1B,CAAgCC,OAAhC,CAAwC,GAAxC,EAA6C,EAA7C,CAAhB;AACA,aAAKlG,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC,KAAKf,KAAL,CAAWmB,MAAX,CAAkB,KAAKnB,KAAL,CAAWe,QAA7B,IAAyC2E,QAAQ,CAACM,SAAD,CAA1F;AACAhH,QAAAA,GAAG,CAAC4G,YAAJ,CAAiB,KAAK5F,KAAL,CAAWY,MAA5B,EAAoC,KAAKZ,KAAL,CAAWmB,MAA/C,EAAuD,CAAvD,EAA0D,EAA1D,EAA8DI,OAA9D,EAAuE,KAAKvB,KAAL,CAAWa,KAAlF;AAEH;AACJ,KA3XuB;;AAAA,SA4XxB2G,UA5XwB,GA4XX,CAACN,MAAD,EAAS1B,MAAT,KAAoB;AAC7B,WAAKxF,KAAL,CAAWiC,YAAX,CAAwBiF,MAAxB,IAAkC1B,MAAlC;AAEAzC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhD,KAAL,CAAWiC,YAAvB;AACH,KAhYuB;;AAAA,SAiYxBC,QAjYwB,GAiYb,MAAM;AACba,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,WAAKL,QAAL,CAAc;AAAET,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACH,KApYuB;;AAAA,SAqYxBuF,UArYwB,GAqYVpC,CAAD,IAAM;AACfA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAK3C,QAAL,CAAc;AAAEpC,QAAAA,UAAU,EAAE;AAAd,OAAd;AAEH,KAzYuB;;AAAA,SA0YxBmH,SA1YwB,GA0YX9G,MAAD,IAAY;AAGpB,WAAK+B,QAAL,CAAc;AAAE/B,QAAAA,MAAM,EAAEA;AAAV,OAAd;AACA,WAAK+B,QAAL,CAAc;AAAEpC,QAAAA,UAAU,EAAE;AAAd,OAAd;AACA,UAAIoH,UAAU,GAAG;AACbC,QAAAA,cAAc,EAAE,KAAKA,cADR;AAEbhE,QAAAA,mBAAmB,EAAE,KAAKA,mBAFb;AAGbI,QAAAA,eAAe,EAAE,KAAKA,eAHT;AAIbe,QAAAA,gBAAgB,EAAE,KAAKA,gBAJV;AAKbhB,QAAAA,gBAAgB,EAAE,KAAKA,gBALV;AAMbQ,QAAAA,kBAAkB,EAAE,KAAKA,kBANZ;AAObH,QAAAA,aAAa,EAAE,KAAKA,aAPP;AAQbkD,QAAAA,OAAO,EAAE,KAAKA,OARD;AASb7F,QAAAA,YAAY,EAAE,KAAKA,YATN;AAUboG,QAAAA,iBAAiB,EAAE,KAAKA,iBAVX;AAWbL,QAAAA,UAAU,EAAE,KAAKA,UAXJ;AAYbtF,QAAAA,QAAQ,EAAE,KAAKA;AAZF,OAAjB;AAeAlD,MAAAA,GAAG,CAAC8I,aAAJ,CAAkBlH,MAAlB,EAA0B,KAAKZ,KAAL,CAAWe,QAArC,EAA+C4G,UAA/C,EAA2DlF,IAA3D,CAAgE,MAAM;AAClE,aAAKQ,OAAL,CAAa,KAAKjD,KAAL,CAAWY,MAAxB;AACAmC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAKhD,KAAL,CAAWkB,WAAvB;AACH,OAHD;AAIH,KAlauB;;AAAA,SAmaxB2G,iBAnawB,GAmaJ,MAAM;AACtB9E,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,WAAKL,QAAL,CAAc;AAAEb,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACH,KAtauB;;AAAA,SAuaxB8F,cAvawB,GAuaNG,UAAD,IAAgB;AAE7B,UAAIvH,cAAc,GAAG,KAAKR,KAAL,CAAWC,UAAX,CAAsB+H,MAAtB,CAA6B,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAC5D,eAAOD,CAAC,CAACvE,SAAF,CAAYyE,IAAZ,CAAkBC,OAAD,IAAaA,OAAO,CAACtE,GAAR,IAAeiE,UAA7C,CAAP;AACH,OAFoB,CAArB;AAGA,UAAI7H,cAAc,GAAGM,cAAc,CAAC,CAAD,CAAd,CAAkBkD,SAAlB,CAA4BsE,MAA5B,CAAoCC,CAAD,IAAOA,CAAC,CAACnE,GAAF,IAASiE,UAAnD,CAArB;AACA,WAAKpF,QAAL,CAAc;AACVzC,QAAAA,cAAc,EAAEA,cAAc,CAAC,CAAD,CADpB;AAEVoB,QAAAA,OAAO,EAAE;AAFC,OAAd;AAKA,YAAM+G,gBAAgB,GAAG,CAAC,OAAD,CAAzB;;AAEA,eAASC,kBAAT,CAA4BF,OAA5B,EAAqC;AACjCC,QAAAA,gBAAgB,CAACE,OAAjB,CAAyBC,cAAc,IACnCJ,OAAO,CAACK,aAAR,CACI,IAAIC,UAAJ,CAAeF,cAAf,EAA+B;AAC3BG,UAAAA,IAAI,EAAEC,MADqB;AAE3BC,UAAAA,OAAO,EAAE,IAFkB;AAG3BC,UAAAA,UAAU,EAAE,IAHe;AAI3BC,UAAAA,OAAO,EAAE;AAJkB,SAA/B,CADJ,CADJ;AAUH;;AAED,UAAIX,OAAO,GAAGY,QAAQ,CAACC,aAAT,CAAuB,wBAAwBlB,UAAxB,GAAqC,2BAA5D,CAAd;AACAO,MAAAA,kBAAkB,CAACF,OAAD,CAAlB;AACA,WAAKc,UAAL,CAAgBhE,OAAhB,CAAwBC,KAAxB;AAGH,KAtcuB;;AAAA,SAucxB5C,gBAvcwB,GAucL,MAAM;AACrB,UAAI,KAAKvC,KAAL,CAAWY,MAAX,IAAqB,EAAzB,EAA6B;AACzB,cAAMyH,gBAAgB,GAAG,CAAC,OAAD,CAAzB;;AAGA,iBAASC,kBAAT,CAA4BF,OAA5B,EAAqC;AACjCC,UAAAA,gBAAgB,CAACE,OAAjB,CAAyBC,cAAc,IACnCJ,OAAO,CAACK,aAAR,CACI,IAAIC,UAAJ,CAAeF,cAAf,EAA+B;AAC3BG,YAAAA,IAAI,EAAEC,MADqB;AAE3BC,YAAAA,OAAO,EAAE,IAFkB;AAG3BC,YAAAA,UAAU,EAAE,IAHe;AAI3BC,YAAAA,OAAO,EAAE;AAJkB,WAA/B,CADJ,CADJ;AAUH;;AAED,YAAIX,OAAO,GAAGY,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAAd;AACAX,QAAAA,kBAAkB,CAACF,OAAD,CAAlB;AACH;AACJ,KA5duB;;AAAA,SA6dxBe,gBA7dwB,GA6dJC,KAAD,IAAW;AAC1B;AACA,WAAKzG,QAAL,CAAc;AAAEf,QAAAA,UAAU,EAAEwH,KAAK,CAACxC,MAAN,CAAaX;AAA3B,OAAd;AACH,KAheuB;;AAAA,SAiexBoD,eAjewB,GAieLD,KAAD,IAAW;AACzBA,MAAAA,KAAK,CAAC9D,cAAN;AACA,WAAK3C,QAAL,CAAc;AAAEd,QAAAA,mBAAmB,EAAE;AAAvB,OAAd;AACA7C,MAAAA,GAAG,CAACqK,eAAJ,CAAoB,KAAKrJ,KAAL,CAAWY,MAA/B,EAAuC,KAAKZ,KAAL,CAAWgB,UAAlD,EAA8D,KAAKhB,KAAL,CAAW4B,UAAzE;AACH,KAreuB;AAAA;;AA4CxB0H,EAAAA,WAAW,GAAG;AACV;AACA,UAAMnC,OAAO,GAAG,IAAIvH,OAAJ,EAAhB,CAFU,CAGV;AACA;AACA;;AACA,SAAK+C,QAAL,CAAc;AACV3B,MAAAA,UAAU,EAAEmG,OAAO,CAACoC,GAAR,CAAY,YAAZ,KAA6B,EAD/B;AAEVxI,MAAAA,QAAQ,EAAEoG,OAAO,CAACoC,GAAR,CAAY,UAAZ,KAA2B;AAF3B,KAAd;AAKH;;AAEDC,EAAAA,iBAAiB,GAAG;AAEhBxK,IAAAA,GAAG,CAACyK,WAAJ,GAAkBhH,IAAlB,CACKC,GAAD,IAAS;AACLK,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;AACA1D,MAAAA,GAAG,CAAC0K,UAAJ,CAAehH,GAAG,CAACE,IAAnB;AACH,KAJL;AAKA,SAAK0G,WAAL;AACA,SAAK9G,QAAL;AACA,SAAK0G,UAAL,gBAAkBpK,KAAK,CAAC6K,SAAN,EAAlB;AACA,SAAK1E,WAAL,gBAAmBnG,KAAK,CAAC6K,SAAN,EAAnB;AAGH;;AAgaDC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAG,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAG,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC,KAAK5J,KAAL,CAAWO,UAAX,gBAAwB;AAAI,MAAA,SAAS,EAAG,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B,KAAKP,KAAL,CAAWgB,UAAtC,CAAxB,GAAiF,EADlF,CADJ,EAIM,KAAKhB,KAAL,CAAWI,YAAX,gBACF,oBAAC,MAAD;AACA,MAAA,YAAY,EAAI,KAAKJ,KAAL,CAAWyB,YAD3B;AAEI,MAAA,IAAI,EAAI,KAAKzB,KAAL,CAAWqB,QAFvB;AAGI,MAAA,OAAO,EAAI,KAAKrB,KAAL,CAAWuB,OAH1B;AAII,MAAA,QAAQ,EAAI,KAAKvB,KAAL,CAAWE,cAJ3B;AAKI,MAAA,KAAK,EAAI,KAAKF,KAAL,CAAWoC,KALxB;AAMI,MAAA,EAAE,EAAI,KAAKpC,KAAL,CAAWgB,UANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADE,GAYF,KAAKhB,KAAL,CAAWG,YAAX,gBACA,oBAAC,MAAD;AACI,MAAA,YAAY,EAAI,KAAKuG,YADzB;AAEI,MAAA,cAAc,EAAI,KAAKb,cAF3B;AAGI,MAAA,QAAQ,EAAI,KAAK7F,KAAL,CAAWqB,QAH3B;AAII,MAAA,EAAE,EAAI,KAAKrB,KAAL,CAAWgB,UAJrB;AAKI,MAAA,GAAG,EAAI,KAAKiE,WALhB;AAMI,MAAA,OAAO,EAAI,KAAKjF,KAAL,CAAWgF,aAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,GASE,EAzBN,EA0BC,KAAKhF,KAAL,CAAWE,cAAX,gBACG,oBAAC,QAAD;AACI,MAAA,QAAQ,EAAI,KAAKF,KAAL,CAAWE,cAD3B;AAEI,MAAA,IAAI,EAAI,KAAK2E,MAFjB;AAGI,MAAA,OAAO,EAAI,KAAK7E,KAAL,CAAWsB,OAH1B;AAII,MAAA,GAAG,EAAI,KAAK4H,UAJhB,CAKI;AACA;AANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAUC,EApCF,EAqCC,KAAKlJ,KAAL,CAAWO,UAAX,GACG,KAAKP,KAAL,CAAWe,QAAX,IAAuB,EAAvB,gBACA;AAAK,MAAA,SAAS,EAAG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,OAAD;AAAS,MAAA,gBAAgB,EAAI,KAAK+F,gBAAlC;AACQ,MAAA,eAAe,EAAI,KAAKG,eADhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADA,gBAMA;AAAK,MAAA,SAAS,EAAG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA,oBAAC,QAAD;AACI,MAAA,SAAS,EAAG,KAAKS,SADrB;AAEI,MAAA,aAAa,EAAI,KAAKV,aAF1B;AAGI,MAAA,eAAe,EAAI,KAAKH,eAH5B;AAII,MAAA,KAAK,EAAI,KAAK7G,KAAL,CAAWU,KAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,CAPH,GAiBG,KAAKV,KAAL,CAAWa,KAAX,IAAoB,CAApB,GACA,KAAKb,KAAL,CAAWkC,QAAX,gBACA,oBAAC,QAAD;AACA,MAAA,YAAY,EAAI,KAAKlC,KAAL,CAAWiC,YAD3B;AAEA,MAAA,MAAM,EAAI,KAAKjC,KAAL,CAAWqD,cAFrB;AAGA,MAAA,WAAW,EAAI,KAAKrD,KAAL,CAAWmB,MAH1B;AAIA,MAAA,WAAW,EAAI,KAAKnB,KAAL,CAAWkB,WAJ1B;AAKA,MAAA,WAAW,EAAI,KAAKlB,KAAL,CAAWsD,aAAX,CAAyBI,SAAzB,CAAmC,CAAnC,EAAsC8B,MALrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,gBAUA;AAAK,MAAA,SAAS,EAAG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,aAAD;AAEA,MAAA,cAAc,EAAI,KAAKxF,KAAL,CAAW6B,mBAF7B;AAGA,MAAA,WAAW,EAAI,KAAKsH,gBAHpB;AAIA,MAAA,UAAU,EAAI,KAAKE,eAJnB;AAKA,MAAA,KAAK,EAAI,KAAKrJ,KAAL,CAAW8B,aALpB;AAMA,MAAA,OAAO,EAAI,KAAK9B,KAAL,CAAWqD,cAAX,CAA0B,KAAKrD,KAAL,CAAWe,QAArC,CANX;AAOA,MAAA,QAAQ,EAAI,KAAKf,KAAL,CAAWsD,aAPvB;AAQA,MAAA,YAAY,EAAI,KAAKoD,YARrB;AASA,MAAA,WAAW,EAAI,KAAKtB,mBATpB;AAUA,MAAA,MAAM,EAAI,KAAKpF,KAAL,CAAWqD,cAVrB;AAWA,MAAA,WAAW,EAAI,KAAKrD,KAAL,CAAWmB,MAX1B;AAYA,MAAA,WAAW,EAAI,KAAKnB,KAAL,CAAWkB,WAZ1B;AAaA,MAAA,IAAI,EAAI,KAAKlB,KAAL,CAAWoB,IAbnB;AAcA,MAAA,QAAQ,EAAE,KAAKpB,KAAL,CAAW+B,qBAdrB;AAeA,MAAA,KAAK,EAAI,KAAK/B,KAAL,CAAWoC,KAfpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAXA,gBAgCJ;AAAK,MAAA,SAAS,EAAG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAK,MAAA,SAAS,EAAG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAED,oBAAC,aAAD;AACS,MAAA,QAAQ,EAAG,KAAKpC,KAAL,CAAW2B,qBAD/B;AAES,MAAA,QAAQ,EAAI,KAAK3B,KAAL,CAAWW,QAFhC;AAGS,MAAA,cAAc,EAAI,KAAKX,KAAL,CAAWQ,cAHtC;AAIS,MAAA,eAAe,EAAI,KAAKiE,eAJjC;AAKS,MAAA,UAAU,EAAI,KAAKzE,KAAL,CAAWC,UALlC;AAMS,MAAA,SAAS,EAAI,KAAKD,KAAL,CAAWoD,gBANjC;AAOS,MAAA,KAAK,EAAI,KAAKpD,KAAL,CAAWa,KAP7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFC,CADA,eAYA,oBAAC,WAAD;AACI,MAAA,MAAM,EAAI,KAAKb,KAAL,CAAWmB,MADzB;AAEI,MAAA,WAAW,EAAI,KAAKnB,KAAL,CAAWkB,WAF9B;AAGI,MAAA,IAAI,EAAI,KAAKlB,KAAL,CAAWoB,IAHvB;AAII,MAAA,UAAU,EAAI,KAAKqG,UAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZA,eAkBA,oBAAC,iBAAD;AACA,MAAA,eAAe,EAAI,KAAKhD,eADxB;AAEA,MAAA,cAAc,EAAI,KAAKzE,KAAL,CAAWQ,cAF7B;AAGA,MAAA,UAAU,EAAI,KAAKR,KAAL,CAAWC,UAHzB;AAIA,MAAA,YAAY,EAAI,KAAK0E,YAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlBA,CAtFA,CADJ;AAwHH;;AA/lBuB;;AAkmB5B,eAAe5E,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport API from \"./Utils/API\";\n\nimport Speech from 'react-speech';\nimport JeopardyBoard from './Components/JeopardyBoard/JeopardyBoard'\nimport Contestants from './Components/JeopardyBoard/Contestants'\nimport Question from './Components/JeopardyBoard/Question'\nimport Answer from './Components/JeopardyBoard/Answer'\nimport Result from './Components/JeopardyBoard/Result'\nimport FinalJeopardy from './Components/JeopardyBoard/FinalJeopardy'\nimport GameOver from './Components/JeopardyBoard/GameOver'\n\nimport MainMenu from './Components/MainMenu'\nimport Welcome from './Components/WelcomeScreen'\nimport { withCookies, Cookies } from 'react-cookie';\nimport { instanceOf } from 'prop-types';\n\nimport SpeechRecognition from './Components/SpeechRecognition/SpeechRecognition';\n\n\n\n\n\n\n\nclass App extends Component {\n\n\n    state = {\n\n        categories: [],\n        activeQuestion: \"\",\n        activeAnswer: false,\n        activeResult: false,\n        timer: \"\",\n        userScore: 0,\n        mainScreen: true,\n        activeCategory: -1,\n        newGameTitle: \"\",\n        games: [],\n        answered: [],\n        gameID: \"\",\n        round: 0,\n        timestamp: \"No Timestamp yet\",\n        playerID: \"\",\n        playerName: '',\n        playerNum: 0,\n        contestants: [],\n        scores: [],\n        turn: 1,\n        buzzedIn: \"\",\n        canbuzz: true,\n        correct: false,\n        resultTimer: \"\",\n        questionOver: false,\n        triedToAnswer: 0,\n        totalQuestionsInRound: 0,\n        finalWager: 0,\n        finalWagerSubmitted: false,\n        finalQuestion: false,\n        finalQuestionAnswered: false,\n        finalResults: false,\n        finalGuesses: {},\n        gameOver: false,\n        activeAnswerTimer: \"\",\n        guess: \"\",\n        resetSpeechTimer: setInterval(() => { this.resetSpeechRecog() }, 5000)\n    }\n\n    loadCookies() {\n        // cookies = instanceOf(Cookies).isRequired;\n        const cookies = new Cookies();\n        // console.log(Cookies)\n        // console.log(cookies.get(\"playerName\"));\n        // cookies.set(\"playerName\", \"juancho\")\n        this.setState({\n            playerName: cookies.get(\"playerName\") || \"\",\n            playerID: cookies.get(\"playerID\") || \"\",\n\n        })\n    }\n\n    componentDidMount() {\n\n        API.getSocketIP().then(\n            (res) => {\n                console.log(res);\n                API.initSocket(res.data)\n            })\n        this.loadCookies()\n        this.getGames();\n        this.buzzButton = React.createRef();\n        this.answerField = React.createRef();\n\n\n    }\n    getGames = () => {\n        API.getGames()\n            .then(res => this.setState({\n                games: res.data\n            }))\n            .catch(err => console.log(err))\n    }\n\n    getGame = (gameID) => {\n        API.getCategories(gameID)\n            .then((res) => {\n                let categories = res.data.jeopardyCategories\n                // console.log(res.data)\n                let gameOver = false\n                if (res.data.round == 2) {\n                    categories = res.data.doubleCategories\n                }\n                if (res.data.round == 4) {\n                    gameOver = true\n                }\n                // console.log(\"round \")\n                // console.log(this.state.round)\n                if (res.data.round == 3) {\n                    let preFinalScores = { ...this.state.scores }\n                    this.setState({ preFinalScores: preFinalScores })\n                }\n                this.setState({\n                    categories: categories,\n                    doubleCategories: res.data.doubleCategories,\n                    finalJeopardy: res.data.finalJeopardy,\n                    games: [],\n                    answered: res.data.answered,\n                    round: res.data.round,\n                    gameOver: gameOver\n                })\n                // console.log(res.)\n\n\n                let qsInRound = 0;\n                for (var i = 0; i < categories.length; i++) {\n                    qsInRound += categories[i].questions.length\n                }\n                this.setState({ totalQuestionsInRound: qsInRound })\n                if (res.data.answered.length == qsInRound) {\n                    this.startNextRound()\n                }\n            })\n            .catch(err => console.log(err));\n\n    }\n    handleNewContestant = (players) => {\n        this.setState({ contestants: players })\n        for (var i = 0; i < players.length; i++) {\n            if (this.state.playerID == players[i]._id) {\n                this.state.playerNum = i + 1;\n            }\n        }\n    }\n    handleScoresInit = (scores) => {\n\n        this.setState({ scores: scores, preFinalScores: scores })\n\n    }\n    handleNewScores = (scores, turn, guess, correct) => {\n        // console.log(turn)\n        if (this.state.round != 3) {\n            if (turn != 0 && turn != undefined) {\n                this.setState({ turn: turn });\n            }\n            if (correct) {\n                this.setState({\n                    scores: scores,\n                    guess: guess,\n                    correct: correct,\n                    activeResult: true,\n                    resultTimer: setTimeout(() => {\n                        this.closeQuestionFinal()\n                    }, 1500)\n                })\n            } else {\n\n                this.setState({\n                    scores: scores,\n                    guess: guess,\n                    correct: correct,\n                    activeResult: true,\n                    triedToAnswer: this.state.triedToAnswer + 1,\n                    resultTimer: setTimeout(() => {\n                        this.closeQuestion()\n                    }, 1500)\n                })\n\n            }\n        } else {\n            this.setState({\n                scores: scores\n            })\n        }\n\n    }\n    questionOver = (questionid) => {\n        if (this.state.activeQuestion._id == questionid) {\n            this.setState({\n                activeResult: true,\n                triedToAnswer: 0,\n                questionOver: true,\n                resultTimer: setTimeout(() => {\n                    this.closeQuestionFinal()\n                }, 1500)\n            })\n        }\n    }\n    closeQuestionFinal = () => {\n        this.setState({\n            timer: \"\",\n            activeQuestion: \"\",\n            guess: \"\",\n\n            activeAnswer: false,\n            activeResult: false,\n            questionOver: false\n        })\n        if (this.state.totalQuestionsInRound == this.state.answered.length) {\n            this.startNextRound()\n\n        }\n    }\n    startNextRound = () => {\n        if (this.state.round == 2) {\n            this.setState({ preFinalScores: this.state.scores, round: 3, answered: [], categories: this.state.doubleCategories })\n            API.updateRound(this.state.gameID, 3)\n\n        }\n        if (this.state.round == 1) {\n            this.setState({ round: 2, answered: [], categories: this.state.doubleCategories })\n            API.updateRound(this.state.gameID, 2)\n            let qsInRound = 0;\n            for (var i = 0; i < this.state.categories.length; i++) {\n                qsInRound += this.state.categories[i].questions.length\n            }\n            this.setState({ totalQuestionsInRound: qsInRound })\n        }\n\n    }\n    handleAnswerUpdate = (answers) => {\n        this.setState({ answered: answers })\n    }\n    closeQuestion = () => {\n        // clearTimeout(this.state.timer)\n        this.setState({\n            timer: \"\",\n            // activeQuestion: \"\",\n            guess: \"\",\n            activeAnswer: false,\n            activeResult: false\n        })\n        if (this.state.triedToAnswer == this.state.contestants.length) {\n\n            this.questionOver(this.state.activeQuestion._id)\n\n        }\n    }\n    displayQuestion = (questionid) => {\n        if (this.state.turn == this.state.playerNum) {\n            API.selectQuestion(questionid, this.state.gameID)\n        }\n    }\n    pickCategory = (index1) => {\n        console.log(index1)\n        this.setState({\n            activeCategory: index1\n        })\n\n    }\n    buzzIn = () => {\n        API.buzz(this.state.gameID, this.state.playerName, this.state.activeQuestion._id)\n    }\n    handleBuzzUpdate = (playerName) => {\n        this.setState({\n            activeAnswer: true,\n            buzzedIn: playerName,\n            answerSeconds: 6,\n            activeAnswerTimer: setInterval(() => {\n                this.setState({ answerSeconds: this.state.answerSeconds - 1 })\n            }, 1000)\n        })\n        this.answerField.current.focus()\n\n    }\n    answerFinalQuestion = (e) => {\n        e.preventDefault();\n\n        let correctAnswer = this.state.finalJeopardy.questions[0].answer\n        let correct = false\n        this.setState({ finalQuestionAnswered: true })\n        if (this.state.guess != \"\") {\n            if (this.state.guess.toLowerCase() == correctAnswer.toLowerCase()) {\n                console.log(\"Correct\")\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(this.state.finalWager)\n            } else {\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(this.state.finalWager)\n            }\n        }\n        API.submitFinal(this.state.gameID, this.state.playerName, this.state.guess)\n        API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct, this.state.round)\n    }\n    answerQuestion = (e) => {\n        e.preventDefault();\n        if (this.state.guess != \"\") {\n            let possibleAnswers = []\n\n            clearInterval(this.state.activeAnswerTimer)\n            let answerVal = this.state.activeQuestion.value.replace('$', '');\n            let turnChange = false;\n            let correct\n\n            let guess = this.state.guess\n            let correctAnswer = this.state.activeQuestion.answer.toLowerCase()\n\n            var matcher = /[a-z]+/gi;\n            correctAnswer = correctAnswer.match(matcher);\n            if (correctAnswer[0].toLowerCase() == \"the\" || correctAnswer[0].toLowerCase() == \"a\") {\n                possibleAnswers.push(correctAnswer.join('').toLowerCase())\n                correctAnswer.splice(0, 1)\n            }\n            correctAnswer = correctAnswer.join('').toLowerCase();\n            possibleAnswers.push(correctAnswer)\n\n\n            if (guess != \"\") {\n                guess = guess.match(matcher);\n                guess = guess.join('').toLowerCase();\n            }\n            console.log(possibleAnswers);\n            console.log(guess);\n\n\n\n            // let userScore = this.state.scores[this.state.playerID];\n            if (possibleAnswers.includes(guess)) {\n                console.log(\"Correct\")\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(answerVal)\n                turnChange = true;\n                correct = true;\n            } else {\n                this.setState({ canbuzz: false })\n                console.log(correctAnswer)\n                correct = false;\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal)\n            }\n\n            // API.closeQuestion(this.state.gameID);\n            if (turnChange) {\n                API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct, this.state.round)\n            } else {\n                API.submitScores(this.state.gameID, this.state.scores, 0, this.state.guess, correct, this.state.round)\n            }\n        }\n    }\n\n    handleAnswer = (event) => {\n        this.setState({\n            guess: event.target.value\n        })\n    }\n    handleGameTitle = (event) => {\n        this.setState({\n            newGameTitle: event.target.value\n        })\n    }\n    handlePlayerName = (event) => {\n        this.setState({\n            newPlayerName: event.target.value\n        })\n    }\n    createNewGame = (e) => {\n        e.preventDefault();\n        API.createNewGame(this.state.newGameTitle)\n            .then(() => {\n                console.log(\"getting games\")\n                this.getGames();\n            })\n            .catch(err => console.log(err));\n    }\n    createNewPlayer = (e) => {\n        e.preventDefault();\n        API.createNewPlayer(this.state.newPlayerName)\n            .then((player) => {\n                const cookies = new Cookies();\n                cookies.set(\"playerID\", player.data._id);\n                cookies.set(\"playerName\", player.data.name);\n                this.setState({ playerID: player.data._id })\n                this.setState({ playerName: player.data.name })\n\n            })\n            .catch(err => console.log(err));\n    }\n    timesUp = (playerName, questionId) => {\n        clearInterval(this.state.activeAnswerTimer)\n\n        if (!this.state.activeResult && playerName == this.state.playerName && this.state.playerName == this.state.buzzedIn && this.state.activeAnswer && this.state.activeQuestion._id == questionId) {\n            this.setState({ canbuzz: false })\n            let correct = false;\n            let answerVal = this.state.activeQuestion.value.replace('$', '');\n            this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal)\n            API.submitScores(this.state.gameID, this.state.scores, 0, \"\", correct, this.state.round)\n\n        }\n    }\n    finalGuess = (player, answer) => {\n        this.state.finalGuesses[player] = answer\n\n        console.log(this.state.finalGuesses)\n    }\n    gameOver = () => {\n        console.log(\"game Over\")\n        this.setState({ gameOver: true })\n    }\n    backToMain = (e) =>{\n        e.preventDefault()\n        this.setState({ mainScreen: true });\n\n    }\n    startGame = (gameID) => {\n\n\n        this.setState({ gameID: gameID });\n        this.setState({ mainScreen: false });\n        let reactFuncs = {\n            handleQuestion: this.handleQuestion,\n            handleNewContestant: this.handleNewContestant,\n            handleNewScores: this.handleNewScores,\n            handleBuzzUpdate: this.handleBuzzUpdate,\n            handleScoresInit: this.handleScoresInit,\n            handleAnswerUpdate: this.handleAnswerUpdate,\n            closeQuestion: this.closeQuestion,\n            timesUp: this.timesUp,\n            questionOver: this.questionOver,\n            initFinalQuestion: this.initFinalQuestion,\n            finalGuess: this.finalGuess,\n            gameOver: this.gameOver\n        }\n\n        API.connectToGame(gameID, this.state.playerID, reactFuncs).then(() => {\n            this.getGame(this.state.gameID);\n            console.log(this.state.contestants)\n        })\n    }\n    initFinalQuestion = () => {\n        console.log(\"final question ready\")\n        this.setState({ finalQuestion: true })\n    }\n    handleQuestion = (questionID) => {\n\n        let activeCategory = this.state.categories.filter((x, index) => {\n            return x.questions.some((element) => element._id == questionID);\n        })\n        let activeQuestion = activeCategory[0].questions.filter((x) => x._id == questionID);\n        this.setState({\n            activeQuestion: activeQuestion[0],\n            canbuzz: true\n\n        })\n        const mouseClickEvents = ['click'];\n\n        function simulateMouseClick(element) {\n            mouseClickEvents.forEach(mouseEventType =>\n                element.dispatchEvent(\n                    new MouseEvent(mouseEventType, {\n                        view: window,\n                        bubbles: true,\n                        cancelable: true,\n                        buttons: 1\n                    })\n                )\n            );\n        }\n\n        var element = document.querySelector('.question-name[id=\"' + questionID + '\"] + .rs-container button');\n        simulateMouseClick(element);\n        this.buzzButton.current.focus()\n\n\n    }\n    resetSpeechRecog = () => {\n        if (this.state.gameID != \"\") {\n            const mouseClickEvents = ['click'];\n\n\n            function simulateMouseClick(element) {\n                mouseClickEvents.forEach(mouseEventType =>\n                    element.dispatchEvent(\n                        new MouseEvent(mouseEventType, {\n                            view: window,\n                            bubbles: true,\n                            cancelable: true,\n                            buttons: 1\n                        })\n                    )\n                );\n            }\n\n            var element = document.querySelector('#resetSpeech');\n            simulateMouseClick(element);\n        }\n    }\n    handleFinalWager = (wager) => {\n        // console.log(wager.target.value)\n        this.setState({ finalWager: wager.target.value })\n    }\n    placeFinalWager = (wager) => {\n        wager.preventDefault();\n        this.setState({ finalWagerSubmitted: true })\n        API.placeFinalWager(this.state.gameID, this.state.playerName, this.state.finalWager)\n    }\n    render() {\n        return (\n            <div className = \"jeopardy-game\">\n                <div className = \"utility-menu\">\n                {this.state.mainScreen ? <h3 className = \"my-name\">{this.state.playerName}</h3> : \"\"}\n                </div>\n                 {this.state.activeResult ? \n                <Result \n                questionOver = {this.state.questionOver}\n                    buzz = {this.state.buzzedIn}\n                    correct = {this.state.correct}\n                    question = {this.state.activeQuestion}\n                    guess = {this.state.guess}\n                    me = {this.state.playerName}\n\n                />\n                \n                : \n                this.state.activeAnswer ?\n                <Answer \n                    handleAnswer = {this.handleAnswer}\n                    answerQuestion = {this.answerQuestion}\n                    buzzedIn = {this.state.buzzedIn}\n                    me = {this.state.playerName}\n                    ref = {this.answerField}\n                    seconds = {this.state.answerSeconds}\n                />\n                : \"\"}\n            {this.state.activeQuestion ? \n                <Question \n                    question = {this.state.activeQuestion}\n                    buzz = {this.buzzIn}\n                    canbuzz = {this.state.canbuzz}\n                    ref = {this.buzzButton}\n                    // handleAnswer = {this.handleAnswer}\n                    // answerQuestion = {this.answerQuestion}\n                />\n                \n            : \"\"}\n            {this.state.mainScreen ? \n                this.state.playerID == \"\" ?\n                <div className = \"player-reg\">\n                    <Welcome handlePlayerName = {this.handlePlayerName}\n                            createNewPlayer = {this.createNewPlayer}/>\n                </div>\n                :\n                <div className = \"main-menu\">\n\n                <MainMenu   \n                    startGame ={this.startGame}\n                    createNewGame = {this.createNewGame} \n                    handleGameTitle = {this.handleGameTitle} \n                    games = {this.state.games}>\n                </MainMenu>\n                </div>\n                :\n                this.state.round >= 3?\n                this.state.gameOver ?\n                <GameOver\n                finalGuesses = {this.state.finalGuesses}\n                scores = {this.state.preFinalScores}\n                finalScores = {this.state.scores}\n                contestants = {this.state.contestants} \n                finalAnswer = {this.state.finalJeopardy.questions[0].answer}\n\n                />\n                :\n                <div className = \"jeopardy-board\">\n                <FinalJeopardy\n        \n                wagerSubmitted = {this.state.finalWagerSubmitted}\n                handleWager = {this.handleFinalWager}\n                placeWager = {this.placeFinalWager}\n                ready = {this.state.finalQuestion}\n                myscore = {this.state.preFinalScores[this.state.playerID]}\n                question = {this.state.finalJeopardy}\n                handleAnswer = {this.handleAnswer}\n                finalAnswer = {this.answerFinalQuestion}\n                scores = {this.state.preFinalScores}\n                finalScores = {this.state.scores}\n                contestants = {this.state.contestants} \n                turn = {this.state.turn}\n                answered={this.state.finalQuestionAnswered}\n                guess = {this.state.guess}\n\n                />\n                </div>\n                :\n            <div className = \"jeopardy-board\">\n            <div className = \"just-the-board\">\n\n           <JeopardyBoard  \n                    endRound= {this.state.totalQuestionsInRound}\n                    answered = {this.state.answered}\n                    activeCategory = {this.state.activeCategory} \n                    displayQuestion = {this.displayQuestion} \n                    categories = {this.state.categories}\n                    doubleCat = {this.state.doubleCategories}\n                    round = {this.state.round}/>\n            </div>\n            <Contestants\n                scores = {this.state.scores}\n                contestants = {this.state.contestants} \n                turn = {this.state.turn}\n                backToMenu = {this.backToMain}\n            />\n            <SpeechRecognition \n            displayQuestion = {this.displayQuestion} \n            activeCategory = {this.state.activeCategory} \n            categories = {this.state.categories} \n            pickCategory = {this.pickCategory}\n        ></SpeechRecognition>\n        </div>\n    }\n         \n       </div>\n\n\n        )\n\n\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}