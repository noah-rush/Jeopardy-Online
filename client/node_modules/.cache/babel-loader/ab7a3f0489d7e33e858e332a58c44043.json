{"ast":null,"code":"var _jsxFileName = \"/home/noah/jeopardy-app/client/src/Components/SpeechRecognition/SpeechRecognition.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\nconst propTypes = {\n  // Props injected by SpeechRecognition\n  transcript: PropTypes.string,\n  resetTranscript: PropTypes.func,\n  browserSupportsSpeechRecognition: PropTypes.bool\n};\n\nconst Dictaphone = ({\n  transcript,\n  resetTranscript,\n  browserSupportsSpeechRecognition,\n  categories,\n  pickCategory,\n  activeCategory,\n  displayQuestion\n}) => {\n  if (!browserSupportsSpeechRecognition) {\n    return null;\n  }\n\n  if (transcript != \"\") {\n    var matcher = /[a-z]+/gi;\n    console.log(transcript);\n    let guess = transcript.toLowerCase().match(matcher);\n\n    if (guess != null) {\n      guess = guess.join('');\n    }\n\n    console.log(guess);\n    console.log(activeCategory);\n\n    for (var i = 0; i < categories.length; i++) {\n      // var matcher = /[a-z]+/gi;\n      let category = categories[i].name.toLowerCase().match(matcher);\n      category = category.join(''); // console.log(category)\n      // console.log(guess)\n\n      if (guess == category) {\n        // console.log(\"categoryMatch\")\n        pickCategory(i);\n        resetTranscript();\n      }\n    }\n\n    if (activeCategory > -1) {\n      for (var i = 0; i < categories[activeCategory].questions.length; i++) {\n        // console.log(categories[activeCategory].questions[i].value.replace(\"$\", \"\"))\n        if (transcript == categories[activeCategory].questions[i].value.replace(\"$\", \"\")) {\n          // console.log(\"valueMatch\")\n          // pic/kCategory(i);\n          // resetTranscript();\n          resetTranscript();\n          displayQuestion(categories[activeCategory].questions[i]._id);\n        }\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"resetSpeech\",\n    onClick: resetTranscript,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Reset\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, transcript));\n};\n\n_c = Dictaphone;\nDictaphone.propTypes = propTypes;\nexport default _c2 = SpeechRecognition(Dictaphone);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Dictaphone\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/Components/SpeechRecognition/SpeechRecognition.js"],"names":["React","Component","PropTypes","SpeechRecognition","propTypes","transcript","string","resetTranscript","func","browserSupportsSpeechRecognition","bool","Dictaphone","categories","pickCategory","activeCategory","displayQuestion","matcher","console","log","guess","toLowerCase","match","join","i","length","category","name","questions","value","replace","_id"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AAEA,MAAMC,SAAS,GAAG;AACd;AACAC,EAAAA,UAAU,EAAEH,SAAS,CAACI,MAFR;AAGdC,EAAAA,eAAe,EAAEL,SAAS,CAACM,IAHb;AAIdC,EAAAA,gCAAgC,EAAEP,SAAS,CAACQ;AAJ9B,CAAlB;;AAOA,MAAMC,UAAU,GAAG,CAAC;AAChBN,EAAAA,UADgB;AAEhBE,EAAAA,eAFgB;AAGhBE,EAAAA,gCAHgB;AAIhBG,EAAAA,UAJgB;AAKhBC,EAAAA,YALgB;AAMhBC,EAAAA,cANgB;AAOhBC,EAAAA;AAPgB,CAAD,KAQb;AACF,MAAI,CAACN,gCAAL,EAAuC;AACnC,WAAO,IAAP;AACH;;AACD,MAAIJ,UAAU,IAAI,EAAlB,EAAsB;AAElB,QAAIW,OAAO,GAAG,UAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYb,UAAZ;AACA,QAAIc,KAAK,GAAGd,UAAU,CAACe,WAAX,GAAyBC,KAAzB,CAA+BL,OAA/B,CAAZ;;AACA,QAAIG,KAAK,IAAI,IAAb,EAAmB;AACfA,MAAAA,KAAK,GAAGA,KAAK,CAACG,IAAN,CAAW,EAAX,CAAR;AACH;;AACDL,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYJ,cAAZ;;AACA,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,UAAU,CAACY,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC;AACA,UAAIE,QAAQ,GAAGb,UAAU,CAACW,CAAD,CAAV,CAAcG,IAAd,CAAmBN,WAAnB,GAAiCC,KAAjC,CAAuCL,OAAvC,CAAf;AACAS,MAAAA,QAAQ,GAAGA,QAAQ,CAACH,IAAT,CAAc,EAAd,CAAX,CAHwC,CAMxC;AACA;;AACA,UAAIH,KAAK,IAAIM,QAAb,EAAuB;AACnB;AACAZ,QAAAA,YAAY,CAACU,CAAD,CAAZ;AACAhB,QAAAA,eAAe;AAElB;AACJ;;AACD,QAAIO,cAAc,GAAE,CAAC,CAArB,EAAyB;AACrB,WAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,UAAU,CAACE,cAAD,CAAV,CAA2Ba,SAA3B,CAAqCH,MAAzD,EAAiED,CAAC,EAAlE,EAAsE;AAClE;AACA,YAAIlB,UAAU,IAAIO,UAAU,CAACE,cAAD,CAAV,CAA2Ba,SAA3B,CAAqCJ,CAArC,EAAwCK,KAAxC,CAA8CC,OAA9C,CAAsD,GAAtD,EAA2D,EAA3D,CAAlB,EAAkF;AAC9E;AACA;AACA;AACAtB,UAAAA,eAAe;AAEfQ,UAAAA,eAAe,CAACH,UAAU,CAACE,cAAD,CAAV,CAA2Ba,SAA3B,CAAqCJ,CAArC,EAAwCO,GAAzC,CAAf;AACH;AACJ;AACJ;AACJ;;AACD,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACF;AAAQ,IAAA,EAAE,EAAE,aAAZ;AAA0B,IAAA,OAAO,EAAEvB,eAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADE,eAEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOF,UAAP,CAFE,CADJ;AAMH,CAzDD;;KAAMM,U;AA2DNA,UAAU,CAACP,SAAX,GAAuBA,SAAvB;AAEA,qBAAeD,iBAAiB,CAACQ,UAAD,CAAhC","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport SpeechRecognition from \"react-speech-recognition\";\n\nconst propTypes = {\n    // Props injected by SpeechRecognition\n    transcript: PropTypes.string,\n    resetTranscript: PropTypes.func,\n    browserSupportsSpeechRecognition: PropTypes.bool\n};\n\nconst Dictaphone = ({\n    transcript,\n    resetTranscript,\n    browserSupportsSpeechRecognition,\n    categories,\n    pickCategory,\n    activeCategory,\n    displayQuestion\n}) => {\n    if (!browserSupportsSpeechRecognition) {\n        return null;\n    }\n    if (transcript != \"\") {\n\n        var matcher = /[a-z]+/gi;\n        console.log(transcript);\n        let guess = transcript.toLowerCase().match(matcher)\n        if (guess != null) {\n            guess = guess.join('')\n        }\n        console.log(guess)\n        console.log(activeCategory)\n        for (var i = 0; i < categories.length; i++) {\n            // var matcher = /[a-z]+/gi;\n            let category = categories[i].name.toLowerCase().match(matcher);\n            category = category.join('');\n\n\n            // console.log(category)\n            // console.log(guess)\n            if (guess == category) {\n                // console.log(\"categoryMatch\")\n                pickCategory(i);\n                resetTranscript();\n\n            }\n        }\n        if (activeCategory >-1 ) {\n            for (var i = 0; i < categories[activeCategory].questions.length; i++) {\n                // console.log(categories[activeCategory].questions[i].value.replace(\"$\", \"\"))\n                if (transcript == categories[activeCategory].questions[i].value.replace(\"$\", \"\")) {\n                    // console.log(\"valueMatch\")\n                    // pic/kCategory(i);\n                    // resetTranscript();\n                    resetTranscript();\n\n                    displayQuestion(categories[activeCategory].questions[i]._id)\n                }\n            }\n        }\n    }\n    return (\n        <div>\n      <button id =\"resetSpeech\" onClick={resetTranscript}>Reset</button>\n      <span>{transcript}</span>\n    </div>\n    );\n};\n\nDictaphone.propTypes = propTypes;\n\nexport default SpeechRecognition(Dictaphone);"]},"metadata":{},"sourceType":"module"}