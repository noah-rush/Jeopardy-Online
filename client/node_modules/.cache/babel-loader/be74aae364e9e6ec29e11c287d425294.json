{"ast":null,"code":"import axios from \"axios\";\nimport io from 'socket.io-client'; // const socket = openSocket('http://10.0.0.209:8000');\n\nlet socket;\nexport default {\n  getSocketIP() {\n    return axios.get(\"/api/ip\");\n  },\n\n  initSocket(serverIP) {\n    socket = io(); // socket = io();\n  },\n\n  getCategories: function (gameid) {\n    return axios.get(\"/api/categories\", {\n      params: {\n        gameid: gameid\n      }\n    });\n  },\n  getGames: function () {\n    return axios.get(\"/api/games\");\n  },\n  updateGameAnswers: function (answered, game) {\n    return axios.post(\"/api/updateAnswers\", {\n      game: game,\n      answered: answered\n    });\n  },\n  createNewGame: name => {\n    // console.log(name)\n    return axios.post(\"/api/create-game\", {\n      name: name\n    });\n  },\n  createNewPlayer: name => {\n    // console.log(name)\n    return axios.post(\"/api/create-player\", {\n      name: name\n    });\n  },\n\n  subscribeToTimer(cb) {\n    socket.on('timer', timestamp => cb(null, timestamp));\n    socket.emit('subscribeToTimer', 5000);\n  },\n\n  disconnectFromGame(gameID) {\n    socket.emit('unsubscribeFromGame', gameID);\n  },\n\n  connectToGame(gameID, playerId, reactFuncs) {\n    socket.emit('subscribeToGame', gameID);\n    socket.on('questionID', questionID => reactFuncs['handleQuestion'](questionID));\n    socket.on('contestantUpdate', player => reactFuncs['handleNewContestant'](player));\n    socket.on('scoresUpdate', (scores, turn, guess, correct) => reactFuncs['handleNewScores'](scores, turn, guess, correct));\n    socket.on('scoresInit', scores => reactFuncs['handleScoresInit'](scores));\n    socket.on('answerUpdate', answers => reactFuncs['handleAnswerUpdate'](answers));\n    socket.on('gameCloseQuestion', () => {\n      reactFuncs['closeQuestion']();\n    });\n    socket.on('buzzUpdate', playerName => {\n      reactFuncs['handleBuzzUpdate'](playerName);\n    });\n    socket.on('timesUp', (playerName, questionId) => {\n      reactFuncs['timesUp'](playerName, questionId);\n    });\n    socket.on('questionOver', questionId => {\n      reactFuncs['questionOver'](questionId);\n    });\n    socket.on('initFinalQuestion', () => reactFuncs['initFinalQuestion']());\n    socket.on('gameOver', () => reactFuncs['gameOver']());\n    socket.on('finalGuess', (player, guess) => reactFuncs['finalGuess'](player, guess));\n    return axios.post(\"/api/add-to-game\", {\n      game: gameID,\n      player: playerId\n    });\n  },\n\n  updateRound(gameID, newRound) {\n    socket.emit(\"updateRound\", gameID, newRound);\n  },\n\n  selectQuestion(questionID, gameid) {\n    socket.emit('selectQuestion', questionID, gameid);\n  },\n\n  closeQuestion(gameID) {\n    socket.emit('closeQuestionSignal', gameID);\n  },\n\n  submitScores(gameid, scores, turn, answer, correct, round) {\n    socket.emit('newScores', gameid, scores, turn, answer, correct, round);\n  },\n\n  buzz(gameID, playerName, question) {\n    socket.emit('buzz', gameID, playerName, question);\n  },\n\n  placeFinalWager(gameID, playerName, wager) {\n    socket.emit('finalWager', gameID, playerName, wager);\n  },\n\n  submitFinal(gameID, playerName, guess) {\n    socket.emit('submitFinal', gameID, playerName, guess);\n  }\n\n};","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/Utils/API.js"],"names":["axios","io","socket","getSocketIP","get","initSocket","serverIP","getCategories","gameid","params","getGames","updateGameAnswers","answered","game","post","createNewGame","name","createNewPlayer","subscribeToTimer","cb","on","timestamp","emit","disconnectFromGame","gameID","connectToGame","playerId","reactFuncs","questionID","player","scores","turn","guess","correct","answers","playerName","questionId","updateRound","newRound","selectQuestion","closeQuestion","submitScores","answer","round","buzz","question","placeFinalWager","wager","submitFinal"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport io from 'socket.io-client';\n// const socket = openSocket('http://10.0.0.209:8000');\nlet socket;\n\nexport default {\n  getSocketIP(){\n    return axios.get(\"/api/ip\");\n  },\n  initSocket(serverIP){\n    socket = io();\n    // socket = io();\n  },\n  getCategories: function(gameid) {\n    return axios.get(\"/api/categories\",\n      {params:{gameid:gameid}}\n      );\n  },\n  getGames: function() {\n    return axios.get(\"/api/games\");\n  },\n  updateGameAnswers: function(answered, game){\n    return axios.post(\"/api/updateAnswers\", {\n      game:game,\n      answered: answered\n    })\n  },\n  createNewGame: (name) =>{\n    // console.log(name)\n    return axios.post(\"/api/create-game\", {\n      name: name\n    })\n  },\n  createNewPlayer: (name) =>{\n    // console.log(name)\n    return axios.post(\"/api/create-player\", {\n      name: name\n    })\n  },\n  subscribeToTimer(cb) {\n    socket.on('timer', timestamp => cb(null, timestamp));\n    socket.emit('subscribeToTimer', 5000);\n  },\n  disconnectFromGame(gameID){\n    socket.emit('unsubscribeFromGame', gameID);\n\n  },\n  connectToGame(gameID, playerId, reactFuncs){\n    socket.emit('subscribeToGame', gameID);\n\n    socket.on('questionID', questionID =>  reactFuncs['handleQuestion']( questionID) );\n    socket.on('contestantUpdate', player =>  reactFuncs['handleNewContestant'](player) );\n    socket.on('scoresUpdate', (scores, turn, guess, correct) =>  reactFuncs['handleNewScores'](scores, turn, guess, correct) );\n    socket.on('scoresInit', (scores) =>  reactFuncs['handleScoresInit'](scores) );\n    socket.on('answerUpdate', answers =>  reactFuncs['handleAnswerUpdate'](answers) );\n    socket.on('gameCloseQuestion', () => {reactFuncs['closeQuestion']()} );\n    socket.on('buzzUpdate', (playerName) => {reactFuncs['handleBuzzUpdate'](playerName)} );\n    socket.on('timesUp', (playerName, questionId) => {reactFuncs['timesUp'](playerName, questionId)} );\n    socket.on('questionOver', (questionId) => {reactFuncs['questionOver'](questionId)} );\n    socket.on('initFinalQuestion', () => reactFuncs['initFinalQuestion']());\n    socket.on('gameOver', () => reactFuncs['gameOver']());\n    socket.on('finalGuess', (player,guess) => reactFuncs['finalGuess'](player,guess));\n\n    return axios.post(\"/api/add-to-game\", {\n      game:gameID,\n      player:playerId\n    })\n\n  },\n  updateRound(gameID, newRound){\n    socket.emit(\"updateRound\", gameID, newRound)\n  },\n  selectQuestion(questionID, gameid){\n    socket.emit('selectQuestion', questionID, gameid)\n  },\n  closeQuestion(gameID){\n    socket.emit('closeQuestionSignal', gameID);\n  },\n  submitScores(gameid, scores, turn, answer, correct, round){\n    socket.emit('newScores', gameid, scores, turn, answer, correct,round)\n  },\n  buzz(gameID, playerName, question){\n    socket.emit('buzz', gameID, playerName, question)\n  },\n  placeFinalWager(gameID, playerName, wager){\n    socket.emit('finalWager', gameID, playerName, wager)\n  },\n   submitFinal(gameID, playerName, guess){\n    socket.emit('submitFinal', gameID, playerName, guess)\n  }\n  \n};\n"]},"metadata":{},"sourceType":"module"}