{"ast":null,"code":"var _jsxFileName = \"/home/noah/jeopardy-app/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport API from \"./Utils/API\";\nimport Speech from 'react-speech';\nimport JeopardyBoard from './Components/JeopardyBoard/JeopardyBoard';\nimport Contestants from './Components/JeopardyBoard/Contestants';\nimport Question from './Components/JeopardyBoard/Question';\nimport Answer from './Components/JeopardyBoard/Answer';\nimport Result from './Components/JeopardyBoard/Result';\nimport FinalJeopardy from './Components/JeopardyBoard/FinalJeopardy';\nimport GameOver from './Components/JeopardyBoard/GameOver';\nimport MainMenu from './Components/MainMenu';\nimport Welcome from './Components/WelcomeScreen';\nimport { withCookies, Cookies } from 'react-cookie';\nimport { instanceOf } from 'prop-types';\nimport SpeechRecognition from './Components/SpeechRecognition/SpeechRecognition';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categories: [],\n      activeQuestion: \"\",\n      activeAnswer: false,\n      activeResult: false,\n      reset: false,\n      timer: \"\",\n      userScore: 0,\n      mainScreen: true,\n      activeCategory: \"\",\n      newGameTitle: \"\",\n      games: [],\n      answered: [],\n      gameID: \"\",\n      round: 0,\n      timestamp: \"No Timestamp yet\",\n      playerID: \"\",\n      playerName: '',\n      playerNum: 0,\n      contestants: [],\n      scores: [],\n      turn: 1,\n      buzzedIn: \"\",\n      canbuzz: true,\n      correct: false,\n      resultTimer: \"\",\n      questionOver: false,\n      triedToAnswer: 0,\n      totalQuestionsInRound: 0,\n      finalWager: 0,\n      finalWagerSubmitted: false,\n      finalQuestion: false,\n      finalQuestionAnswered: false,\n      finalResults: false,\n      finalGuesses: {},\n      gameOver: false,\n      activeAnswerTimer: \"\",\n      guess: \"\"\n    };\n\n    this.getGames = () => {\n      API.getGames().then(res => this.setState({\n        games: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.getGame = gameID => {\n      API.getCategories(gameID).then(res => {\n        let categories = res.data.jeopardyCategories; // console.log(res.data)\n\n        let gameOver = false;\n\n        if (res.data.round == 2) {\n          categories = res.data.doubleCategories;\n        }\n\n        if (res.data.round == 4) {\n          gameOver = true;\n        } // console.log(\"round \")\n        // console.log(this.state.round)\n\n\n        if (res.data.round == 3) {\n          let preFinalScores = { ...this.state.scores\n          };\n          this.setState({\n            preFinalScores: preFinalScores\n          });\n        }\n\n        this.setState({\n          categories: categories,\n          doubleCategories: res.data.doubleCategories,\n          finalJeopardy: res.data.finalJeopardy,\n          games: [],\n          answered: res.data.answered,\n          round: res.data.round,\n          gameOver: gameOver\n        }); // console.log(res.)\n\n        let qsInRound = 0;\n\n        for (var i = 0; i < categories.length; i++) {\n          qsInRound += categories[i].questions.length;\n        }\n\n        this.setState({\n          totalQuestionsInRound: qsInRound\n        });\n\n        if (res.data.answered.length == qsInRound) {\n          this.startNextRound();\n        }\n      }).catch(err => console.log(err));\n    };\n\n    this.handleNewContestant = players => {\n      this.setState({\n        contestants: players\n      });\n\n      for (var i = 0; i < players.length; i++) {\n        if (this.state.playerID == players[i]._id) {\n          this.state.playerNum = i + 1;\n        }\n      }\n    };\n\n    this.handleScoresInit = scores => {\n      this.setState({\n        scores: scores,\n        preFinalScores: scores\n      });\n    };\n\n    this.handleNewScores = (scores, turn, guess, correct) => {\n      // console.log(turn)\n      if (this.state.round != 3) {\n        if (turn != 0 && turn != undefined) {\n          this.setState({\n            turn: turn\n          });\n        }\n\n        if (correct) {\n          this.setState({\n            scores: scores,\n            guess: guess,\n            correct: correct,\n            activeResult: true,\n            resultTimer: setTimeout(() => {\n              this.closeQuestionFinal();\n            }, 1500)\n          });\n        } else {\n          this.setState({\n            scores: scores,\n            guess: guess,\n            correct: correct,\n            activeResult: true,\n            triedToAnswer: this.state.triedToAnswer + 1,\n            resultTimer: setTimeout(() => {\n              this.closeQuestion();\n            }, 1500)\n          });\n        }\n      } else {\n        this.setState({\n          scores: scores\n        });\n      }\n    };\n\n    this.questionOver = questionid => {\n      if (this.state.activeQuestion._id == questionid) {\n        this.setState({\n          activeResult: true,\n          triedToAnswer: 0,\n          questionOver: true,\n          resultTimer: setTimeout(() => {\n            this.closeQuestionFinal();\n          }, 1500)\n        });\n      }\n    };\n\n    this.closeQuestionFinal = () => {\n      this.setState({\n        timer: \"\",\n        activeQuestion: \"\",\n        guess: \"\",\n        activeAnswer: false,\n        activeResult: false,\n        questionOver: false\n      });\n\n      if (this.state.totalQuestionsInRound == this.state.answered.length) {\n        this.startNextRound();\n      }\n    };\n\n    this.startNextRound = () => {\n      if (this.state.round == 2) {\n        this.setState({\n          preFinalScores: this.state.scores,\n          round: 3,\n          answered: [],\n          categories: this.state.doubleCategories\n        });\n        API.updateRound(this.state.gameID, 3);\n      }\n\n      if (this.state.round == 1) {\n        this.setState({\n          round: 2,\n          answered: [],\n          categories: this.state.doubleCategories\n        });\n        API.updateRound(this.state.gameID, 2);\n        let qsInRound = 0;\n\n        for (var i = 0; i < this.state.categories.length; i++) {\n          qsInRound += this.state.categories[i].questions.length;\n        }\n\n        this.setState({\n          totalQuestionsInRound: qsInRound\n        });\n      }\n    };\n\n    this.handleAnswerUpdate = answers => {\n      this.setState({\n        answered: answers\n      });\n    };\n\n    this.closeQuestion = () => {\n      // clearTimeout(this.state.timer)\n      this.setState({\n        timer: \"\",\n        // activeQuestion: \"\",\n        guess: \"\",\n        activeAnswer: false,\n        activeResult: false\n      });\n\n      if (this.state.triedToAnswer == this.state.contestants.length) {\n        this.questionOver(this.state.activeQuestion._id);\n      }\n    };\n\n    this.displayQuestion = (questionid, index1, index2) => {\n      if (this.state.turn == this.state.playerNum) {\n        API.selectQuestion(questionid, this.state.gameID);\n      }\n    };\n\n    this.pickCategory = index1 => {\n      console.log(index1);\n      this.setState({\n        activeCategory: index1\n      });\n    };\n\n    this.buzzIn = () => {\n      API.buzz(this.state.gameID, this.state.playerName, this.state.activeQuestion._id);\n    };\n\n    this.handleBuzzUpdate = playerName => {\n      this.setState({\n        activeAnswer: true,\n        buzzedIn: playerName,\n        answerSeconds: 6,\n        activeAnswerTimer: setInterval(() => {\n          this.setState({\n            answerSeconds: this.state.answerSeconds - 1\n          });\n        }, 1000)\n      });\n      this.answerField.current.focus();\n    };\n\n    this.answerFinalQuestion = e => {\n      e.preventDefault();\n      let correctAnswer = this.state.finalJeopardy.questions[0].answer;\n      let correct = false;\n      this.setState({\n        finalQuestionAnswered: true\n      });\n\n      if (this.state.guess != \"\") {\n        if (this.state.guess.toLowerCase() == correctAnswer.toLowerCase()) {\n          console.log(\"Correct\");\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(this.state.finalWager);\n        } else {\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(this.state.finalWager);\n        }\n      }\n\n      API.submitFinal(this.state.gameID, this.state.playerName, this.state.guess);\n      API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct, this.state.round);\n    };\n\n    this.answerQuestion = e => {\n      e.preventDefault();\n\n      if (this.state.guess != \"\") {\n        let possibleAnswers = [];\n        clearInterval(this.state.activeAnswerTimer);\n        let answerVal = this.state.activeQuestion.value.replace('$', '');\n        let turnChange = false;\n        let correct;\n        let guess = this.state.guess;\n        let correctAnswer = this.state.activeQuestion.answer.toLowerCase();\n        var matcher = /[a-z]+/gi;\n        correctAnswer = correctAnswer.match(matcher);\n\n        if (correctAnswer[0].toLowerCase() == \"the\" || correctAnswer[0].toLowerCase() == \"a\") {\n          possibleAnswers.push(correctAnswer.join('').toLowerCase());\n          correctAnswer.splice(0, 1);\n        }\n\n        correctAnswer = correctAnswer.join('').toLowerCase();\n        possibleAnswers.push(correctAnswer);\n\n        if (guess != \"\") {\n          guess = guess.match(matcher);\n          guess = guess.join('').toLowerCase();\n        }\n\n        console.log(possibleAnswers);\n        console.log(guess); // let userScore = this.state.scores[this.state.playerID];\n\n        if (possibleAnswers.includes(guess)) {\n          console.log(\"Correct\");\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(answerVal);\n          turnChange = true;\n          correct = true;\n        } else {\n          this.setState({\n            canbuzz: false\n          });\n          console.log(correctAnswer);\n          correct = false;\n          this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal);\n        } // API.closeQuestion(this.state.gameID);\n\n\n        if (turnChange) {\n          API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct, this.state.round);\n        } else {\n          API.submitScores(this.state.gameID, this.state.scores, 0, this.state.guess, correct, this.state.round);\n        }\n      }\n    };\n\n    this.handleAnswer = event => {\n      this.setState({\n        guess: event.target.value\n      });\n    };\n\n    this.handleGameTitle = event => {\n      this.setState({\n        newGameTitle: event.target.value\n      });\n    };\n\n    this.handlePlayerName = event => {\n      this.setState({\n        newPlayerName: event.target.value\n      });\n    };\n\n    this.createNewGame = e => {\n      e.preventDefault();\n      API.createNewGame(this.state.newGameTitle).then(() => {\n        console.log(\"getting games\");\n        this.getGames();\n      }).catch(err => console.log(err));\n    };\n\n    this.createNewPlayer = e => {\n      e.preventDefault();\n      API.createNewPlayer(this.state.newPlayerName).then(player => {\n        const cookies = new Cookies();\n        cookies.set(\"playerID\", player.data._id);\n        cookies.set(\"playerName\", player.data.name);\n        this.setState({\n          playerID: player.data._id\n        });\n        this.setState({\n          playerName: player.data.name\n        });\n      }).catch(err => console.log(err));\n    };\n\n    this.timesUp = (playerName, questionId) => {\n      clearInterval(this.state.activeAnswerTimer);\n\n      if (!this.state.activeResult && playerName == this.state.playerName && this.state.playerName == this.state.buzzedIn && this.state.activeAnswer && this.state.activeQuestion._id == questionId) {\n        this.setState({\n          canbuzz: false\n        });\n        let correct = false;\n        let answerVal = this.state.activeQuestion.value.replace('$', '');\n        this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal);\n        API.submitScores(this.state.gameID, this.state.scores, 0, \"\", correct, this.state.round);\n      }\n    };\n\n    this.finalGuess = (player, answer) => {\n      this.state.finalGuesses[player] = answer;\n      console.log(this.state.finalGuesses);\n    };\n\n    this.gameOver = () => {\n      console.log(\"game Over\");\n      this.setState({\n        gameOver: true\n      });\n    };\n\n    this.startGame = gameID => {\n      this.setState({\n        gameID: gameID\n      });\n      this.setState({\n        mainScreen: false\n      });\n      let reactFuncs = {\n        handleQuestion: this.handleQuestion,\n        handleNewContestant: this.handleNewContestant,\n        handleNewScores: this.handleNewScores,\n        handleBuzzUpdate: this.handleBuzzUpdate,\n        handleScoresInit: this.handleScoresInit,\n        handleAnswerUpdate: this.handleAnswerUpdate,\n        closeQuestion: this.closeQuestion,\n        timesUp: this.timesUp,\n        questionOver: this.questionOver,\n        initFinalQuestion: this.initFinalQuestion,\n        finalGuess: this.finalGuess,\n        gameOver: this.gameOver\n      };\n      API.connectToGame(gameID, this.state.playerID, reactFuncs).then(() => {\n        this.getGame(this.state.gameID);\n        console.log(this.state.contestants);\n      });\n    };\n\n    this.initFinalQuestion = () => {\n      console.log(\"final question ready\");\n      this.setState({\n        finalQuestion: true\n      });\n    };\n\n    this.handleQuestion = questionID => {\n      let activeCategory = this.state.categories.filter((x, index) => {\n        return x.questions.some(element => element._id == questionID);\n      });\n      let activeQuestion = activeCategory[0].questions.filter(x => x._id == questionID);\n      this.setState({\n        activeQuestion: activeQuestion[0],\n        canbuzz: true\n      });\n      const mouseClickEvents = ['click'];\n\n      function simulateMouseClick(element) {\n        mouseClickEvents.forEach(mouseEventType => element.dispatchEvent(new MouseEvent(mouseEventType, {\n          view: window,\n          bubbles: true,\n          cancelable: true,\n          buttons: 1\n        })));\n      }\n\n      var element = document.querySelector('.question-name[id=\"' + questionID + '\"] + .rs-container button');\n      simulateMouseClick(element);\n      this.buzzButton.current.focus();\n    };\n\n    this.handleFinalWager = wager => {\n      // console.log(wager.target.value)\n      this.setState({\n        finalWager: wager.target.value\n      });\n    };\n\n    this.placeFinalWager = wager => {\n      wager.preventDefault();\n      this.setState({\n        finalWagerSubmitted: true\n      });\n      API.placeFinalWager(this.state.gameID, this.state.playerName, this.state.finalWager);\n    };\n  }\n\n  loadCookies() {\n    // cookies = instanceOf(Cookies).isRequired;\n    const cookies = new Cookies(); // console.log(Cookies)\n    // console.log(cookies.get(\"playerName\"));\n    // cookies.set(\"playerName\", \"juancho\")\n\n    this.setState({\n      playerName: cookies.get(\"playerName\") || \"\",\n      playerID: cookies.get(\"playerID\") || \"\"\n    });\n  }\n\n  componentDidMount() {\n    API.getSocketIP().then(res => {\n      console.log(res);\n      API.initSocket(res.data);\n    });\n    this.loadCookies();\n    this.getGames();\n    this.buzzButton = /*#__PURE__*/React.createRef();\n    this.answerField = /*#__PURE__*/React.createRef();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jeopardy-game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"utility-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 17\n      }\n    }, this.state.mainScreen ? /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"my-name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 42\n      }\n    }, this.state.playerName) : \"\"), this.state.activeResult ? /*#__PURE__*/React.createElement(Result, {\n      questionOver: this.state.questionOver,\n      buzz: this.state.buzzedIn,\n      correct: this.state.correct,\n      question: this.state.activeQuestion,\n      guess: this.state.guess,\n      me: this.state.playerName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 17\n      }\n    }) : this.state.activeAnswer ? /*#__PURE__*/React.createElement(Answer, {\n      handleAnswer: this.handleAnswer,\n      answerQuestion: this.answerQuestion,\n      buzzedIn: this.state.buzzedIn,\n      me: this.state.playerName,\n      ref: this.answerField,\n      seconds: this.state.answerSeconds,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 17\n      }\n    }) : \"\", this.state.activeQuestion ? /*#__PURE__*/React.createElement(Question, {\n      question: this.state.activeQuestion,\n      buzz: this.buzzIn,\n      canbuzz: this.state.canbuzz,\n      ref: this.buzzButton // handleAnswer = {this.handleAnswer}\n      // answerQuestion = {this.answerQuestion}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 17\n      }\n    }) : \"\", this.state.mainScreen ? this.state.playerID == \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"player-reg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Welcome, {\n      handlePlayerName: this.handlePlayerName,\n      createNewPlayer: this.createNewPlayer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 21\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MainMenu, {\n      startGame: this.startGame,\n      createNewGame: this.createNewGame,\n      handleGameTitle: this.handleGameTitle,\n      games: this.state.games,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 17\n      }\n    })) : this.state.round >= 3 ? this.state.gameOver ? /*#__PURE__*/React.createElement(GameOver, {\n      finalGuesses: this.state.finalGuesses,\n      scores: this.state.preFinalScores,\n      finalScores: this.state.scores,\n      contestants: this.state.contestants,\n      finalAnswer: this.state.finalJeopardy.questions[0].answer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 17\n      }\n    }) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jeopardy-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FinalJeopardy, {\n      wagerSubmitted: this.state.finalWagerSubmitted,\n      handleWager: this.handleFinalWager,\n      placeWager: this.placeFinalWager,\n      ready: this.state.finalQuestion,\n      myscore: this.state.preFinalScores[this.state.playerID],\n      question: this.state.finalJeopardy,\n      handleAnswer: this.handleAnswer,\n      finalAnswer: this.answerFinalQuestion,\n      scores: this.state.preFinalScores,\n      finalScores: this.state.scores,\n      contestants: this.state.contestants,\n      turn: this.state.turn,\n      answered: this.state.finalQuestionAnswered,\n      guess: this.state.guess,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 17\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jeopardy-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"just-the-board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(JeopardyBoard, {\n      endRound: this.state.totalQuestionsInRound,\n      answered: this.state.answered,\n      activeCategory: this.state.activeCategory,\n      displayQuestion: this.displayQuestion,\n      categories: this.state.categories,\n      doubleCat: this.state.doubleCategories,\n      round: this.state.round,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 12\n      }\n    })), /*#__PURE__*/React.createElement(Contestants, {\n      scores: this.state.scores,\n      contestants: this.state.contestants,\n      turn: this.state.turn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SpeechRecognition, {\n      displayQuestion: this.displayQuestion,\n      activeCategory: this.state.activeCategory,\n      categories: this.state.categories,\n      pickCategory: this.pickCategory,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/App.js"],"names":["React","Component","API","Speech","JeopardyBoard","Contestants","Question","Answer","Result","FinalJeopardy","GameOver","MainMenu","Welcome","withCookies","Cookies","instanceOf","SpeechRecognition","App","state","categories","activeQuestion","activeAnswer","activeResult","reset","timer","userScore","mainScreen","activeCategory","newGameTitle","games","answered","gameID","round","timestamp","playerID","playerName","playerNum","contestants","scores","turn","buzzedIn","canbuzz","correct","resultTimer","questionOver","triedToAnswer","totalQuestionsInRound","finalWager","finalWagerSubmitted","finalQuestion","finalQuestionAnswered","finalResults","finalGuesses","gameOver","activeAnswerTimer","guess","getGames","then","res","setState","data","catch","err","console","log","getGame","getCategories","jeopardyCategories","doubleCategories","preFinalScores","finalJeopardy","qsInRound","i","length","questions","startNextRound","handleNewContestant","players","_id","handleScoresInit","handleNewScores","undefined","setTimeout","closeQuestionFinal","closeQuestion","questionid","updateRound","handleAnswerUpdate","answers","displayQuestion","index1","index2","selectQuestion","pickCategory","buzzIn","buzz","handleBuzzUpdate","answerSeconds","setInterval","answerField","current","focus","answerFinalQuestion","e","preventDefault","correctAnswer","answer","toLowerCase","parseInt","submitFinal","submitScores","answerQuestion","possibleAnswers","clearInterval","answerVal","value","replace","turnChange","matcher","match","push","join","splice","includes","handleAnswer","event","target","handleGameTitle","handlePlayerName","newPlayerName","createNewGame","createNewPlayer","player","cookies","set","name","timesUp","questionId","finalGuess","startGame","reactFuncs","handleQuestion","initFinalQuestion","connectToGame","questionID","filter","x","index","some","element","mouseClickEvents","simulateMouseClick","forEach","mouseEventType","dispatchEvent","MouseEvent","view","window","bubbles","cancelable","buttons","document","querySelector","buzzButton","handleFinalWager","wager","placeFinalWager","loadCookies","get","componentDidMount","getSocketIP","initSocket","createRef","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport API from \"./Utils/API\";\n\nimport Speech from 'react-speech';\nimport JeopardyBoard from './Components/JeopardyBoard/JeopardyBoard'\nimport Contestants from './Components/JeopardyBoard/Contestants'\nimport Question from './Components/JeopardyBoard/Question'\nimport Answer from './Components/JeopardyBoard/Answer'\nimport Result from './Components/JeopardyBoard/Result'\nimport FinalJeopardy from './Components/JeopardyBoard/FinalJeopardy'\nimport GameOver from './Components/JeopardyBoard/GameOver'\n\nimport MainMenu from './Components/MainMenu'\nimport Welcome from './Components/WelcomeScreen'\nimport { withCookies, Cookies } from 'react-cookie';\nimport { instanceOf } from 'prop-types';\n\nimport SpeechRecognition from './Components/SpeechRecognition/SpeechRecognition';\n\n\n\n\n\n\n\nclass App extends Component {\n\n\n    state = {\n\n        categories: [],\n        activeQuestion: \"\",\n        activeAnswer: false,\n        activeResult: false,\n        reset:false,\n        timer: \"\",\n        userScore: 0,\n        mainScreen: true,\n        activeCategory: \"\",\n        newGameTitle: \"\",\n        games: [],\n        answered: [],\n        gameID: \"\",\n        round: 0,\n        timestamp: \"No Timestamp yet\",\n        playerID: \"\",\n        playerName: '',\n        playerNum: 0,\n        contestants: [],\n        scores: [],\n        turn: 1,\n        buzzedIn: \"\",\n        canbuzz: true,\n        correct: false,\n        resultTimer: \"\",\n        questionOver: false,\n        triedToAnswer: 0,\n        totalQuestionsInRound: 0,\n        finalWager: 0,\n        finalWagerSubmitted: false,\n        finalQuestion: false,\n        finalQuestionAnswered: false,\n        finalResults: false,\n        finalGuesses: {},\n        gameOver: false,\n        activeAnswerTimer: \"\",\n        guess: \"\"\n\n    }\n\n    loadCookies() {\n        // cookies = instanceOf(Cookies).isRequired;\n        const cookies = new Cookies();\n        // console.log(Cookies)\n        // console.log(cookies.get(\"playerName\"));\n        // cookies.set(\"playerName\", \"juancho\")\n        this.setState({\n            playerName: cookies.get(\"playerName\") || \"\",\n            playerID: cookies.get(\"playerID\") || \"\",\n\n        })\n    }\n\n    componentDidMount() {\n\n        API.getSocketIP().then(\n            (res) => {\n                console.log(res);\n                API.initSocket(res.data)\n            })\n        this.loadCookies()\n        this.getGames();\n        this.buzzButton = React.createRef();\n        this.answerField = React.createRef();\n\n\n    }\n    getGames = () => {\n        API.getGames()\n            .then(res => this.setState({\n                games: res.data\n            }))\n            .catch(err => console.log(err))\n    }\n\n    getGame = (gameID) => {\n        API.getCategories(gameID)\n            .then((res) => {\n                let categories = res.data.jeopardyCategories\n                // console.log(res.data)\n                let gameOver = false\n                if (res.data.round == 2) {\n                    categories = res.data.doubleCategories\n                }\n                if (res.data.round == 4) {\n                    gameOver = true\n                }\n                // console.log(\"round \")\n                // console.log(this.state.round)\n                if (res.data.round == 3) {\n                    let preFinalScores = { ...this.state.scores }\n                    this.setState({ preFinalScores: preFinalScores })\n                }\n                this.setState({\n                    categories: categories,\n                    doubleCategories: res.data.doubleCategories,\n                    finalJeopardy: res.data.finalJeopardy,\n                    games: [],\n                    answered: res.data.answered,\n                    round: res.data.round,\n                    gameOver: gameOver\n                })\n                // console.log(res.)\n\n\n                let qsInRound = 0;\n                for (var i = 0; i < categories.length; i++) {\n                    qsInRound += categories[i].questions.length\n                }\n                this.setState({ totalQuestionsInRound: qsInRound })\n                if (res.data.answered.length == qsInRound) {\n                    this.startNextRound()\n                }\n            })\n            .catch(err => console.log(err));\n\n    }\n    handleNewContestant = (players) => {\n        this.setState({ contestants: players })\n        for (var i = 0; i < players.length; i++) {\n            if (this.state.playerID == players[i]._id) {\n                this.state.playerNum = i + 1;\n            }\n        }\n    }\n    handleScoresInit = (scores) => {\n\n        this.setState({ scores: scores, preFinalScores: scores })\n\n    }\n    handleNewScores = (scores, turn, guess, correct) => {\n        // console.log(turn)\n        if (this.state.round != 3) {\n            if (turn != 0 && turn != undefined) {\n                this.setState({ turn: turn });\n            }\n            if (correct) {\n                this.setState({\n                    scores: scores,\n                    guess: guess,\n                    correct: correct,\n                    activeResult: true,\n                    resultTimer: setTimeout(() => {\n                        this.closeQuestionFinal()\n                    }, 1500)\n                })\n            } else {\n\n                this.setState({\n                    scores: scores,\n                    guess: guess,\n                    correct: correct,\n                    activeResult: true,\n                    triedToAnswer: this.state.triedToAnswer + 1,\n                    resultTimer: setTimeout(() => {\n                        this.closeQuestion()\n                    }, 1500)\n                })\n\n            }\n        } else {\n            this.setState({\n                scores: scores\n            })\n        }\n\n    }\n    questionOver = (questionid) => {\n        if (this.state.activeQuestion._id == questionid) {\n            this.setState({\n                activeResult: true,\n                triedToAnswer: 0,\n                questionOver: true,\n                resultTimer: setTimeout(() => {\n                    this.closeQuestionFinal()\n                }, 1500)\n            })\n        }\n    }\n    closeQuestionFinal = () => {\n        this.setState({\n            timer: \"\",\n            activeQuestion: \"\",\n            guess: \"\",\n\n            activeAnswer: false,\n            activeResult: false,\n            questionOver: false\n        })\n        if (this.state.totalQuestionsInRound == this.state.answered.length) {\n            this.startNextRound()\n\n        }\n    }\n    startNextRound = () => {\n        if (this.state.round == 2) {\n            this.setState({ preFinalScores: this.state.scores, round: 3, answered: [], categories: this.state.doubleCategories })\n            API.updateRound(this.state.gameID, 3)\n\n        }\n        if (this.state.round == 1) {\n            this.setState({ round: 2, answered: [], categories: this.state.doubleCategories })\n            API.updateRound(this.state.gameID, 2)\n            let qsInRound = 0;\n            for (var i = 0; i < this.state.categories.length; i++) {\n                qsInRound += this.state.categories[i].questions.length\n            }\n            this.setState({ totalQuestionsInRound: qsInRound })\n        }\n\n    }\n    handleAnswerUpdate = (answers) => {\n        this.setState({ answered: answers })\n    }\n    closeQuestion = () => {\n        // clearTimeout(this.state.timer)\n        this.setState({\n            timer: \"\",\n            // activeQuestion: \"\",\n            guess: \"\",\n            activeAnswer: false,\n            activeResult: false\n        })\n        if (this.state.triedToAnswer == this.state.contestants.length) {\n\n            this.questionOver(this.state.activeQuestion._id)\n\n        }\n    }\n    displayQuestion = (questionid, index1, index2) => {\n        if (this.state.turn == this.state.playerNum) {\n            API.selectQuestion(questionid, this.state.gameID)\n        }\n    }\n    pickCategory = (index1) => {\n        console.log(index1)\n        this.setState({\n            activeCategory: index1\n        })\n\n    }\n    buzzIn = () => {\n        API.buzz(this.state.gameID, this.state.playerName, this.state.activeQuestion._id)\n    }\n    handleBuzzUpdate = (playerName) => {\n        this.setState({\n            activeAnswer: true,\n            buzzedIn: playerName,\n            answerSeconds: 6,\n            activeAnswerTimer: setInterval(() => {\n                this.setState({ answerSeconds: this.state.answerSeconds - 1 })\n            }, 1000)\n        })\n        this.answerField.current.focus()\n\n    }\n    answerFinalQuestion = (e) => {\n        e.preventDefault();\n\n        let correctAnswer = this.state.finalJeopardy.questions[0].answer\n        let correct = false\n        this.setState({ finalQuestionAnswered: true })\n        if (this.state.guess != \"\") {\n            if (this.state.guess.toLowerCase() == correctAnswer.toLowerCase()) {\n                console.log(\"Correct\")\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(this.state.finalWager)\n            } else {\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(this.state.finalWager)\n            }\n        }\n        API.submitFinal(this.state.gameID, this.state.playerName, this.state.guess)\n        API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct, this.state.round)\n    }\n    answerQuestion = (e) => {\n        e.preventDefault();\n        if (this.state.guess != \"\") {\n            let possibleAnswers = []\n\n            clearInterval(this.state.activeAnswerTimer)\n            let answerVal = this.state.activeQuestion.value.replace('$', '');\n            let turnChange = false;\n            let correct\n\n            let guess = this.state.guess\n            let correctAnswer = this.state.activeQuestion.answer.toLowerCase()\n\n            var matcher = /[a-z]+/gi;\n            correctAnswer = correctAnswer.match(matcher);\n            if(correctAnswer[0].toLowerCase() == \"the\" || correctAnswer[0].toLowerCase() == \"a\"){\n                possibleAnswers.push(correctAnswer.join('').toLowerCase())\n                correctAnswer.splice(0,1)\n            }\n            correctAnswer = correctAnswer.join('').toLowerCase();\n            possibleAnswers.push(correctAnswer)\n\n\n            if (guess != \"\") {\n                guess = guess.match(matcher);\n                guess = guess.join('').toLowerCase();\n            }\n            console.log(possibleAnswers);\n            console.log(guess);\n\n\n\n            // let userScore = this.state.scores[this.state.playerID];\n            if (possibleAnswers.includes(guess)) {\n                console.log(\"Correct\")\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] + parseInt(answerVal)\n                turnChange = true;\n                correct = true;\n            } else {\n                this.setState({ canbuzz: false })\n                console.log(correctAnswer)\n                correct = false;\n                this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal)\n            }\n\n            // API.closeQuestion(this.state.gameID);\n            if (turnChange) {\n                API.submitScores(this.state.gameID, this.state.scores, this.state.playerNum, this.state.guess, correct, this.state.round)\n            } else {\n                API.submitScores(this.state.gameID, this.state.scores, 0, this.state.guess, correct, this.state.round)\n            }\n        }\n    }\n\n    handleAnswer = (event) => {\n        this.setState({\n            guess: event.target.value\n        })\n    }\n    handleGameTitle = (event) => {\n        this.setState({\n            newGameTitle: event.target.value\n        })\n    }\n    handlePlayerName = (event) => {\n        this.setState({\n            newPlayerName: event.target.value\n        })\n    }\n    createNewGame = (e) => {\n        e.preventDefault();\n        API.createNewGame(this.state.newGameTitle)\n            .then(() => {\n                console.log(\"getting games\")\n                this.getGames();\n            })\n            .catch(err => console.log(err));\n    }\n    createNewPlayer = (e) => {\n        e.preventDefault();\n        API.createNewPlayer(this.state.newPlayerName)\n            .then((player) => {\n                const cookies = new Cookies();\n                cookies.set(\"playerID\", player.data._id);\n                cookies.set(\"playerName\", player.data.name);\n                this.setState({ playerID: player.data._id })\n                this.setState({ playerName: player.data.name })\n\n            })\n            .catch(err => console.log(err));\n    }\n    timesUp = (playerName, questionId) => {\n        clearInterval(this.state.activeAnswerTimer)\n\n        if (!this.state.activeResult && playerName == this.state.playerName && this.state.playerName == this.state.buzzedIn && this.state.activeAnswer && this.state.activeQuestion._id == questionId) {\n            this.setState({ canbuzz: false })\n            let correct = false;\n            let answerVal = this.state.activeQuestion.value.replace('$', '');\n            this.state.scores[this.state.playerID] = this.state.scores[this.state.playerID] - parseInt(answerVal)\n            API.submitScores(this.state.gameID, this.state.scores, 0, \"\", correct, this.state.round)\n\n        }\n    }\n    finalGuess = (player, answer) => {\n        this.state.finalGuesses[player] = answer\n\n        console.log(this.state.finalGuesses)\n    }\n    gameOver = () => {\n        console.log(\"game Over\")\n        this.setState({ gameOver: true })\n    }\n    startGame = (gameID) => {\n\n\n        this.setState({ gameID: gameID });\n        this.setState({ mainScreen: false });\n        let reactFuncs = {\n            handleQuestion: this.handleQuestion,\n            handleNewContestant: this.handleNewContestant,\n            handleNewScores: this.handleNewScores,\n            handleBuzzUpdate: this.handleBuzzUpdate,\n            handleScoresInit: this.handleScoresInit,\n            handleAnswerUpdate: this.handleAnswerUpdate,\n            closeQuestion: this.closeQuestion,\n            timesUp: this.timesUp,\n            questionOver: this.questionOver,\n            initFinalQuestion: this.initFinalQuestion,\n            finalGuess: this.finalGuess,\n            gameOver: this.gameOver\n        }\n\n        API.connectToGame(gameID, this.state.playerID, reactFuncs).then(() => {\n            this.getGame(this.state.gameID);\n            console.log(this.state.contestants)\n        })\n    }\n    initFinalQuestion = () => {\n        console.log(\"final question ready\")\n        this.setState({ finalQuestion: true })\n    }\n    handleQuestion = (questionID) => {\n\n        let activeCategory = this.state.categories.filter((x, index) => {\n            return x.questions.some((element) => element._id == questionID);\n        })\n        let activeQuestion = activeCategory[0].questions.filter((x) => x._id == questionID);\n        this.setState({\n            activeQuestion: activeQuestion[0],\n            canbuzz: true\n\n        })\n        const mouseClickEvents = ['click'];\n\n        function simulateMouseClick(element) {\n            mouseClickEvents.forEach(mouseEventType =>\n                element.dispatchEvent(\n                    new MouseEvent(mouseEventType, {\n                        view: window,\n                        bubbles: true,\n                        cancelable: true,\n                        buttons: 1\n                    })\n                )\n            );\n        }\n\n        var element = document.querySelector('.question-name[id=\"' + questionID + '\"] + .rs-container button');\n        simulateMouseClick(element);\n        this.buzzButton.current.focus()\n\n\n    }\n    handleFinalWager = (wager) => {\n        // console.log(wager.target.value)\n        this.setState({ finalWager: wager.target.value })\n    }\n    placeFinalWager = (wager) => {\n        wager.preventDefault();\n        this.setState({ finalWagerSubmitted: true })\n        API.placeFinalWager(this.state.gameID, this.state.playerName, this.state.finalWager)\n    }\n    render() {\n        return (\n            <div className = \"jeopardy-game\">\n                <div className = \"utility-menu\">\n                {this.state.mainScreen ? <h3 className = \"my-name\">{this.state.playerName}</h3> : \"\"}\n                </div>\n                 {this.state.activeResult ? \n                <Result \n                questionOver = {this.state.questionOver}\n                    buzz = {this.state.buzzedIn}\n                    correct = {this.state.correct}\n                    question = {this.state.activeQuestion}\n                    guess = {this.state.guess}\n                    me = {this.state.playerName}\n\n                />\n                \n                : \n                this.state.activeAnswer ?\n                <Answer \n                    handleAnswer = {this.handleAnswer}\n                    answerQuestion = {this.answerQuestion}\n                    buzzedIn = {this.state.buzzedIn}\n                    me = {this.state.playerName}\n                    ref = {this.answerField}\n                    seconds = {this.state.answerSeconds}\n                />\n                : \"\"}\n            {this.state.activeQuestion ? \n                <Question \n                    question = {this.state.activeQuestion}\n                    buzz = {this.buzzIn}\n                    canbuzz = {this.state.canbuzz}\n                    ref = {this.buzzButton}\n                    // handleAnswer = {this.handleAnswer}\n                    // answerQuestion = {this.answerQuestion}\n                />\n                \n            : \"\"}\n            {this.state.mainScreen ? \n                this.state.playerID == \"\" ?\n                <div className = \"player-reg\">\n                    <Welcome handlePlayerName = {this.handlePlayerName}\n                            createNewPlayer = {this.createNewPlayer}/>\n                </div>\n                :\n                <div className = \"main-menu\">\n\n                <MainMenu   \n                    startGame ={this.startGame}\n                    createNewGame = {this.createNewGame} \n                    handleGameTitle = {this.handleGameTitle} \n                    games = {this.state.games}>\n                </MainMenu>\n                </div>\n                :\n                this.state.round >= 3?\n                this.state.gameOver ?\n                <GameOver\n                finalGuesses = {this.state.finalGuesses}\n                scores = {this.state.preFinalScores}\n                finalScores = {this.state.scores}\n                contestants = {this.state.contestants} \n                finalAnswer = {this.state.finalJeopardy.questions[0].answer}\n\n                />\n                :\n                <div className = \"jeopardy-board\">\n                <FinalJeopardy\n        \n                wagerSubmitted = {this.state.finalWagerSubmitted}\n                handleWager = {this.handleFinalWager}\n                placeWager = {this.placeFinalWager}\n                ready = {this.state.finalQuestion}\n                myscore = {this.state.preFinalScores[this.state.playerID]}\n                question = {this.state.finalJeopardy}\n                handleAnswer = {this.handleAnswer}\n                finalAnswer = {this.answerFinalQuestion}\n                scores = {this.state.preFinalScores}\n                finalScores = {this.state.scores}\n                contestants = {this.state.contestants} \n                turn = {this.state.turn}\n                answered={this.state.finalQuestionAnswered}\n                guess = {this.state.guess}\n\n                />\n                </div>\n                :\n            <div className = \"jeopardy-board\">\n            <div className = \"just-the-board\">\n\n           <JeopardyBoard  \n                    endRound= {this.state.totalQuestionsInRound}\n                    answered = {this.state.answered}\n                    activeCategory = {this.state.activeCategory} \n                    displayQuestion = {this.displayQuestion} \n                    categories = {this.state.categories}\n                    doubleCat = {this.state.doubleCategories}\n                    round = {this.state.round}/>\n            </div>\n            <Contestants\n                scores = {this.state.scores}\n                contestants = {this.state.contestants} \n                turn = {this.state.turn}\n            />\n            <SpeechRecognition \n            displayQuestion = {this.displayQuestion} \n            activeCategory = {this.state.activeCategory} \n            categories = {this.state.categories} \n            pickCategory = {this.pickCategory}></SpeechRecognition>\n        </div>\n    }\n         \n       </div>\n\n\n        )\n\n\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}