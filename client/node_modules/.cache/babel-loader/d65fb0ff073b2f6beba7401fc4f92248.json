{"ast":null,"code":"var _jsxFileName = \"/home/noah/jeopardy-app/client/src/Components/JeopardyBoard/Result.js\";\nimport React, { Component } from \"react\";\n\nvar Result = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-result-panel\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result-panel-inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }\n  }, props.questionOver ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-over\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 21\n    }\n  }, \"The answer was \", props.question.answer, \".\") : props.correct ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"correct-answer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }\n  }, \"The answer was \", props.question.answer, \".\", props.buzz, \" gains \", props.question.value, \". The board is \", props.buzz, \"'s\") : props.guess == \"\" ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"times-up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }\n  }, \"Times Up! Board is still open.\") : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"incorrect-answer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, props.buzz, \" guessed \", props.guess, \" and loses \", props.question.value, \".\")));\n};\n\n_c = Result;\nexport default Result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/Components/JeopardyBoard/Result.js"],"names":["React","Component","Result","props","questionOver","question","answer","correct","buzz","value","guess"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,IAAIC,MAAM,GAAIC,KAAD,IAAW;AACpB,sBACI;AAAK,IAAA,SAAS,EAAG,qBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG;AAAK,IAAA,SAAS,EAAG,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAESA,KAAK,CAACC,YAAN,gBACA;AAAK,IAAA,SAAS,EAAE,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACgBD,KAAK,CAACE,QAAN,CAAeC,MAD/B,MADA,GAKAH,KAAK,CAACI,OAAN,gBACA;AAAK,IAAA,SAAS,EAAE,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACgBJ,KAAK,CAACE,QAAN,CAAeC,MAD/B,OAEEH,KAAK,CAACK,IAFR,aAEqBL,KAAK,CAACE,QAAN,CAAeI,KAFpC,qBAGcN,KAAK,CAACK,IAHpB,OADA,GAOJL,KAAK,CAACO,KAAN,IAAe,EAAf,gBACA;AAAK,IAAA,SAAS,EAAE,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADA,gBAMA;AAAK,IAAA,SAAS,EAAE,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEKP,KAAK,CAACK,IAFX,eAE0BL,KAAK,CAACO,KAFhC,iBAEkDP,KAAK,CAACE,QAAN,CAAeI,KAFjE,MApBL,CADH,CADJ;AAmCH,CApCD;;KAAIP,M;AAsCJ,eAAeA,MAAf","sourcesContent":["import React, { Component } from \"react\";\n\nvar Result = (props) => {\n    return (\n        <div className = \"answer-result-panel\">\n           <div className = \"result-panel-inner\">\n                {\n                    props.questionOver ?\n                    <div className =\"question-over\">\n                    The answer was {props.question.answer}. \n                    </div>\n                    : \n                    props.correct ?\n                    <div className =\"correct-answer\">\n                    The answer was {props.question.answer}.\n                     {props.buzz} gains {props.question.value}.\n                    The board is {props.buzz}'s\n                    </div>\n                :\n                props.guess == \"\" ?\n                <div className =\"times-up\">\n                Times Up! Board is still open.\n\n                </div>\n                :\n                <div className =\"incorrect-answer\">\n                    {/*The answer was {props.question.answer}.*/}\n                    {props.buzz} guessed {props.guess} and loses {props.question.value}.\n                {/*    {props.me == props.buzz ? \n                    <button id = \"challenge\"> Challenge</button>\n                    :\"\"}*/}\n\n                </div>\n                }\n           </div>\n        </div>\n    )\n\n}\n\nexport default Result;"]},"metadata":{},"sourceType":"module"}