{"ast":null,"code":"export default {\n  correctAnswer(guess, correctAnswer) {\n    let possibleAnswers = [];\n    var matcher = /[a-z]+/gi;\n    correctAnswer = correctAnswer.match(matcher);\n\n    if (correctAnswer[0].toLowerCase() == \"the\" || correctAnswer[0].toLowerCase() == \"a\") {\n      possibleAnswers.push(correctAnswer.join('').toLowerCase());\n      correctAnswer.splice(0, 1);\n    }\n\n    correctAnswer = correctAnswer.join('').toLowerCase();\n    possibleAnswers.push(correctAnswer);\n    guess = guess.match(matcher);\n    guess = guess.join('').toLowerCase();\n\n    if (possibleAnswers.includes(guess)) {\n      return true;\n    }\n\n    return false;\n  }\n\n};","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/Utils/game.js"],"names":["correctAnswer","guess","possibleAnswers","matcher","match","toLowerCase","push","join","splice","includes"],"mappings":"AAAA,eAAe;AACXA,EAAAA,aAAa,CAACC,KAAD,EAAQD,aAAR,EAAuB;AAChC,QAAIE,eAAe,GAAG,EAAtB;AACA,QAAIC,OAAO,GAAG,UAAd;AACAH,IAAAA,aAAa,GAAGA,aAAa,CAACI,KAAd,CAAoBD,OAApB,CAAhB;;AACA,QAAIH,aAAa,CAAC,CAAD,CAAb,CAAiBK,WAAjB,MAAkC,KAAlC,IAA2CL,aAAa,CAAC,CAAD,CAAb,CAAiBK,WAAjB,MAAkC,GAAjF,EAAsF;AAClFH,MAAAA,eAAe,CAACI,IAAhB,CAAqBN,aAAa,CAACO,IAAd,CAAmB,EAAnB,EAAuBF,WAAvB,EAArB;AACAL,MAAAA,aAAa,CAACQ,MAAd,CAAqB,CAArB,EAAwB,CAAxB;AACH;;AACDR,IAAAA,aAAa,GAAGA,aAAa,CAACO,IAAd,CAAmB,EAAnB,EAAuBF,WAAvB,EAAhB;AACAH,IAAAA,eAAe,CAACI,IAAhB,CAAqBN,aAArB;AAGAC,IAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAYD,OAAZ,CAAR;AACAF,IAAAA,KAAK,GAAGA,KAAK,CAACM,IAAN,CAAW,EAAX,EAAeF,WAAf,EAAR;;AACA,QAAIH,eAAe,CAACO,QAAhB,CAAyBR,KAAzB,CAAJ,EAAqC;AACjC,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AAEH;;AApBU,CAAf","sourcesContent":["export default {\n    correctAnswer(guess, correctAnswer) {\n        let possibleAnswers = []\n        var matcher = /[a-z]+/gi;\n        correctAnswer = correctAnswer.match(matcher);\n        if (correctAnswer[0].toLowerCase() == \"the\" || correctAnswer[0].toLowerCase() == \"a\") {\n            possibleAnswers.push(correctAnswer.join('').toLowerCase())\n            correctAnswer.splice(0, 1)\n        }\n        correctAnswer = correctAnswer.join('').toLowerCase();\n        possibleAnswers.push(correctAnswer)\n\n\n        guess = guess.match(matcher);\n        guess = guess.join('').toLowerCase();\n        if (possibleAnswers.includes(guess)) {\n            return true\n        }\n        return false\n\n    }\n\n};"]},"metadata":{},"sourceType":"module"}