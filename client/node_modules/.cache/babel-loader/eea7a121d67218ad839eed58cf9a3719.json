{"ast":null,"code":"import axios from \"axios\";\nimport io from 'socket.io-client'; // const socket = openSocket('http://10.0.0.209:8000');\n\nlet socket;\nexport default {\n  getSocketIP() {\n    return axios.get(\"/api/ip\");\n  },\n\n  initSocket(serverIP) {\n    socket = io(\"http://localhost:3001\");\n  },\n\n  getCategories: function (gameid) {\n    return axios.get(\"/api/categories\", {\n      params: {\n        gameid: gameid\n      }\n    });\n  },\n  getGames: function () {\n    return axios.get(\"/api/games\");\n  },\n  updateGameAnswers: function (answered, game) {\n    return axios.post(\"/api/updateAnswers\", {\n      game: game,\n      answered: answered\n    });\n  },\n  createNewGame: name => {\n    // console.log(name)\n    return axios.post(\"/api/create-game\", {\n      name: name\n    });\n  },\n  createNewPlayer: name => {\n    // console.log(name)\n    return axios.post(\"/api/create-player\", {\n      name: name\n    });\n  },\n\n  subscribeToTimer(cb) {\n    socket.on('timer', timestamp => cb(null, timestamp));\n    socket.emit('subscribeToTimer', 5000);\n  },\n\n  connectToGame(gameID, playerId, handleQuestion, handleNewContestant, handleNewScores, handleAnswerUpdate, closeQuestion, handleBuzzUpdate, handleScoresInit) {\n    socket.emit('subscribeToGame', gameID);\n    socket.on('questionID', questionID => handleQuestion(questionID));\n    socket.on('contestantUpdate', player => handleNewContestant(player));\n    socket.on('scoresUpdate', (scores, turn, guess, correct) => handleNewScores(scores, turn, guess, correct));\n    socket.on('scoresInit', scores => handleScoresInit(scores));\n    socket.on('answerUpdate', answers => handleAnswerUpdate(answers));\n    socket.on('gameCloseQuestion', () => {\n      closeQuestion();\n    });\n    socket.on('buzzUpdate', playerName => {\n      handleBuzzUpdate(playerName);\n    });\n    return axios.post(\"/api/add-to-game\", {\n      game: gameID,\n      player: playerId\n    });\n  },\n\n  selectQuestion(questionID, gameid) {\n    socket.emit('selectQuestion', questionID, gameid);\n  },\n\n  closeQuestion(gameID) {\n    socket.emit('closeQuestionSignal', gameID);\n  },\n\n  submitScores(gameid, scores, turn, answer, correct) {\n    socket.emit('newScores', gameid, scores, turn, answer, correct);\n  },\n\n  buzz(gameID, playerName) {\n    socket.emit('buzz', gameID, playerName);\n  }\n\n};","map":{"version":3,"sources":["/home/noah/jeopardy-app/client/src/Utils/API.js"],"names":["axios","io","socket","getSocketIP","get","initSocket","serverIP","getCategories","gameid","params","getGames","updateGameAnswers","answered","game","post","createNewGame","name","createNewPlayer","subscribeToTimer","cb","on","timestamp","emit","connectToGame","gameID","playerId","handleQuestion","handleNewContestant","handleNewScores","handleAnswerUpdate","closeQuestion","handleBuzzUpdate","handleScoresInit","questionID","player","scores","turn","guess","correct","answers","playerName","selectQuestion","submitScores","answer","buzz"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport io from 'socket.io-client';\n// const socket = openSocket('http://10.0.0.209:8000');\nlet socket;\n\nexport default {\n  getSocketIP(){\n    return axios.get(\"/api/ip\");\n  },\n  initSocket(serverIP){\n    socket = io(\"http://localhost:3001\");\n  },\n  getCategories: function(gameid) {\n    return axios.get(\"/api/categories\",\n      {params:{gameid:gameid}}\n      );\n  },\n  getGames: function() {\n    return axios.get(\"/api/games\");\n  },\n  updateGameAnswers: function(answered, game){\n    return axios.post(\"/api/updateAnswers\", {\n      game:game,\n      answered: answered\n    })\n  },\n  createNewGame: (name) =>{\n    // console.log(name)\n    return axios.post(\"/api/create-game\", {\n      name: name\n    })\n  },\n  createNewPlayer: (name) =>{\n    // console.log(name)\n    return axios.post(\"/api/create-player\", {\n      name: name\n    })\n  },\n  subscribeToTimer(cb) {\n    socket.on('timer', timestamp => cb(null, timestamp));\n    socket.emit('subscribeToTimer', 5000);\n  },\n  connectToGame(gameID, playerId, handleQuestion, handleNewContestant, handleNewScores, handleAnswerUpdate, closeQuestion, handleBuzzUpdate, handleScoresInit){\n    socket.emit('subscribeToGame', gameID);\n    socket.on('questionID', questionID =>  handleQuestion( questionID) );\n    socket.on('contestantUpdate', player =>  handleNewContestant(player) );\n    socket.on('scoresUpdate', (scores, turn, guess, correct) =>  handleNewScores(scores, turn, guess, correct) );\n    socket.on('scoresInit', (scores) =>  handleScoresInit(scores) );\n\n    socket.on('answerUpdate', answers =>  handleAnswerUpdate(answers) );\n    socket.on('gameCloseQuestion', () => {closeQuestion()} );\n    socket.on('buzzUpdate', (playerName) => {handleBuzzUpdate(playerName)} );\n\n    return axios.post(\"/api/add-to-game\", {\n      game:gameID,\n      player:playerId\n    })\n\n  },\n  selectQuestion(questionID, gameid){\n    socket.emit('selectQuestion', questionID, gameid)\n  },\n  closeQuestion(gameID){\n    socket.emit('closeQuestionSignal', gameID);\n  },\n  submitScores(gameid, scores, turn, answer, correct){\n    socket.emit('newScores', gameid, scores, turn, answer, correct)\n  },\n  buzz(gameID, playerName){\n    socket.emit('buzz', gameID, playerName)\n  }\n  \n};\n"]},"metadata":{},"sourceType":"module"}